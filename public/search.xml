<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[npm and googleapis mirror]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/03/20/npm-mirror/</url>
      <content type="html"><![CDATA[<p>最近家里网络很糟糕，上不了npm，很是纠结，于是修改设置使用国内的taobao镜像</p>
<a id="more"></a>
<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>
<p>1.通过config命令</p>
<pre><code>npm config set registry https://registry.npm.taobao.org 
npm info underscore （如果上面配置正确这个命令会有字符串response）
</code></pre><p>2.命令行指定</p>
<pre><code>npm --registry https://registry.npm.taobao.org info underscore 
</code></pre><p>3.编辑 ~/.npmrc 加入下面内容</p>
<pre><code>registry = https://registry.npm.taobao.org
</code></pre><p>搜索镜像: <a href="https://npm.taobao.org" target="_blank" rel="external">https://npm.taobao.org</a></p>
<p>建立或使用镜像,参考: <a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="external">https://github.com/cnpm/cnpmjs.org</a></p>
<h2 id="googleapis"><a href="#googleapis" class="headerlink" title="googleapis"></a>googleapis</h2><p>另外google的字体也需要国内镜像，可以考虑中科大的镜像服务<a href="fonts.lug.ustc.edu.cn">LUG</a>，在源代码内做以下替换即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ajax.googleapis.com =&gt; ajax.lug.ustc.edu.cn</div><div class="line">fonts.googleapis.com =&gt; fonts.lug.ustc.edu.cn</div><div class="line">themes.googleusercontent.com =&gt; google-themes.lug.ustc.edu.cn</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> npm </tag>
            
            <tag> googleapis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Develop-Environment]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/03/19/React-Develop-Environment/</url>
      <content type="html"><![CDATA[<h1 id="搭建React开发环境"><a href="#搭建React开发环境" class="headerlink" title="搭建React开发环境"></a>搭建React开发环境</h1><p>搭建基于React+webpack+Babel+Eslint的react开发环境</p>
<a id="more"></a>
<h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><p>利用npm下载所有所需软件包</p>
<pre><code>npm install
</code></pre><p>按照当前项目 node_modules 目录内的安装包情况生成稳定的版本号描述，参考<a href="http://tech.meituan.com/npm-shrinkwrap.html" target="_blank" rel="external">npm-shrinkwrap</a></p>
<pre><code>npm shrinkwrap
</code></pre><p>安装的软件包列表，<code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"Test"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span>,</div><div class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --hot"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.23.1"</span>,</div><div class="line">    <span class="attr">"babel-eslint"</span>: <span class="string">"^7.1.1"</span>,</div><div class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^6.4.0"</span>,</div><div class="line">    <span class="attr">"babel-plugin-transform-decorators-legacy"</span>: <span class="string">"^1.3.4"</span>,</div><div class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">    <span class="attr">"babel-preset-react"</span>: <span class="string">"^6.23.0"</span>,</div><div class="line">    <span class="attr">"babel-preset-react-hmre"</span>: <span class="string">"^1.1.1"</span>,</div><div class="line">    <span class="attr">"babel-preset-stage-2"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^0.27.3"</span>,</div><div class="line">    <span class="attr">"debug"</span>: <span class="string">"^2.6.3"</span>,</div><div class="line">    <span class="attr">"eslint"</span>: <span class="string">"^3.17.1"</span>,</div><div class="line">    <span class="attr">"eslint-config-airbnb"</span>: <span class="string">"^14.1.0"</span>,</div><div class="line">    <span class="attr">"eslint-loader"</span>: <span class="string">"^1.6.3"</span>,</div><div class="line">    <span class="attr">"eslint-plugin-import"</span>: <span class="string">"^2.2.0"</span>,</div><div class="line">    <span class="attr">"eslint-plugin-jsx-a11y"</span>: <span class="string">"^4.0.0"</span>,</div><div class="line">    <span class="attr">"eslint-plugin-react"</span>: <span class="string">"^6.10.0"</span>,</div><div class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^2.28.0"</span>,</div><div class="line">    <span class="attr">"node-sass"</span>: <span class="string">"^4.5.0"</span>,</div><div class="line">    <span class="attr">"react-tap-event-plugin"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">    <span class="attr">"sass-loader"</span>: <span class="string">"^6.0.3"</span>,</div><div class="line">    <span class="attr">"style-loader"</span>: <span class="string">"^0.13.2"</span>,</div><div class="line">    <span class="attr">"webpack"</span>: <span class="string">"^2.2.1"</span>,</div><div class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.4.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"marked"</span>: <span class="string">"^0.3.6"</span>,</div><div class="line">    <span class="attr">"material-ui"</span>: <span class="string">"^0.17.0"</span>,</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^15.4.2"</span>,</div><div class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^15.4.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>Babel 是一个 JavaScript 转换器，它将 JavaScript 变成 JavaScript（现在是将高版本的 ES6/ES7 转换为 ES5）。</p>
<p>Babel的配置文件，<code>.babelrc</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"development"</span>: &#123;</div><div class="line">      <span class="attr">"presets"</span>: [<span class="string">"react-hmre"</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-decorators-legacy"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>webpack是一个模块打包器，能够把 React 库、JSX 文件和任何其它 JavaScript 的相关部分打包为一个文件。它还能扩展到 CSS（LESS/SASS）文件和应用程序所用的其它类型的素材。其中webpack-dev提供能够热替换的调试工具</p>
<p>Webpack的配置文件,<code>webpack.config.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">const</span> HtmlwebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> ROOT_PATH = path.resolve(__dirname)</div><div class="line"><span class="keyword">const</span> BUILD_PATH = path.resolve(ROOT_PATH, <span class="string">'public'</span>)</div><div class="line"><span class="keyword">const</span> APP_PATH = path.resolve(ROOT_PATH, <span class="string">'src'</span>)</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: path.resolve(APP_PATH, <span class="string">'app.jsx'</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(ROOT_PATH, BUILD_PATH),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">        <span class="attr">include</span>: [</div><div class="line">          path.resolve(ROOT_PATH, <span class="string">'src'</span>)</div><div class="line">        ],</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel-loader'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">        <span class="attr">include</span>: [</div><div class="line">          path.resolve(ROOT_PATH, <span class="string">'src'</span>)</div><div class="line">        ],</div><div class="line">        <span class="attr">loaders</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>]</div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">resolve</span>: &#123;</div><div class="line">    <span class="attr">modules</span>: [<span class="string">'node_modules'</span>, path.join(ROOT_PATH, <span class="string">'src'</span>)],</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,</div><div class="line">  <span class="attr">devServer</span>: &#123;</div><div class="line">    <span class="attr">contentBase</span>: path.join(ROOT_PATH, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</div><div class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">inline</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line"></div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> HtmlwebpackPlugin(&#123;</div><div class="line">      <span class="attr">title</span>: <span class="string">'React Test App'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><p>ESLint 是一个插件化的javascript 代码检测工具，它可以用于检查常见的JavaScript 代码错误，也可以进行代码风格检查。这里主要以<a href="https://github.com/airbnb/javascript" target="_blank" rel="external">airbnb</a>的指南为准，基本规则见<a href="http://eslint.cn/docs/rules/" target="_blank" rel="external">Eslint Rules</a>，React相关规则见<a href="https://github.com/JasonBoy/javascript/tree/master/react" target="_blank" rel="external">React Rules</a></p>
<p>检查file.jsx的代码格式</p>
<pre><code>eslint file.jsx
</code></pre><p>检查并修改可自动修正的部分（主要是空格与换行等空白的修复）</p>
<pre><code>eslint --fix file.jsx
</code></pre><p>Eslint的配置文件，<code>.eslintrc</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"extends"</span>: <span class="string">"airbnb"</span>,</div><div class="line">  <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"browser"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"node"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"settings"</span>: &#123;</div><div class="line">    <span class="attr">"ecmascript"</span>: <span class="number">6</span>,</div><div class="line">    <span class="attr">"jsx"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"plugins"</span>: [</div><div class="line">    <span class="string">"react"</span>,</div><div class="line">    <span class="string">"jsx-a11y"</span>,</div><div class="line">    <span class="string">"import"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"rules"</span>: &#123;</div><div class="line">    <span class="attr">"strict"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"quotes"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"camelcase"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-underscore-dangle"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-undef"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"max-len"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-unused-vars"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-unused-expressions"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-shadow"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"default-case"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-confusing-arrow"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-useless-constructor"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"no-nested-ternary"</span>: <span class="string">"off"</span>,</div><div class="line">    <span class="attr">"no-mixed-operators"</span>: <span class="string">"off"</span>,</div><div class="line">    <span class="attr">"semi"</span>: [<span class="string">"warn"</span>, <span class="string">"never"</span>],</div><div class="line">    <span class="attr">"comma-dangle"</span>: [<span class="string">"warn"</span>, <span class="string">"never"</span>],</div><div class="line">    <span class="attr">"no-plusplus"</span>: [<span class="string">"warn"</span>, &#123; <span class="attr">"allowForLoopAfterthoughts"</span>: <span class="literal">true</span> &#125;],</div><div class="line">    <span class="attr">"import/no-extraneous-dependencies"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"import/extensions"</span>: [<span class="string">"warn"</span>, <span class="string">"never"</span>],</div><div class="line">    <span class="attr">"react/no-multi-comp"</span>: <span class="string">"warn"</span>,</div><div class="line">    <span class="attr">"react/prop-types"</span>: <span class="string">"off"</span>,</div><div class="line">    <span class="attr">"react/prefer-stateless-function"</span>: [<span class="string">"warn"</span>, &#123; <span class="attr">"ignorePureComponents"</span>: <span class="literal">true</span> &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Github项目链接：<a href="https://github.com/juncaixinchi/React-DE" target="_blank" rel="external">React-DE</a></p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim-Setting]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/03/18/Vim-Setting/</url>
      <content type="html"><![CDATA[<p>Vim 是高效的文本编辑器，以下是我整理的日常中经常用到的命令与插件</p>
<a id="more"></a>
<h2 id="基本编辑命令"><a href="#基本编辑命令" class="headerlink" title="基本编辑命令"></a>基本编辑命令</h2><p>打开文件file</p>
<pre><code>vi file
</code></pre><p>进入编辑模式</p>
<pre><code>i
</code></pre><p>退出编辑模式，进入命令模式</p>
<pre><code>&lt;Esc&gt;
</code></pre><p>保存并退出</p>
<pre><code>:wp
</code></pre><p>强制（不保存）退去</p>
<pre><code>:q!
</code></pre><h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><p>将vim窗口分成双栏并打开新文件</p>
<pre><code>:vs newfile
</code></pre><p>在多栏窗口中切换</p>
<pre><code>ctrl + w + w
</code></pre><h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h3><p>移动到第一行</p>
<pre><code>gg
</code></pre><p>移动到最后一行</p>
<pre><code>G
</code></pre><p>移动到第7行</p>
<pre><code>7gg
</code></pre><h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><p>在当前位置生前插入</p>
<pre><code>i
</code></pre><p>在当前行首插入</p>
<pre><code>I
</code></pre><p>在当前行尾插入</p>
<pre><code>A
</code></pre><p>在当前行之后插入一行</p>
<pre><code>o
</code></pre><h3 id="复制、粘贴、删除"><a href="#复制、粘贴、删除" class="headerlink" title="复制、粘贴、删除"></a>复制、粘贴、删除</h3><p>拷贝当前行或者之后的7行</p>
<pre><code>yy
y7y
</code></pre><p>粘贴</p>
<pre><code>p
</code></pre><p>删除当前行或者之后的7行</p>
<pre><code>dd
d7d
</code></pre><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><p>查找text，按n健查找下一个，按N健查找前一个</p>
<pre><code>/text
</code></pre><p>查找光标处的单词</p>
<pre><code>*
</code></pre><p>设置高亮查找到的内容</p>
<pre><code>:set hlsearch
</code></pre><p>全局替换aaa为bbb</p>
<pre><code>:%s/aaa/bbb/g
</code></pre><p>用//注释第3-5行</p>
<pre><code>:3,5 s/^/\/\/ /g
</code></pre><h3 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h3><p>撤销（Undo）</p>
<pre><code>u
</code></pre><p>重做（Redo），即撤销的撤销</p>
<pre><code>Ctrl + r
</code></pre><h3 id="VIM-代码折叠"><a href="#VIM-代码折叠" class="headerlink" title="VIM 代码折叠"></a>VIM 代码折叠</h3><p>用缩进表示折叠</p>
<pre><code>set foldmethod=indent
</code></pre><p>全部折叠</p>
<pre><code>:set foldlevelstart=0
</code></pre><p>取消折叠</p>
<pre><code>:set foldlevelstart=99
</code></pre><p>使用空格作为折叠快捷键</p>
<pre><code>nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;
</code></pre><p>自动加载view，使得上一次折叠的内容可以保存</p>
<pre><code>au BufWinLeave * silent mkview
au BufWinEnter * silent loadview
</code></pre><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul>
<li>首先要安装Vundle</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.vim/bundle</div><div class="line"></div><div class="line">mkdir ~/.vim/bundle/Vundle.vim</div><div class="line"></div><div class="line"><span class="built_in">cd</span> ~/.vim/bundle/Vundle.vim</div><div class="line"></div><div class="line">git <span class="built_in">clone</span> https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>
<ul>
<li>在.vimrc中配置Vundle，加入以下内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">set nocompatible              &quot; be iMproved, required</div><div class="line">filetype off                  &quot; required</div><div class="line"></div><div class="line">&quot; set the runtime path to include Vundle and initialize</div><div class="line">set rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle#begin()</div><div class="line"></div><div class="line">&quot; let Vundle manage Vundle, required</div><div class="line">&quot; use the command below to install the plugins from the command line</div><div class="line">&quot; vim +PluginInstall +qall</div><div class="line"></div><div class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class="line">Plugin &apos;vim-syntastic/syntastic&apos;</div><div class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class="line">Plugin &apos;pangloss/vim-javascript&apos;</div><div class="line">Plugin &apos;mxw/vim-jsx&apos;</div><div class="line"></div><div class="line">&quot; All of your Plugins must be added before the following line</div><div class="line">call vundle#end()            &quot; required</div><div class="line">filetype plugin indent on    &quot; required</div><div class="line"></div><div class="line">syntax on</div></pre></td></tr></table></figure>
<ul>
<li>在配置文件的Plugin部分添加插件，如插件<code>vim-jsx</code>的github链接为 <a href="https://github.com/mxw/vim-jsx，于是可以写作" target="_blank" rel="external">https://github.com/mxw/vim-jsx，于是可以写作</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin &apos;mxw/vim-jsx&apos;</div></pre></td></tr></table></figure>
<p>然后运行以下代码安装插件</p>
<pre><code>vim +PluginInstall +qall
</code></pre><h2 id="配置文件-vimrc"><a href="#配置文件-vimrc" class="headerlink" title="配置文件.vimrc"></a>配置文件<code>.vimrc</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">set nocompatible              &quot; be iMproved, required</div><div class="line">filetype off                  &quot; required</div><div class="line"></div><div class="line">&quot; set the runtime path to include Vundle and initialize</div><div class="line">set rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle#begin()</div><div class="line"></div><div class="line">&quot; let Vundle manage Vundle, required</div><div class="line">&quot; use the command below to install the plugins from the command line</div><div class="line">&quot; vim +PluginInstall +qall</div><div class="line"></div><div class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class="line">Plugin &apos;vim-syntastic/syntastic&apos;</div><div class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class="line">Plugin &apos;pangloss/vim-javascript&apos;</div><div class="line">Plugin &apos;mxw/vim-jsx&apos;</div><div class="line"></div><div class="line">&quot; All of your Plugins must be added before the following line</div><div class="line">call vundle#end()            &quot; required</div><div class="line">filetype plugin indent on    &quot; required</div><div class="line"></div><div class="line">syntax on</div><div class="line"></div><div class="line">&quot; vim-jsx</div><div class="line">let g:jsx_ext_required = 0</div><div class="line"></div><div class="line">&quot; syntastic</div><div class="line">&quot; see more by &apos;:help syntastic&apos;</div><div class="line">let g:syntastic_javascript_checkers = [&apos;eslint&apos;]</div><div class="line">let g:syntastic_check_on_w = 0</div><div class="line"></div><div class="line"></div><div class="line">&quot; fold</div><div class="line">set foldmethod=indent</div><div class="line">set foldlevelstart=99</div><div class="line">nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;</div><div class="line"></div><div class="line"></div><div class="line">&quot; auto mkview &amp; loadview</div><div class="line">au BufWinLeave * silent mkview</div><div class="line">au BufWinEnter * silent loadview</div><div class="line"></div><div class="line">&quot; indent set tab = 2 blank space</div><div class="line">set ts=2</div><div class="line">set sw=2</div><div class="line">set expandtab</div><div class="line">set smartindent</div><div class="line">set number</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lifting-State-Up]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/03/10/Lifting-State-Up/</url>
      <content type="html"><![CDATA[<p>很多情况下，几个组件之间需要共享state。此时就可以利用提升共同state至附组件的方法来处理，参见：<a href="https://facebook.github.io/react/docs/lifting-state-up.html" target="_blank" rel="external">Lifting State Up</a></p>
<a id="more"></a>
<p>简单而言就是通过在子组件中使用this.props.state代替this.state，将state托管至父组件，进而共享state。其中原来子组件的this.setState要用this.props.setState或者间接的function代替（如下例子中的handleChange），不过其中要注意使用bind(this)方法。</p>
<p>以下是一个具体的例子：</p>
<p>父组件Calculator.jsx</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> TemperatureInput <span class="keyword">from</span> <span class="string">'./TemperatureInput'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> BoilingVerdict = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (props.celsius &gt;= <span class="number">100</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The water would boil.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The water would not boil.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> toCelsius = <span class="function"><span class="params">fahrenheit</span> =&gt;</span> (fahrenheit - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> toFahrenheit = <span class="function"><span class="params">celsius</span> =&gt;</span> (celsius * <span class="number">9</span> / <span class="number">5</span>) + <span class="number">32</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> tryConvert = <span class="function">(<span class="params">value, convert</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> input = <span class="built_in">parseFloat</span>(value)</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(input)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> output = convert(input)</div><div class="line">  <span class="keyword">const</span> rounded = <span class="built_in">Math</span>.round(output * <span class="number">1000</span>) / <span class="number">1000</span></div><div class="line">  <span class="keyword">return</span> rounded.toString()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">    <span class="keyword">this</span>.handleCelsiusChange = <span class="keyword">this</span>.handleCelsiusChange.bind(<span class="keyword">this</span>)</div><div class="line">    <span class="keyword">this</span>.handleFahrenheitChange = <span class="keyword">this</span>.handleFahrenheitChange.bind(<span class="keyword">this</span>)</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">value</span>: <span class="string">''</span>, <span class="attr">scale</span>: <span class="string">'c'</span> &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleCelsiusChange(value) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">scale</span>: <span class="string">'c'</span>, value &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleFahrenheitChange(value) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">scale</span>: <span class="string">'f'</span>, value &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.state.scale</div><div class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.state.value</div><div class="line">    <span class="keyword">const</span> celsius = scale === <span class="string">'f'</span> ? tryConvert(value, toCelsius) : value</div><div class="line">    <span class="keyword">const</span> fahrenheit = scale === <span class="string">'c'</span> ? tryConvert(value, toFahrenheit) : value</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;TemperatureInput</div><div class="line">          scale="c"</div><div class="line">          value=&#123;celsius&#125;</div><div class="line">          onChange=&#123;this.handleCelsiusChange&#125;</div><div class="line">        /&gt;</div><div class="line">        &lt;TemperatureInput</div><div class="line">          scale="f"</div><div class="line">          value=&#123;fahrenheit&#125;</div><div class="line">          onChange=&#123;this.handleFahrenheitChange&#125;</div><div class="line">        /&gt;</div><div class="line">        &lt;BoilingVerdict</div><div class="line">          celsius=&#123;parseFloat(celsius)&#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>子组件TemperatureInput.jsx</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> scaleNames = &#123;</div><div class="line">  <span class="attr">c</span>: <span class="string">'Celsius'</span>,</div><div class="line">  <span class="attr">f</span>: <span class="string">'Fahrenheit'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TemperatureInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleChange(e) &#123;</div><div class="line">    <span class="keyword">this</span>.props.onChange(e.target.value)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.props.value</div><div class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.props.scale</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Enter value in &#123;scaleNames[scale]&#125;:<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span></span></div><div class="line">          <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></div><div class="line">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></div><div class="line">        /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码可见<a href="https://github.com/juncaixinchi/React-DE/tree/master/src/calculator" target="_blank" rel="external">Github</a></p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> state </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSX-Syntax]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/03/04/JSX-Syntax/</url>
      <content type="html"><![CDATA[<h1 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h1><p>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。</p>
<a id="more"></a>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>首先是官网的例子helloworld，其中<code>&lt;h1&gt;Hello, world!&lt;/h1&gt;</code>就是使用到了JSX语法。HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendor-js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendor-js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendor-js/babel-core/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    ReactDOM.render(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">    );</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上述JSX语法中要注意的地方：</p>
<ul>
<li><code>&lt;script&gt;</code> 标签的 type 属性为 <code>text/babel</code>，这是React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是在页面中直接使用 JSX 的地方，都要加上 <code>type=&quot;text/babel&quot;</code>。</li>
<li>一共用了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能， browser.min.js的作用是将 JSX 语法转为 JavaScript 语法。</li>
<li>ReactDOM.render 是 React 的最基本方法，将模板转为HTML语言，并插入指定的 DOM 节点。</li>
<li>将 JSX 语法转为 JavaScript 语法，这一步很消耗时间。现在前端项目，都会使用前端工程化，不会直接在html页面中直接写js代码，写好的js代码都会使用工具进行编译压缩等。这样的话，JSX也会通过编译直接转化成js语法，让浏览器直接使用。</li>
</ul>
<h2 id="JSX的特点"><a href="#JSX的特点" class="headerlink" title="JSX的特点"></a>JSX的特点</h2><ul>
<li>类XML语法容易接受，结构清晰</li>
<li>增强JS语义</li>
<li>抽象程度高，屏蔽DOM操作，跨平台</li>
<li>代码模块化</li>
</ul>
<h2 id="JSX基本语法规则"><a href="#JSX基本语法规则" class="headerlink" title="JSX基本语法规则"></a>JSX基本语法规则</h2><p>JSX本身就和XML语法类似，可以定义属性以及子元素。唯一特殊的是可以用大括号来加入JavaScript表达式，即：</p>
<p><strong>遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var arr = [</div><div class="line"> &lt;h1&gt;Hello world!&lt;/h1&gt;,</div><div class="line"> &lt;h2&gt;React is awesome&lt;/h2&gt;,</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line"> &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</div><div class="line"> document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="JavaScript表达式"><a href="#JavaScript表达式" class="headerlink" title="JavaScript表达式"></a>JavaScript表达式</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>用一对大括号 { } 包起来的JavaScript表达式可以作为标签的子结点（children），也可以是属性值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 以下语句等价</div><div class="line">&lt;MyComponent&gt;foo&lt;/MyComponent&gt;</div><div class="line">&lt;MyComponent&gt;&#123;'foo'&#125;&lt;/MyComponent&gt;</div><div class="line"></div><div class="line">// JavaScript 表达式作为属性值</div><div class="line">React.render(</div><div class="line">    &lt;div className=&#123;2 &gt; 1 ? 'class-a' : 'class-b'&#125;&gt;content&lt;/div&gt;,</div><div class="line">    document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="条件判断的写法"><a href="#条件判断的写法" class="headerlink" title="条件判断的写法"></a>条件判断的写法</h3><p>因为 JSX 只是函数调用和对象创建的语法糖，在 { } 中不能 if-else 语句，不过可以采用三元操作表达式</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123; </div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name ？ this.props.name : "World"&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>; </div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"xiaowang"</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure>
<p>可以使用比较运算符“ &amp;&amp; ” 和 “ || ”来替代“ if ”</p>
<ul>
<li><p>“&amp;&amp;” ：如果左边的值为真，才返回右边的表达式，不过要注意&amp;&amp;之前的需要是一个boolean值</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &#123;showHeader &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span>&#125;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Content</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>“||” ：如果左边的值为真，则直接返回左边的值，否则返回右边的值</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123; </div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name || "World"&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>; </div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Children-in-JSX"><a href="#Children-in-JSX" class="headerlink" title="Children in JSX"></a>Children in JSX</h2><p>在JSX表达式中包括开标签和闭标签，这俩个标签之间的内容被定义为一个特殊的prop，即props.children</p>
<h3 id="String-Literals-as-Children"><a href="#String-Literals-as-Children" class="headerlink" title="String Literals as Children"></a>String Literals as Children</h3><p>开标签和闭标签的内容或者props.children的值可以是一个string，这与HTML的语法相同</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;MyComponent&gt;Hello world!<span class="xml"><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span></div><div class="line">&lt;div&gt;This is valid HTML &amp;amp; JSX at the same time.&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<h3 id="JSX-elements-as-the-Children"><a href="#JSX-elements-as-the-Children" class="headerlink" title="JSX elements as the Children"></a>JSX elements as the Children</h3><p>Children也可以是一个JSX element，以下是一个“纯组件”的例子</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;MyContainer&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">MyFirstComponent</span> /&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">MySecondComponent</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">MyContainer</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="JavaScript-Expressions-as-Children"><a href="#JavaScript-Expressions-as-Children" class="headerlink" title="JavaScript Expressions as Children"></a>JavaScript Expressions as Children</h3><p>children也可以是JavaScript表达式，需要用{}包起来，以下是渲染一个任意行数的HTML list的例子</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Item</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> todos = [<span class="string">'finish doc'</span>, <span class="string">'submit pr'</span>, <span class="string">'nag dan to review'</span>];</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">      &#123;todos.map((message) =&gt; <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;message&#125;</span> <span class="attr">message</span>=<span class="string">&#123;message&#125;</span> /&gt;</span>)&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Functions-as-Children"><a href="#Functions-as-Children" class="headerlink" title="Functions as Children"></a>Functions as Children</h3><p>一般情况下，在JSX中的插入的JavaScript表达式会最终表现为string、React element或者这些内容形成的list。但是props.children实际上可以传递任何数据，不需要一定是React可以render的内容。例如，可以自定义一个组件，其children是一个函数，最终函数的callback作为props.children</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Calls the children callback numTimes to produce a repeated component</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Repeat</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> items = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.numTimes; i++) &#123;</div><div class="line">    items.push(props.children(i));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;items&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListOfTenThings</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Repeat</span> <span class="attr">numTimes</span>=<span class="string">&#123;10&#125;</span>&gt;</span></span></div><div class="line">      &#123;(index) =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>This is item &#123;index&#125; in the list<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">Repeat</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以说Children传给组件的可以是任意内容，只要组件能够在render前，将children转化为React能够理解的内容即可。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>render函数内的注释需要写在花括号中，实例如下：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    &#123;/*注释...*/&#125;</div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="JSX-陷阱"><a href="#JSX-陷阱" class="headerlink" title="JSX 陷阱"></a>JSX 陷阱</h2><ul>
<li><p>style属性</p>

  在React中写行内样式时，要使用`style={{}}`的方式，属性值不能是字符串而必须为对象，需要注意的是属性名同样需要驼峰命名法。即`margin-top`要写成`marginTop`。

<blockquote>
<p>骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName 等，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">React.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>'<span class="attr">red</span>'&#125;&#125;&gt;</span></span></div><div class="line">        xxxxx</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    <span class="built_in">document</span>.body</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>HTML转义</p>
<p>React默认会进行HTML的转义，避免XSS攻击</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> content=<span class="string">'&lt;strong&gt;content&lt;/strong&gt;'</span>;</div><div class="line">React.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</div><div class="line">    <span class="built_in">document</span>.body</div><div class="line">);</div><div class="line"><span class="comment">//结果页面直接输出内容了"&lt;strong&gt;content&lt;/strong&gt;"</span></div></pre></td></tr></table></figure>
</li>
<li><p>自定义HTML属性</p>
<p>如果往原生 HTML 元素里传入 HTML 规范里不存在的属性，React 不会显示它们。如果需要使用自定义属性，要加 <code>data-</code> 前缀。 </p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div data-custom-attribute=<span class="string">"foo"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>组件类只能包含一个顶层标签</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//var myDivElement =&lt;h1&gt;你好&lt;/h1&gt;&lt;h1&gt;hello&lt;/h1&gt;;</span></div><div class="line"><span class="comment">//上述写法是会报错的，要写成只有一个顶层标签：</span></div><div class="line"><span class="keyword">var</span> myDivElement =<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div></pre></td></tr></table></figure>
</li>
<li><p>Boolean 属性</p>
<p>省略一个属性的值会导致JSX把它当做 true。要传值 false必须使用属性表达式。这常出现于使用HTML表单元素，含有属性如disabled, required, checked 和 readOnly。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在JSX中，对于禁用按钮这二者是相同的。</span></div><div class="line">&lt;input type=<span class="string">"button"</span> disabled /&gt;;</div><div class="line">&lt;input type="button" disabled=&#123;true&#125; /&gt;;</div><div class="line"></div><div class="line">// 在JSX中，对于不禁用按钮这二者是相同的。</div><div class="line">&lt;input type="button" /&gt;;</div><div class="line">&lt;input type="button" disabled=&#123;false&#125; /&gt;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>使用JSX来将代码封装成React组件，然后像插入普通 HTML 标签一样，在其他地方插入这个组件。使用React.createClass用于生成一个组件。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent=React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line"> &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>,</span></div><div class="line"> document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中，变量 MyComponent就是一个组件类。模板插入 <mycomponent> 时，会自动生成 MyComponent 的一个实例（下文的”组件”都指组件类的实例）。</mycomponent></p>
<p><strong> 所有组件类都必须有自己的 render 方法，用于输出组件。 </strong></p>
<h3 id="HTML-标签-vs-React-组件"><a href="#HTML-标签-vs-React-组件" class="headerlink" title="HTML 标签 vs. React 组件"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。</p>
<ul>
<li><p>渲染HTML标签，声明变量采用首字母小写</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。</span></div><div class="line"><span class="keyword">var</span> myDivElement = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"foo"</span> /&gt;</span>;</span></div><div class="line">React.render(myDivElement, document.getElementById('example'));</div></pre></td></tr></table></figure>
</li>
<li><p>渲染React组件，声明变量采用首字母大写</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要渲染 React 组件，只需创建一个大写字母开头的本地变量。</span></div><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line"><span class="keyword">var</span> myElement = <span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>  /&gt;</span>;</span></div><div class="line">React.render(myElement, document.getElementById('example'));</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent=React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> &#123;<span class="attr">clickNum</span>: <span class="number">0</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num=<span class="keyword">this</span>.state.clickNum;</div><div class="line">    num++;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">clickNum</span>:num&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Hello &#123;this.props.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>'<span class="attr">red</span>'&#125;&#125;&gt;</span>点击&#123;this.props.name&#125;次数：&#123;this.state.clickNum&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line"> &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;div&gt;</div><div class="line">     &lt;MyComponent name="张三" /&gt;</div><div class="line">     &lt;hr/&gt;</div><div class="line">     &lt;MyComponent name="李四" /&gt;</div><div class="line">  &lt;/div&gt;,</div><div class="line"> document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中定义的MyComponent组件包含属性，状态和事件，是一个简单的比较完整的组件。</p>
<ul>
<li>使用props通过父组件进行传递值</li>
<li>使用state定义组件自己的状态</li>
<li>组件支持的大部分的DOM操作事件</li>
</ul>
<h3 id="属性props的注意要点"><a href="#属性props的注意要点" class="headerlink" title="属性props的注意要点"></a>属性props的注意要点</h3><ul>
<li>class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。<br>+this.props.children 不要children作为把对象的属性名。因为this.props.children获取的该标签下的所有子标签。this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 this.props.children 的时候要小心。官方建议使用React.Children.map来遍历子节点，而不用担心数据类型。</li>
</ul>
<h3 id="状态state的注意要点"><a href="#状态state的注意要点" class="headerlink" title="状态state的注意要点"></a>状态state的注意要点</h3><ul>
<li>组件免不了要与用户互动，React 将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。</li>
<li>getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。</li>
</ul>
<p>由于 this.props 和 this.state 的简单的区分方法：</p>
<p><strong>this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> JSX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ECMAScript-6-note]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/03/02/ECMAScript-6-note/</url>
      <content type="html"><![CDATA[<h1 id="学习ES6的笔记"><a href="#学习ES6的笔记" class="headerlink" title="学习ES6的笔记"></a>学习ES6的笔记</h1><p>ECMAScript 6.0 是JavaScript语言的下一代标准，已经在2015年6月正式发布</p>
<p>主要学习了阮一峰老师的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></p>
<a id="more"></a>
<h2 id="ES6转码器"><a href="#ES6转码器" class="headerlink" title="ES6转码器"></a>ES6转码器</h2><ul>
<li><p>Babel转码器</p>
<p>  <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，可通过npm安装。同时Babel提供一个<a href="https://babeljs.io/repl/" target="_blank" rel="external">REPL在线编译器</a>，可以在线将ES6代码转为ES5代码</p>
</li>
<li><p>Traceur转码器</p>
<p>  <a href="https://github.com/google/traceur-compiler" target="_blank" rel="external">Traceur转码器</a>由Google公司开发，也可以将ES6代码转为ES5代码，也可通过<a href="http://google.github.io/traceur-compiler/demo/repl.html" target="_blank" rel="external">在线编译器</a>转换代码</p>
</li>
</ul>
<h2 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h2><h3 id="1-let命令"><a href="#1-let命令" class="headerlink" title="1. let命令"></a>1. let命令</h3><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效</p>
<p>for循环的计数器，就很合适使用let命令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(i);</div></pre></td></tr></table></figure>
<p>let不存在变量提升，变量应该在声明语句之后才可以使用，且不允许在相同作用域内，重复声明同一个变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var 的情况</span></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// let 的情况</span></div><div class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></div><div class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> x; <span class="comment">// ReferenceError</span></div><div class="line"><span class="keyword">let</span> x;</div></pre></td></tr></table></figure>
<h3 id="2-块级作用域"><a href="#2-块级作用域" class="headerlink" title="2.块级作用域"></a>2.块级作用域</h3><p>let实际上为JavaScript新增了块级作用域，{}内部即为一个块级作用域</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IIFE 写法</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// 块级作用域写法</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>浏览器环境并一定完全兼容，故在块级作用域内声明函数时，建议用函数表达式，而不是函数声明语句</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数表达式</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="string">'secret'</span>;</div><div class="line">  <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-const命令"><a href="#3-const命令" class="headerlink" title="3.const命令"></a>3.const命令</h3><p>const声明一个只读的常量。一旦声明变量，就必须立即初始化，只在声明所在的块级作用域内有效</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</div><div class="line">PI <span class="comment">// 3.1415</span></div><div class="line"></div><div class="line">PI = <span class="number">3</span>;</div><div class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure>
<p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = &#123;&#125;;</div><div class="line">foo.prop = <span class="number">123</span>;</div><div class="line"></div><div class="line">foo.prop</div><div class="line"><span class="comment">// 123</span></div><div class="line"></div><div class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></div></pre></td></tr></table></figure>
<p>如果真的想将对象冻结，应该使用Object.freeze方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">Object</span>.freeze(obj);</div><div class="line">  <span class="built_in">Object</span>.keys(obj).forEach( <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ) &#123;</div><div class="line">      constantize( obj[key] );</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="4-顶层对象的属性"><a href="#4-顶层对象的属性" class="headerlink" title="4.顶层对象的属性"></a>4.顶层对象的属性</h3><ul>
<li>var命令和function命令声明的全局变量，依旧是顶层对象的属性</li>
<li>let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="comment">// 如果在Node的REPL环境，可以写成global.a</span></div><div class="line"><span class="comment">// 或者采用通用方法，写成this.a</span></div><div class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line"><span class="built_in">window</span>.b <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h3 id="5-global-对象"><a href="#5-global-对象" class="headerlink" title="5.global 对象"></a>5.global 对象</h3><p>ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。</p>
<ul>
<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>
<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是Node没有self。</li>
<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>
</ul>
<p>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。</p>
<ul>
<li>全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。</li>
<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。</li>
<li>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。</li>
</ul>
<p>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法一</span></div><div class="line">(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span></div><div class="line">   ? <span class="built_in">window</span></div><div class="line">   : (<span class="keyword">typeof</span> process === <span class="string">'object'</span> &amp;&amp;</div><div class="line">      <span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">'function'</span> &amp;&amp;</div><div class="line">      <span class="keyword">typeof</span> global === <span class="string">'object'</span>)</div><div class="line">     ? global</div><div class="line">     : <span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">// 方法二</span></div><div class="line"><span class="keyword">var</span> getGlobal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> self; &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> <span class="built_in">window</span>; &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> global !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> global; &#125;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unable to locate global object'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2>]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript-note]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/22/Javascript-note/</url>
      <content type="html"><![CDATA[<h1 id="学习javascript的笔记"><a href="#学习javascript的笔记" class="headerlink" title="学习javascript的笔记"></a>学习javascript的笔记</h1><p>主要学习了</p>
<p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">JavaScript教程</a></p>
<a id="more"></a>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>多行字符串</p>
<p><code>这是一个
多行
字符串</code>;</p>
<p><code>toUpperCase()</code>,<code>toLowerCase()</code> 把一个字符串全部变为大写或小写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span>;</div><div class="line">s.toUpperCase(); <span class="comment">// 返回'HELLO'</span></div><div class="line">s.toLowerCase(); <span class="comment">// 返回'hello'</span></div></pre></td></tr></table></figure>
<p><code>indexOf()</code>搜索指定字符串出现的位置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'hello, world'</span>;</div><div class="line">s.indexOf(<span class="string">'world'</span>); <span class="comment">// 返回7</span></div><div class="line">s.indexOf(<span class="string">'World'</span>); <span class="comment">// 没有找到指定的子串，返回-1</span></div></pre></td></tr></table></figure>
<p><code>substring()</code>返回指定索引区间的子串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'hello, world'</span></div><div class="line">s.substring(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 从索引0开始到5（不包括5），返回'hello'</span></div><div class="line">s.substring(<span class="number">7</span>); <span class="comment">// 从索引7开始到结束，返回'world'</span></div></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>通过<code>Array.length</code>获取数组长度，给length赋一个新的值或索引赋值时索引超过了范围，会导致Array大小的变化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>];</div><div class="line">arr.length; <span class="comment">// 3</span></div><div class="line">arr.length = <span class="number">4</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3.14, undefined]</span></div><div class="line">arr[<span class="number">5</span>] = <span class="string">'x'</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></div></pre></td></tr></table></figure>
<p>通过<code>indexOf()</code>来搜索Array中一个指定的元素的位置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="string">'30'</span>, <span class="string">'xyz'</span>];</div><div class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">// 元素10的索引为0</span></div><div class="line">arr.indexOf(<span class="number">30</span>); <span class="comment">// 元素30没有找到，返回-1</span></div></pre></td></tr></table></figure>
<p>通过<code>slice()</code>截取Array的部分元素，然后返回一个新的Array</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</div><div class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></div><div class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></div></pre></td></tr></table></figure>
<p><code>push()</code>向Array的末尾添加若干元素，<code>pop()</code>则把Array的最后一个元素删除掉,<code>unshift()</code>往Array的头部添加若干元素，<code>shift()</code>则把Array的第一个元素删掉</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line">arr.push(<span class="string">'A'</span>, <span class="string">'B'</span>); <span class="comment">// 返回Array新的长度: 4</span></div><div class="line">arr; <span class="comment">// [1, 2, 'A', 'B']</span></div><div class="line">arr.pop(); <span class="comment">// pop()返回'B'</span></div><div class="line">arr; <span class="comment">// [1, 2, 'A']</span></div><div class="line">arr.unshift(<span class="string">'A'</span>, <span class="string">'B'</span>); <span class="comment">// 返回Array新的长度: 5</span></div><div class="line">arr; <span class="comment">// ['A', 'B', 1, 2, 'A']</span></div><div class="line">arr.shift(); <span class="comment">// 'A'</span></div><div class="line">arr; <span class="comment">// ['B', 1, 2, 'A']</span></div><div class="line">arr = [];</div><div class="line">arr.pop(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></div><div class="line">arr.shift(); <span class="comment">// 空数组继续shift不会报错，而是返回undefined</span></div></pre></td></tr></table></figure>
<p><code>sort()</code>, <code>reverse()</code>可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认把所有元素先转换为String，再根据ASCII码进行排序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'b'</span>];</div><div class="line">arr.sort();</div><div class="line">arr; <span class="comment">// ['A', 'B', 'C', 'b']</span></div><div class="line">arr.reverse(); </div><div class="line">arr; <span class="comment">//['b', C', 'B', 'A']</span></div></pre></td></tr></table></figure>
<p><code>splice()</code>方法可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</div><div class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></div><div class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div><div class="line"><span class="comment">// 只删除,不添加:</span></div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// ['Google', 'Facebook']</span></div><div class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Oracle']</span></div><div class="line"><span class="comment">// 只添加,不删除:</span></div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></div><div class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div></pre></td></tr></table></figure>
<p><code>concat()</code>方法把当前的Array和另一个Array连接起来，并返回一个新的Array：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// ['A', 'B', 'C', 1, 2, 3, 4]</span></div><div class="line">arr; <span class="comment">// ['A', 'B', 'C']</span></div></pre></td></tr></table></figure>
<p><code>join()</code>方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.join(<span class="string">'-'</span>); <span class="comment">// 'A-B-C-1-2-3'</span></div><div class="line">arr.join(<span class="string">''</span>); <span class="comment">// 'ABC123'</span></div></pre></td></tr></table></figure>
<p>如果数组的某个元素又是一个Array，则可以形成多维数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], <span class="string">'-'</span>];</div><div class="line">arr[<span class="number">1</span>][<span class="number">1</span>]; <span class="comment">//500</span></div></pre></td></tr></table></figure>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">	<span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">	<span class="attr">school</span>: <span class="string">'No.1 Middle School'</span>,</div><div class="line">	<span class="attr">height</span>: <span class="number">1.70</span>,</div><div class="line">	<span class="attr">weight</span>: <span class="number">65</span>,</div><div class="line">	<span class="attr">score</span>: <span class="literal">null</span></div><div class="line">&#125;;</div><div class="line">xiaohong[<span class="string">'middle-school'</span>]; <span class="comment">// 'No.1 Middle School'</span></div><div class="line">xiaohong[<span class="string">'name'</span>]; <span class="comment">// '小红'</span></div><div class="line">xiaohong.name; <span class="comment">// '小红'</span></div><div class="line">xiaoming.age; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>要检测xiaoming是否拥有某一属性，可以用<code>in</code>操作符。因为<code>toString</code>定义在object对象中，所以xiaoming继承了<code>toString</code>属性；可以用<code>hasOwnProperty()</code>方法判断一个属性是否是xiaoming自身拥有的，而不是继承得到的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'小明'</span></div><div class="line">&#125;;</div><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></div><div class="line">xiaoming.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">xiaoming.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>使用<code>if () { ... } else { ... }</code>来进行条件判断，<code>else if</code>通常连写在一起，以增加可读性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</div><div class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'adult'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">6</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'teenager'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'kid'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>for循环最常用的地方是利用索引来遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'Apple'</span>, <span class="string">'Google'</span>, <span class="string">'Microsoft'</span>];</div><div class="line"><span class="keyword">var</span> i, x;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</div><div class="line">	x = arr[i];</div><div class="line">	<span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for循环的3个条件都是可以省略的，但必须使用<code>break</code>语句退出循环，否则就是死循环</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;;) &#123; <span class="comment">// 将无限循环下去</span></div><div class="line">	<span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</div><div class="line">        <span class="keyword">break</span>; <span class="comment">// 通过if判断来退出循环</span></div><div class="line">    &#125;</div><div class="line">    x ++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for ... in</code>循环可以把一个对象的所有属性依次循环出来</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'Jack'</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">	<span class="attr">city</span>: <span class="string">'Beijing'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;	</div><div class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// 'name', 'age', 'city'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for ... in</code>循环可以直接循环出Array的索引，但得到索引的是String而不是Number</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a) &#123;</div><div class="line">	<span class="built_in">console</span>.log(i)</div><div class="line">	<span class="built_in">console</span>.log(a[i]); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> n = <span class="number">99</span>;</div><div class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</div><div class="line">	x = x + n;</div><div class="line">	n = n - <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">x; <span class="comment">// 2500</span></div></pre></td></tr></table></figure>
<p><code>do { ... } while()</code>循环，它和while循环的唯一区别在于前者是在每次循环完成的时候判断条件，所以至少会执行一次循环</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">	n = n + <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">100</span>);</div><div class="line">n; <span class="comment">// 100</span></div></pre></td></tr></table></figure>
<h2 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h2><p><code>Map</code>是一组键值对的结构，具有极快的查找速度，<code>Map</code>具有以下方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> M = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></div><div class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></div><div class="line">m.set(<span class="string">'Bob'</span>, <span class="number">59</span>);</div><div class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">// 是否存在key 'Adam': true</span></div><div class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// 67</span></div><div class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">// 删除key 'Adam'</span></div><div class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p><code>Set</code>是一组<code>key</code>的集合，不能重复，重复元素在<code>Set</code>中自动被过滤</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">'3'</span>]);</div><div class="line">s; <span class="comment">// Set &#123;1, 2, 3, "3"&#125;</span></div><div class="line">s.add(<span class="number">4</span>); <span class="comment">// Set &#123;1, 2, 3, "3", 4&#125;</span></div><div class="line">s.delete(<span class="number">2</span>); <span class="comment">// Set &#123;1, 3, "3", 4&#125;</span></div><div class="line">s.size; <span class="comment">//4</span></div><div class="line">s.has(<span class="number">3</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h2><p><code>for ... of</code>循环来遍历<code>Array</code>、<code>Map</code>和<code>Set</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123; <span class="comment">// 遍历Array</span></div><div class="line">	<span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> s) &#123; <span class="comment">// 遍历Set</span></div><div class="line">	<span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m) &#123; <span class="comment">// 遍历Map</span></div><div class="line">	<span class="built_in">console</span>.log(x[<span class="number">0</span>] + <span class="string">'&lt;=&gt;'</span> + x[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>iterable</code>内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数，以下是Array的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">    <span class="comment">// element: 指向当前元素的值</span></div><div class="line">    <span class="comment">// index: 指向当前索引</span></div><div class="line">    <span class="comment">// array: 指向Array对象本身</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"element: "</span> + element + <span class="string">"; index: "</span> + index + <span class="string">"; array: "</span> + array);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</div><div class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"element: "</span> + element + <span class="string">"; sameElement: "</span> + sameElement + <span class="string">"; set: "</span> + set);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</div><div class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"value: "</span> + value + <span class="string">"; key: "</span> + key + <span class="string">"; map: "</span> + map);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一般定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x&gt;<span class="number">0</span> ? x : -x;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 匿名函数定义</span></div><div class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x&gt;<span class="number">0</span> ? x : -x;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>利用<code>arguments</code>获取所有传入参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">'number'</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="string">'Not a number'</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> x = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">	<span class="keyword">return</span> x &gt;= <span class="number">0</span> ? x : -x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>rest</code>来获取任意个参数，需写在最后面，前面加<code>...</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'a = '</span> + a);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</div><div class="line">	<span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div><div class="line"><span class="comment">// sum()函数，接收任意个参数并返回它们的和</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, ...rest</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> tmp = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(x) tmp += x;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> rest)&#123;</div><div class="line">		tmp += i;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##　变量作用域</p>
<p><code>var</code>定义变量，该变量的作用域为整个函数体。不在任何函数内定义的变量就具有全局作用域，被绑定到全局对象window的一个属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> course = <span class="string">'Learn JavaScript'</span>;</div><div class="line"><span class="built_in">console</span>.log(course); <span class="comment">// 'Learn JavaScript'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.course); <span class="comment">// 'Learn JavaScript'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'you foo'</span>);</div><div class="line">&#125;</div><div class="line">foo(); <span class="comment">// 直接调用foo()</span></div><div class="line"><span class="built_in">window</span>.foo(); <span class="comment">// 通过window.foo()调用</span></div></pre></td></tr></table></figure>
<p>ES6引入了新的关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明一个块级作用域(for循环等)的变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</div><div class="line">		sum += i;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES6标准引入了新的具有块级作用域的关键字<code>const</code>来定义常量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</div><div class="line">PI = <span class="number">3</span>; <span class="comment">// 某些浏览器不报错，但是无效果！</span></div><div class="line">PI; <span class="comment">// 3.14</span></div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在一个对象中绑定函数，称为这个对象的方法，在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">	<span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">	<span class="attr">age</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">		<span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">xiaoming.age(); <span class="comment">//2017年则是27</span></div></pre></td></tr></table></figure>
<p><code>apply()</code>可以指定函数的<code>this</code>的指向</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">	<span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">	<span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">	<span class="attr">age</span>: getAge</div><div class="line">&#125;;</div><div class="line">xiaoming.age(); <span class="comment">// 25</span></div><div class="line">getAge.apply(xiaoming, []); <span class="comment">// 25, this指向xiaoming, 参数为空</span></div></pre></td></tr></table></figure>
<p><code>call()</code>方法与<code>apply()</code>类似</p>
<ul>
<li><p>apply()把参数打包成Array再传入；</p>
</li>
<li><p>call()把参数按顺序传入。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]); <span class="comment">// 5</span></div><div class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>利用<code>apply()</code>动态改变函数的行为，如通过用我们自己的函数替换掉默认的parseInt()的方法统计代码一共调用了多少次parseInt()</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></div><div class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	count += <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 测试:</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'20'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</div><div class="line">	<span class="built_in">parseInt</span>(<span class="string">'30'</span>);</div><div class="line">&#125;</div><div class="line">count; <span class="comment">// 12</span></div></pre></td></tr></table></figure>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p><code>map()</code>方法将array内的每一个元素一次处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.map(pow); <span class="comment">// [1, 4, 9]</span></div><div class="line">arr.map(<span class="built_in">String</span>);<span class="comment">//["1","2","3"]</span></div></pre></td></tr></table></figure>
<p><code>reduce()</code>方法把一个函数作用在这个Array的[x1, x2, x3…]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</div><div class="line"><span class="comment">// 求和</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;); <span class="comment">// 25</span></div><div class="line"><span class="comment">//将字符串转化为Number的函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">string2int</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> s.split(<span class="string">""</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x<span class="number">-0</span>&#125;).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;<span class="keyword">return</span> x*<span class="number">10</span>+y&#125;);</div><div class="line">&#125;</div><div class="line">string2int(<span class="string">"23434"</span>);<span class="comment">//23434</span></div></pre></td></tr></table></figure>
<p><code>filter()</code>方法把传入的函数依次作用于array的每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 删掉Array中的空字符串</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">'C'</span>, <span class="string">'  '</span>];</div><div class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> s &amp;&amp; s.trim(); <span class="comment">// 注意：IE9以下的版本没有trim()方法</span></div><div class="line">&#125;);</div><div class="line">arr; <span class="comment">// ['A', 'B', 'C']</span></div><div class="line"></div><div class="line"><span class="comment">// 回调函数</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(element); <span class="comment">// 依次打印'A', 'B', 'C'</span></div><div class="line">    <span class="built_in">console</span>.log(index); <span class="comment">// 依次打印0, 1, 2</span></div><div class="line">    <span class="built_in">console</span>.log(self); <span class="comment">// self就是变量arr</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 去除array中的重复元素</span></div><div class="line"><span class="keyword">var</span></div><div class="line">r,</div><div class="line">arr = [<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'1'</span>];</div><div class="line">r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> self.indexOf(element) === index;</div><div class="line">&#125;);<span class="comment">//["1", "2", "3", "4", "5"]</span></div></pre></td></tr></table></figure>
<p><code>sort()</code>方法默认把所有元素先转换为String再以ASCII排序，直接使用对数字排序会有大Bug，可通过自定义方式解决问题。<br><code>sort()</code>方法会直接对Array进行修改，它返回的结果仍是当前Array</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 升序排列</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line">a2 = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;); <span class="comment">// [1, 2, 10, 20]</span></div><div class="line"></div><div class="line">a2 = arr; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">	nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(n);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=f1();</div><div class="line">result(); <span class="comment">// 999</span></div><div class="line">nAdd();</div><div class="line">result(); <span class="comment">// 1000</span></div><div class="line"><span class="comment">// 函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除</span></div></pre></td></tr></table></figure>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x =&gt; x * x</div><div class="line"><span class="comment">// 相当于</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> x * x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">	<span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth; <span class="comment">// this指向obj对象</span></div><div class="line">        <span class="keyword">return</span> fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.getAge(); <span class="comment">// 25</span></div></pre></td></tr></table></figure>
<h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><p>generator（生成器）是ES6标准引入的新的数据类型，使用function*定义。一个generator看上去像一个函数，但可以返回多次</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//斐波那契数列</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fib</span>(<span class="params">min,max</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span></div><div class="line">		t,</div><div class="line">		a = <span class="number">0</span>,</div><div class="line">		b = <span class="number">1</span>,</div><div class="line">		n = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (n &lt;= max) &#123;</div><div class="line">		<span class="keyword">if</span>(n &gt;= min)&#123; <span class="keyword">yield</span> a; &#125;</div><div class="line">		t = a + b;</div><div class="line">		a = b;</div><div class="line">		b = t;</div><div class="line">		n ++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> fib(<span class="number">4</span>,<span class="number">5</span>)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(x); <span class="comment">// 依次输出2, 3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h2><p>类型转换和判断需要注意的问题：</p>
<ul>
<li><p>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</p>
</li>
<li><p>用<code>String()</code>来转换任意类型到<code>string</code>，或者直接调用某个对象的<code>toString()</code>方法；</p>
</li>
<li><p>通常不必把任意类型转换为<code>boolean</code>再判断，因为可以直接写<code>if (myVar) {...}</code>；</p>
</li>
<li><p><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</p>
</li>
<li><p>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</p>
</li>
<li><p>判断<code>null</code>请使用<code>myVar === null</code>；</p>
</li>
<li><p>判断某个全局变量是否存在用<code>typeof window.myVar === &#39;undefined&#39;</code>；</p>
</li>
<li><p>函数内部判断某个变量是否存在用<code>typeof myVar === &#39;undefined&#39;</code>。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//number的toString()要特殊处理</span></div><div class="line"><span class="number">123.</span>.toString(); <span class="comment">// '123', 注意是两个点！</span></div><div class="line">(<span class="number">123</span>).toString(); <span class="comment">// '123'</span></div></pre></td></tr></table></figure>
<h2 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h2><p>在JavaScript中，Date对象用来表示日期和时间，使用<code>Date()</code>获取系统时间；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">now; <span class="comment">// Mon Feb 27 2017 22:24:10 GMT+0800 (中国标准时间)</span></div><div class="line">now.getFullYear(); <span class="comment">// 2017, 年份</span></div><div class="line">now.getMonth(); <span class="comment">// 1, 月份，注意月份范围是0~11，1表示二月</span></div><div class="line">now.getDate(); <span class="comment">// 27, 表示27号</span></div><div class="line">now.getDay(); <span class="comment">// 1, 表示星期一</span></div><div class="line">now.getHours(); <span class="comment">// 22, 24小时制</span></div><div class="line">now.getMinutes(); <span class="comment">// 24, 分钟</span></div><div class="line">now.getSeconds(); <span class="comment">// 10, 秒</span></div><div class="line">now.getMilliseconds(); <span class="comment">// 264, 毫秒数</span></div><div class="line">now.getTime(); <span class="comment">// 1488205450264, 以number形式表示的时间戳</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1970</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>);</div><div class="line">d; <span class="comment">// Thu Jan 01 1970 07:59:59 GMT+0800 (中国标准时间)</span></div><div class="line">d.getTime(); <span class="number">-1</span>;</div></pre></td></tr></table></figure>
<h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配正常Email地址的表达式</span></div><div class="line"><span class="keyword">var</span> MailCheck = <span class="regexp">/^[0-9a-zA-Z\_\.]+@[0-9a-zA-Z\_]+\.[0-9a-zA-Z\_]+/</span>;</div><div class="line">MailCheck.exec(<span class="string">'juncaixinchi111#gmail.com'</span>); <span class="comment">// null</span></div><div class="line">MailCheck.exec(<span class="string">'juncaixinchi111@gmail.com'</span>); <span class="comment">// ['juncaixinchi111@gmail.com']</span></div></pre></td></tr></table></figure>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON是JavaScript Object Notation的缩写，它是一种数据交换格式</p>
<p>使用<code>JSON.stringify()</code>把对象序列化成JSON格式的字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">14</span>,</div><div class="line">    <span class="attr">gender</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">1.65</span>,</div><div class="line">    <span class="attr">grade</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">'middle-school'</span>: <span class="string">'\"W3C\" Middle School'</span>,</div><div class="line">    <span class="attr">skills</span>: [<span class="string">'JavaScript'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Lisp'</span>]</div><div class="line">&#125;;</div><div class="line"><span class="built_in">JSON</span>.stringify(xiaoming); <span class="comment">// '&#123;"name":"小明","age":14,"gender":true,"height":1.65,"grade":null,"middle-school":"\"W3C\" Middle School","skills":["JavaScript","Java","Python","Lisp"]&#125;'</span></div></pre></td></tr></table></figure>
<p>按缩进输出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">JSON</span>.stringify(xiaoming, <span class="literal">null</span>, <span class="string">'  '</span>);</div><div class="line"><span class="comment">// 结果</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"小明"</span>,</div><div class="line">  <span class="string">"age"</span>: <span class="number">14</span>,</div><div class="line">  <span class="string">"gender"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"height"</span>: <span class="number">1.65</span>,</div><div class="line">  <span class="string">"grade"</span>: <span class="literal">null</span>,</div><div class="line">  <span class="string">"middle-school"</span>: <span class="string">"\"W3C\" Middle School"</span>,</div><div class="line">  <span class="string">"skills"</span>: [</div><div class="line">    <span class="string">"JavaScript"</span>,</div><div class="line">    <span class="string">"Java"</span>,</div><div class="line">    <span class="string">"Python"</span>,</div><div class="line">    <span class="string">"Lisp"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给对象定义一个<code>toJSON()</code>的方法，直接返回JSON应该序列化的数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">14</span>,</div><div class="line">    <span class="attr">gender</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">1.65</span>,</div><div class="line">    <span class="attr">grade</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">'middle-school'</span>: <span class="string">'\"W3C\" Middle School'</span>,</div><div class="line">    <span class="attr">skills</span>: [<span class="string">'JavaScript'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Lisp'</span>],</div><div class="line">    <span class="attr">toJSON</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="comment">// 只输出name和age，并且改变了key：</span></div><div class="line">            <span class="string">'Name'</span>: <span class="keyword">this</span>.name,</div><div class="line">            <span class="string">'Age'</span>: <span class="keyword">this</span>.age</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">JSON</span>.stringify(xiaoming); <span class="comment">// '&#123;"Name":"小明","Age":14&#125;'</span></div></pre></td></tr></table></figure>
<p>使用<code>JSON.parse()</code>反序列化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"小明","age":14&#125;'</span>); <span class="comment">// Object &#123;name: '小明', age: 14&#125;</span></div><div class="line"><span class="comment">// 接收一个函数，用来转换解析出的属性</span></div><div class="line"><span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"小明","age":14&#125;'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</div><div class="line">    <span class="comment">// 把number * 2:</span></div><div class="line">    <span class="keyword">if</span> (key === <span class="string">'name'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> value + <span class="string">'同学'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;); <span class="comment">// Object &#123;name: '小明同学', age: 14&#125;</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Simple-Canvas-Game]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/18/Simple-Canvas-Game/</url>
      <content type="html"><![CDATA[<p>利用HTML5 Canvas制作小游戏的简单教程，详见 <a href="https://github.com/juncaixinchi/simple_canvas_game" target="_blank" rel="external">simple_canvas_game</a></p>
<a id="more"></a>
<h2 id="1-创建一个Canvas对象"><a href="#1-创建一个Canvas对象" class="headerlink" title="1. 创建一个Canvas对象"></a>1. 创建一个Canvas对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create the canvas</span></div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">canvas.width = <span class="number">512</span>;</div><div class="line">canvas.height = <span class="number">480</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(canvas);</div></pre></td></tr></table></figure>
<p>我们首先要做的是创建一个canvas对象。可以用JavaScript或HTML来做，都非常简单。此处我用的是JS。当创建了canvas之后，我们就可以获取它的上下文对象（context）、设置尺寸，并且把它加到当前文档中。</p>
<h2 id="2-载入图片"><a href="#2-载入图片" class="headerlink" title="2. 载入图片"></a>2. 载入图片</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Background image</span></div><div class="line"><span class="keyword">var</span> bgReady = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> bgImage = <span class="keyword">new</span> Image();</div><div class="line">bgImage.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    bgReady = <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line">bgImage.src = <span class="string">"images/background.png"</span>;</div></pre></td></tr></table></figure>
<p>游戏需要图像，所以让我们载入一些图片吧。我想尽量简单化，所以只用了Image对象来做，当然，还可以将载入图像的功能封装成一个类或别的任何形式。代码中的bgReady用来标识图片是否已完全载入，只有当图片载入完成后，我们才能使用它，如果在载入完成前就对其进行绘制或渲染，JS将会报一个DOM error的错误。</p>
<p>我们会用到三张图片（背景、英雄、怪物），每张图片都需要这样处理。</p>
<h2 id="3-定义游戏要使用的对象"><a href="#3-定义游戏要使用的对象" class="headerlink" title="3. 定义游戏要使用的对象"></a>3. 定义游戏要使用的对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Game objects</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">    <span class="attr">speed</span>: <span class="number">256</span>, <span class="comment">// movement in pixels per second</span></div><div class="line">    x: <span class="number">0</span>,</div><div class="line">    <span class="attr">y</span>: <span class="number">0</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> monster = &#123;</div><div class="line">    <span class="attr">x</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">y</span>: <span class="number">0</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> monstersCaught = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>定义一些变量，稍后会用到。hero对象的speed属性表示英雄的移动速度（像素/秒）；monster对象不会移动，所以仅仅具有一对坐标；monstersCaught表示玩家抓住的怪物数量。</p>
<h2 id="4-处理玩家输入"><a href="#4-处理玩家输入" class="headerlink" title="4. 处理玩家输入"></a>4. 处理玩家输入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Handle keyboard controls</span></div><div class="line"><span class="keyword">var</span> keysDown = &#123;&#125;;</div><div class="line">addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">     keysDown[e.keyCode] = <span class="literal">true</span>;</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line">addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">     <span class="keyword">delete</span> keysDown[e.keyCode];</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>现在进行输入的处理。（对具有web开发背景的人来说，这是目前为止第一个具有挑战性的部分）对一般的网页来说，当用户开始输入时，可能需要马上开始播放动画或请求数据。但在这里，我们想让游戏逻辑在一个单独的地方对游戏中发生的事情进行处理。为此我们需要将用户输入保存下来以备稍后处理，而不是立即处理。</p>
<p>我们通过简单地将事件对应的键编码（keyCode）保存在keysDown变量中来实现。如果该变量中具有某个键编码，就表示用户目前正按下这个键。简单吧！</p>
<h2 id="5-新游戏"><a href="#5-新游戏" class="headerlink" title="5. 新游戏"></a>5. 新游戏</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Reset the game when the player catches a monster</span></div><div class="line"><span class="keyword">var</span> reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     hero.x = canvas.width / <span class="number">2</span>;</div><div class="line">     hero.y = canvas.height / <span class="number">2</span>;</div><div class="line"></div><div class="line">     <span class="comment">// Throw the monster somewhere on the screen randomly</span></div><div class="line">     monster.x = <span class="number">32</span> + (<span class="built_in">Math</span>.random() * (canvas.width - <span class="number">64</span>));</div><div class="line">     monster.y = <span class="number">32</span> + (<span class="built_in">Math</span>.random() * (canvas.height - <span class="number">64</span>));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>通过调用reset函数来开始新游戏。该函数将英雄（即玩家角色）放到屏幕中间，然后随机选择一个位置来安置怪物。</p>
<h2 id="6-更新对象"><a href="#6-更新对象" class="headerlink" title="6. 更新对象"></a>6. 更新对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Update game objects</span></div><div class="line"><span class="keyword">var</span> update = <span class="function"><span class="keyword">function</span> (<span class="params">modifier</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="number">38</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding up</span></div><div class="line">        hero.y -= hero.speed * modifier;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="number">40</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding down</span></div><div class="line">        hero.y += hero.speed * modifier;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="number">37</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding left</span></div><div class="line">        hero.x -= hero.speed * modifier;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="number">39</span> <span class="keyword">in</span> keysDown) &#123; <span class="comment">// Player holding right</span></div><div class="line">        hero.x += hero.speed * modifier;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Are they touching?</span></div><div class="line">    <span class="keyword">if</span> (</div><div class="line">        hero.x &lt;= (monster.x + <span class="number">32</span>)</div><div class="line">            &amp;&amp; monster.x &lt;= (hero.x + <span class="number">32</span>)</div><div class="line">            &amp;&amp; hero.y &lt;= (monster.y + <span class="number">32</span>)</div><div class="line">            &amp;&amp; monster.y &lt;= (hero.y + <span class="number">32</span>)</div><div class="line">    ) &#123;</div><div class="line">         ++monstersCaught;</div><div class="line">         reset();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这是update函数，游戏每隔一定时间会调用它一次。它所做的第一件事情是检查用户是否按下了上下左右四个箭头键。如果是，就将我们的英雄向相应的方向移动。</p>
<p>update有一个modifier参数，这看起来好像有点奇怪。你会在游戏的主函数即main函数中看到它，不过我在这儿先解释一下。modifier参数是一个从1开始的与时间相关的数。如果间隔刚好为1秒时，它的值就会为1，英雄移动的距离即为256像素（英雄的速度为256像素/秒）；而如果间隔是0.5秒，它的值就为0.5，即英雄移动的距离为其速度的一半，以此类推。通常update函数调用的间隔很短，所以modifier的值很小，但用这种方式能够确保不管代码执行的速度怎么样，英雄的移动速度都是相同的。</p>
<p>我们已经实现了根据用户的输入来移动英雄，但我们还可以在移动英雄时对其进行检查，以确定是否有其他事件发生。例如：英雄是否与怪物发生了碰撞——当英雄与怪物发生碰撞时，我们为玩家进行计分（monstersCaught加1）并重置游戏（调用reset函数）。</p>
<h2 id="7-渲染对象"><a href="#7-渲染对象" class="headerlink" title="7. 渲染对象"></a>7. 渲染对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Draw everything</span></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bgReady) &#123;</div><div class="line">         ctx.drawImage(bgImage, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (heroReady) &#123;</div><div class="line">         ctx.drawImage(heroImage, hero.x, hero.y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (monsterReady) &#123;</div><div class="line">         ctx.drawImage(monsterImage, monster.x, monster.y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Score</span></div><div class="line">    ctx.fillStyle = <span class="string">"rgb(250, 250, 250)"</span>;</div><div class="line">    ctx.font = <span class="string">"24px Helvetica"</span>;</div><div class="line">    ctx.textAlign = <span class="string">"left"</span>;</div><div class="line">    ctx.textBaseline = <span class="string">"top"</span>;</div><div class="line">    ctx.fillText(<span class="string">"Goblins caught: "</span> + monstersCaught, <span class="number">32</span>, <span class="number">32</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当你能够看到你的行动时游戏才会变得更有趣，所以让我们在屏幕上绘制吧。首先我们将背景图片绘制到canvas，然后是英雄和怪物。注意顺序很重要，因为任何位于表层的图片都会将其下面的像素覆盖掉。</p>
<p>接下来是文字，这有些不同，我们调用fillText函数显示玩家的分数。因为不需要复杂的动画或者对文字进行移动，所以只是绘制一下就ok了。</p>
<h2 id="8-游戏主循环"><a href="#8-游戏主循环" class="headerlink" title="8. 游戏主循环"></a>8. 游戏主循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The main game loop</span></div><div class="line"><span class="keyword">var</span> main = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</div><div class="line">    <span class="keyword">var</span> delta = now - then;</div><div class="line"></div><div class="line">    update(delta / <span class="number">1000</span>);</div><div class="line">    render();</div><div class="line"></div><div class="line">    then = now;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>游戏的主循环用来控制游戏流程。首先我们要获得当前的时间，这样我们才能计算时间差（自上次循环以来经过的时间）。然后计算modifier的值并交给update（需要将delta除以1000以将其转换为毫秒）。最后调用render并更新记录的时间。</p>
<p>更多关于游戏循环的内容见“Onslaught! Arena Case Study”。</p>
<h2 id="9-开始游戏吧"><a href="#9-开始游戏吧" class="headerlink" title="9. 开始游戏吧"></a>9. 开始游戏吧</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Let's play this game!</span></div><div class="line">reset();</div><div class="line"><span class="keyword">var</span> then = <span class="built_in">Date</span>.now();</div><div class="line">setInterval(main, <span class="number">1</span>); <span class="comment">// Execute as fast as possible</span></div></pre></td></tr></table></figure>
<p>快完成了，这是最后一段代码。首先调用reset来开始新游戏。（还记得吗，这会将英雄置中并随机安放怪物）。然后将起始时间保存到变量then中并启动游戏的主循环。<br>OK！（但愿）你现在已经理解了在HTML5 Canvas中用JS来开发游戏的基础知识了。建议最好是能够自己亲自试一把！</p>
]]></content>
      
        
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> Game </tag>
            
            <tag> Demo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git_note]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/14/Git-note/</url>
      <content type="html"><![CDATA[<h1 id="Git-note"><a href="#Git-note" class="headerlink" title="Git note"></a>Git note</h1><p>学习Git的笔记，完整文档见<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git-scm</a></p>
<a id="more"></a>
<h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="获取升级"><a href="#获取升级" class="headerlink" title="获取升级"></a>获取升级</h3><pre><code>$ git clone git://git.kernel.org/pub/scm/git/git.git
</code></pre><h3 id="添加用户信息，并查看配置文件"><a href="#添加用户信息，并查看配置文件" class="headerlink" title="添加用户信息，并查看配置文件"></a>添加用户信息，并查看配置文件</h3><pre><code>$ git config --global user.name &quot;juncaixinchi&quot;
$ git config --global user.email &quot;juncaixinchi111@gmail.com&quot;
$ less ~/.gitconfig
</code></pre><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><pre><code>$ git help &lt;verb&gt;
$ git &lt;verb&gt; --help
$ man git-&lt;verb&gt;
</code></pre><h3 id="生成ssh-keys，在Github-keys添加即可"><a href="#生成ssh-keys，在Github-keys添加即可" class="headerlink" title="生成ssh keys，在Github-keys添加即可"></a>生成ssh keys，在<a href="https://github.com/settings/keys" target="_blank" rel="external">Github-keys</a>添加即可</h3><pre><code>$ ssh-keygen -t rsa -b 4096 -C &quot;juncaixinchi111@gmail.com&quot;
$ clip &lt; ~/.ssh/id_rsa.pub
</code></pre><h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h3><pre><code>$ git init
</code></pre><p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p>
<pre><code>$ git add *
$ git commit -m &apos;initial project version&apos;
</code></pre><p>在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，应该开始跟踪这些文件并提交。 </p>
<h3 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h3><p>克隆blog-generater至当前目录，分别使用HTTPS协议、SSH协议、本地协议</p>
<pre><code>$ git clone https://github.com/juncaixinchi/blog-generater.git
$ git clone git@github.com:juncaixinchi/blog-generater.git
$ git clone /opt/git/project.git
</code></pre><h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><pre><code>$ git add README
</code></pre><p>使用命令 git add 开始跟踪跟踪 README 文件</p>
<pre><code>$ git status

$ git status -s
</code></pre><p>检查当前文件状态，加-s为简略信息</p>
<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>创建一个名为 .gitignore 的文件，列出要忽略的文件模式，文件 .gitignore 的格式规范如下：</p>
<ul>
<li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li>
<li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p>
<pre><code># no .a files
*.a
</code></pre></li>
<li><p>匹配模式可以以（/）开头防止递归。</p>
<pre><code># only ignore the TODO file in the current directory, not subdir/TODO
/TODO
</code></pre></li>
<li><p>匹配模式可以以（/）结尾指定目录。</p>
<pre><code># ignore all files in the build/ directory
build/
</code></pre></li>
<li><p>可以使用标准的 glob 模式匹配。</p>
<pre><code># ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory
doc/**/*.pdf
</code></pre></li>
</ul>
<h3 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h3><p>commit命令会提交更新，-m参数可添加提交备注，或者随机生成备注 O__O</p>
<pre><code>$ git commit -m &quot;update&quot;
$ git commit -m &quot;`curl -s http://whatthecommit.com/index.txt`&quot;
</code></pre><p>给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 add 步骤</p>
<pre><code>$ git commit -a -m &apos;update without git add&apos;
</code></pre><p>不过正式的提交还是应该避免-m 添加备注，而是详细的添加</p>
<h3 id="移除文件或移动文件"><a href="#移除文件或移动文件" class="headerlink" title="移除文件或移动文件"></a>移除文件或移动文件</h3><p>使用 rm 命令将文件从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件，如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p>
<pre><code>$ git rm file_to_remove.md
$ git mv file_from file_to
</code></pre><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>查看所有log</p>
<pre><code>$ git log
</code></pre><p>显示最近两次提交的差异</p>
<pre><code>$ git log -p -2
</code></pre><p>显示每次提交的简略的统计信息</p>
<pre><code>$ git log --stat
</code></pre><p>以pretty的方式显示提交历史</p>
<pre><code>$ git log --pretty=oneline
</code></pre><p>添加了一些ASCII字符串来形象地展示你的分支、合并历史：</p>
<pre><code>$ git log --pretty=format:&quot;%h %s&quot; --graph
</code></pre><p>只显示作者L在2周内提交的近5条记录</p>
<pre><code>$ git log --author L --since=2.weeks -5
</code></pre><h3 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h3><p>尝试重新提交,第二次提交将代替第一次提交的结果</p>
<pre><code>$ git commit -m &apos;initial commit&apos;
$ git add forgotten_file
$ git commit --amend
</code></pre><p>取消暂存的文件file_to_cancle.txt(git add 的相反操作)</p>
<pre><code>$ git reset HEAD file_to_cancle.txt
</code></pre><p>撤消对文件的修改，恢复文件file_to_restore.txt到上次提交时候的状态</p>
<pre><code>$ git checkout -- file_to_restore.txt
</code></pre><h3 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h3><p>查看远程仓库</p>
<pre><code>$ git remote -v
$ git remote show
</code></pre><p>添加远程仓库，默认为 origin</p>
<pre><code>$ git remote add &lt;shortname&gt; &lt;url&gt;
$ git remote add pd https://github.com/juncaixinchi/blog-generater.git
</code></pre><p>从远程仓库中抓取，默认从origin抓取，也可自定义</p>
<pre><code>$ git fetch
$ git fetch https://github.com/juncaixinchi/blog-generater.git
$ git fetch origin master:tmp
</code></pre><p>git fetch不会自动merge，需再merge</p>
<pre><code>$ git fetch origin master:tmp
$ git diff tmp
$ git merge tmp
</code></pre><p>直接从远程获取最新版本并merge到本地</p>
<pre><code>$ git pull origin master
</code></pre><p>使用 git push (remote) (branch)推送到远程仓库，默认推送到origin/master, 也可自定义远程仓库及分支（如serverfix）</p>
<pre><code>$ git push
$ git push https://github.com/juncaixinchi/blog-generater.git
$ git push origin serverfix
$ git push origin serverfix:awesomebranch
</code></pre><p>设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支</p>
<pre><code>$ git checkout --track origin/serverfix
</code></pre><p>远程仓库的移除和重命名</p>
<pre><code>$ git remote rm paul
$ git remote rename pb paul
</code></pre><p>删除远程分支serverfix</p>
<pre><code>$ git push origin --delete serverfix
</code></pre><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><p>列出已有标签</p>
<pre><code>$ git tag
</code></pre><p>创建一个附注标签，指定提交的校验和（或部分校验和）则可后期打标签</p>
<pre><code>$ git tag -a v1.4 -m &apos;my version 1.4&apos;
$ git tag -a v0.0 -m &quot;origin version&quot; c76e548
</code></pre><p>共享标签</p>
<pre><code>$ git push origin v1.5
</code></pre><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p>通过 config 为命令设置别名，外部程序的命令则要加!，使用cmu直接add 及 commit </p>
<pre><code>$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.st status
$ git config --global alias.last &apos;log -1 HEAD&apos;
$ git config --global alias.hexo &apos;!hexo g -delpoy&apos;
$ git config --global alias.cmu &apos;commit -a -m &quot;update&quot;&apos;
$ git config --global alias.logbr &apos;log --oneline --decorate --graph --all -20&apos;
</code></pre><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><h3 id="分支的新建和合并"><a href="#分支的新建和合并" class="headerlink" title="分支的新建和合并"></a>分支的新建和合并</h3><p>创建分支testing，分支切换为testing，然后commit内容将在test分支进行</p>
<pre><code>$ git branch testing
$ git checkout testing
</code></pre><p>或者在过去某个版本，如593015f,建立分支testing</p>
<pre><code>$ git log --oneline --decorate --graph --all
$ git checkout 593015f
$ git checkout -b testing
</code></pre><p>使用 log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 –decorate。</p>
<pre><code>$ git log --oneline --decorate
$ git log --oneline --decorate --graph --all
</code></pre><p>使用 merge 来合并分支</p>
<pre><code>$ git merger testing
</code></pre><p>如果 master 和 testing 分支都各有提交新版本，则无法自动合并，会出现如下错误，需要手动编辑冲突的文件，然后再 commit，</p>
<pre><code>Auto Merge Failed; Fix Conflicts and Then Commit the Result
</code></pre><p>例如冲突的文件内容为：</p>
<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html
&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;
=======
&lt;div id=&quot;footer&quot;&gt;
 please contact us at support@github.com
&lt;/div&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; testing:index.html
</code></pre><p>这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置）在这个区段的上半部分（======= 的上半部分），而 testing 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，必须选择使用由 ======= 分割的两部分中的一个，或者也可以自行合并这些内容。 例如，通过把这段内容换成下面的样子来解决冲突：</p>
<pre><code>&lt;div id=&quot;footer&quot;&gt;
please contact us at email.support@github.com
&lt;/div&gt;
</code></pre><p>另外也可以使用图形化工具来解决冲突</p>
<pre><code>$ git mergetool
</code></pre><p>合并完成后删除分支testing</p>
<pre><code>$ git branch -d testing
</code></pre><h3 id="分支的管理"><a href="#分支的管理" class="headerlink" title="分支的管理"></a>分支的管理</h3><p>显示分支列表</p>
<pre><code>$ git branch
</code></pre><p>查看每一个分支的最后一次提交</p>
<pre><code>$ git branch -v
</code></pre><p>查看已经合并或尚未合并到当前分支的分支</p>
<pre><code>$ git branch --merged
$ git branch --no-merged
</code></pre><p>删除和强制删除分支</p>
<pre><code>$ git branch -d testing
$ git branch -D testing
</code></pre><h3 id="分支整合之变基"><a href="#分支整合之变基" class="headerlink" title="分支整合之变基"></a>分支整合之变基</h3><p>使用 rebase 命令将提交到某一分支 testing 上的所有修改都移至另一分支 master 上，然后回到 master 分支，进行一次快进合并。</p>
<pre><code>$ git checkout testing
$ git rebase master

$ git checkout master
$ git merge testing
</code></pre><p>直接将特性分支（testing）变基到目标分支（即 master）上</p>
<pre><code>$ git rebase master testing
</code></pre><p>对两个分支进行变基时，将 client 中的修改合并到主分支并发布，但暂时并不合并 server 中的修改</p>
<pre><code>$ git rebase --onto master server client
</code></pre><p>变基的风险：<code>不要对在仓库外有副本的分支执行变基</code></p>
<h2 id="Git工具"><a href="#Git工具" class="headerlink" title="Git工具"></a>Git工具</h2><h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><p>将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。</p>
<pre><code>$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next
$ git submodule init
$ git submodule update 
$ git submodule update themes/next
</code></pre><p>在开始克隆含有子模块的仓库时，可添加–recursive，直接递归添加所有子模块</p>
<pre><code>$ git clone --recursive https://github.com/juncaixinchi/blog-generater.git
</code></pre><p>让 Git 在推送到主项目前检查所有子模块是否已推送    </p>
<pre><code>$ git push --recurse-submodules=check
</code></pre><p>让 Git 自动进入到子模块中，然后在推送主项目前推送了它</p>
<pre><code>$ git push --recurse-submodules=on-demand
</code></pre><p>遍历子模块运行命令</p>
<pre><code>$ git submodule foreach &apos;git push&apos;
</code></pre><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。</p>
<p>开始二分查找，并设置当前版本为有问题状态</p>
<pre><code>$ git bisect start
$ git bisect bad
</code></pre><p>设定没有问题的版本，然后依次检测个版本，设定 bad or good ，直到找到问题版本</p>
<pre><code>$ git bisect good v1.0
</code></pre><p>完成后，重置 HEAD 指针到最开始的位置</p>
<pre><code>$ git bisect reset
</code></pre><p>标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者，通过-L来限定行数</p>
<pre><code>$ git blame

$ git blame -L 12,22 file_to_check
</code></pre><p>在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式</p>
<pre><code>$ git grep
</code></pre><h3 id="维护项目"><a href="#维护项目" class="headerlink" title="维护项目"></a>维护项目</h3><p>balabala…</p>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Hexo+Next+GitHub搭建个人博客]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/14/Blog-driven-by-hexo/</url>
      <content type="html"><![CDATA[<h1 id="基于Hexo-Next-GitHub搭建个人博客"><a href="#基于Hexo-Next-GitHub搭建个人博客" class="headerlink" title="基于Hexo+Next+GitHub搭建个人博客"></a>基于Hexo+Next+GitHub搭建个人博客</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hexo是依赖于node.js的个人博客生成引擎，可以把基于Markdown的文件生成博客页面，所以整个项目分为两部分：</p>
<ol>
<li><p>网页生成</p>
<p> 安装配置Hexo及其主题Next，撰写整理博客文档，生成静态页面 <a href="https://github.com/juncaixinchi/blog-generater" target="_blank" rel="external">blog-generater</a></p>
</li>
<li><p>网页部署</p>
<p> 生成的网页存在于public文件夹内，将其部署到Github Pages或其他服务器即可 <a href="https://juncaixinchi.github.io/Blogs/">Blogs</a></p>
</li>
</ol>
<a id="more"></a>
<h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><p>首先要有node.js，然后用npm安装hexo</p>
<pre><code>$ npm install -g hexo-cli
</code></pre><p>切换到博客的位置</p>
<pre><code>$ cd ~/Github/
</code></pre><p>生成新的博客文件夹，这会需要一段时间</p>
<pre><code>$ hexo init blog
$ cd blog
</code></pre><p>开启服务器，默认为 <a href="http://127.0.0.1:4000/" target="_blank" rel="external">http://127.0.0.1:4000/</a> 可在本地查看</p>
<pre><code>$ hexo server
</code></pre><p>生成新的文章，这里”Hello Hexo”只是标题，然后可以编辑Hello-Hexo.md撰写博客</p>
<pre><code>$ vi ./source/_posts/Hello-Hexo.md
</code></pre><p>生成静态文件，以便部署到Github Pages，详细配置见下文</p>
<pre><code>$ hexo generate

$ hexo deploy
</code></pre><p>或者合并</p>
<pre><code>$ hexo generate --deploy
</code></pre><p>安装压缩页面的插件</p>
<pre><code>$ npm install hexo-all-minifier --save
</code></pre><h3 id="自动生成静态页面和部署"><a href="#自动生成静态页面和部署" class="headerlink" title="自动生成静态页面和部署"></a>自动生成静态页面和部署</h3><p>安装 hexo-deployer-git.</p>
<pre><code>$ npm install hexo-deployer-openshift --save
</code></pre><p>编辑配置文件，需在github先新建repository：Blogs</p>
<pre><code>deploy:
  type: git
  repo: git@github.com:juncaixinchi/Blogs.git
  branch: master
</code></pre><p>生成静态文件和自动部署</p>
<pre><code>hexo generate --deploy
</code></pre><h3 id="配置与添加主题"><a href="#配置与添加主题" class="headerlink" title="配置与添加主题"></a>配置与添加主题</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>
<h4 id="设置网站路径"><a href="#设置网站路径" class="headerlink" title="设置网站路径"></a>设置网站路径</h4><p>很关键，否则上传至GitHub不能正确加载css和js</p>
<pre><code>url: https://juncaixinchi.github.io/Blogs/
root: /Blogs/
</code></pre><h4 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h4><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<pre><code>language: zh-Hans
</code></pre><h4 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h4><p>将avatar.png放置在 source/images/ 目录下，站点配置文件新增字段 avatar，配置为：</p>
<pre><code>avatar: /images/avatar.png
</code></pre><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>因为添加主题next，在上传GitHub Pages的时候遇到了以下问题：</p>
<pre><code>Page build failed: Missing submodule
</code></pre><p>发现是submodule没有配置好，删除原来的 themes/next/ 文件使用以下代码重新配置</p>
<pre><code>$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next

$ git submodule init

$ git submodule update
</code></pre><h4 id="选择主题Scheme"><a href="#选择主题Scheme" class="headerlink" title="选择主题Scheme"></a>选择主题Scheme</h4><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<p>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白<br>Mist - Muse 的紧凑版本，整洁有序的单栏外观<br>Pisces - 双栏 Scheme，小家碧玉似的清新<br>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。</p>
<pre><code>#scheme: Muse
#scheme: Mist
scheme: Pisces
</code></pre><h4 id="添加标签云页面"><a href="#添加标签云页面" class="headerlink" title="添加标签云页面"></a>添加标签云页面</h4><p>新建一个页面，命名为 tags 。命令如下：</p>
<pre><code>hexo new page &quot;tags&quot;
</code></pre><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p>
<pre><code>title: All tags
date: 2014-12-22 12:39:04
type: &quot;tags&quot;
comments: false
---
</code></pre><p>在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下:</p>
<pre><code>menu:
  home: /
    archives: /archives
    tags: /tags
</code></pre><h4 id="404页面设置"><a href="#404页面设置" class="headerlink" title="404页面设置"></a>404页面设置</h4><p>设置腾讯的404公益页面，在source/下添加404.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"https://juncaixinchi.github.io/Blogs/"</span> <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span><span class="undefined"></span></div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是该页面使用http获取js，且其中嵌入的各种链接都是http，而Github要求全部为https。故修改代码（见下面）。其中search_children.js主要提取了data.js及page.js两个文件，前者是寻找儿童的数据，在Github中没问题；后者中默认都是用http加载的js和css，所以不能直接用，故改为https方式获取js与css，直接加入404.html页面，内容详见：<a href="https://raw.githubusercontent.com/juncaixinchi/Blogs/master/404.html" target="_blank" rel="external">404.html</a></p>
<p>然后生成文件</p>
<pre><code>hexo generate
</code></pre><p>顺便也可替换404.html，可以避免一次跳转</p>
<pre><code>cp source/404.html public/404.html
</code></pre><p>然后上传部署，OK</p>
<pre><code>hexo deploy
</code></pre><h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3>
hexo generate的过程可能会报错，可以到[troubleshooting](https://hexo.io/docs/troubleshooting.html)页面查找原因，如页面中含有`{{ }} or {% %}`可能会报错，可以通过用 raw 标签来避免问题

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">Hello &#123;&#123; sensitive &#125;&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
            <tag> GitHub Pages </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github Git Cheat Sheet]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Github-Git-Cheat-Sheet/</url>
      <content type="html"><![CDATA[<h1 id="GitHub-Git-备忘单"><a href="#GitHub-Git-备忘单" class="headerlink" title="GitHub Git 备忘单"></a>GitHub Git 备忘单</h1><p>Git是一个开源的分布式版本控制系统，方便你在笔记本或桌面端进行GitHub的操作，这个备忘单总结了常用的Git命令行指令，以便快速查询。</p>
<p>转载自<a href="https://services.github.com/on-demand/downloads/zh_CN/github-git-cheat-sheet/" target="_blank" rel="external">GitHub Git 备忘单</a></p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p>将所有文件进行快照处理用于版本控制</p>
<pre><code>git add *
</code></pre><p>将文件快照永久地记录在版本历史中</p>
<pre><code>git commit -m &quot;upload files&quot;
</code></pre><p>上传所有本地分支commit到GitHub上</p>
<pre><code>git push
</code></pre><a id="more"></a>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>GitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。</p>
<p>GitHub for Windows<br><a href="http://windows.github.com" target="_blank" rel="external">http://windows.github.com</a></p>
<p>GitHub for Mac<br><a href="http://mac.github.com" target="_blank" rel="external">http://mac.github.com</a></p>
<p>GitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。</p>
<p>Git 全平台版<br><a href="http://git-scm.com" target="_blank" rel="external">http://git-scm.com</a></p>
<h3 id="配置工具"><a href="#配置工具" class="headerlink" title="配置工具"></a>配置工具</h3><p>对你的commit操作设置关联的用户名</p>
<pre><code>$ git config --global user.name &quot;[name]&quot;
</code></pre><p>对你的commit操作设置关联的邮箱地址</p>
<pre><code>$ git config --global user.email &quot;[email address]&quot;
</code></pre><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建一个本地的仓库，并设置名字</p>
<pre><code>$ git init [project-name]
</code></pre><p>下载一个项目以及它所有的版本历史</p>
<pre><code>$ git clone [url]
</code></pre><h3 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h3><p>列出所有新建或者更改的文件，这些文件需要被commit</p>
<pre><code>$ git status
</code></pre><p>展示那些没有暂存文件的差异</p>
<pre><code>$ git diff
</code></pre><p>将文件进行快照处理用于版本控制</p>
<pre><code>$ git add [file]
</code></pre><p>展示暂存文件与最新版本之间的不同</p>
<pre><code>$ git diff --staged
</code></pre><p>将文件移除暂存区，但是保留其内容</p>
<pre><code>$ git reset [file]
</code></pre><p>将文件快照永久地记录在版本历史中</p>
<pre><code>$ git commit -m&quot;[descriptive message]&quot;
</code></pre><h3 id="批量更改"><a href="#批量更改" class="headerlink" title="批量更改"></a>批量更改</h3><p>列出当前仓库中所有的本地分支</p>
<pre><code>$ git branch
</code></pre><p>建立一个新分支</p>
<pre><code>$ git branch [branch-name]
</code></pre><p>切换到一个特定的分支上并更新工作目录</p>
<pre><code>$ git checkout [branch-name]
</code></pre><p>合并特定分支的历史到当前分支</p>
<pre><code>$ git merge [branch-name]
</code></pre><p>删除特定的分支</p>
<pre><code>$ git branch -d [branch-name]
</code></pre><h3 id="重构文件"><a href="#重构文件" class="headerlink" title="重构文件"></a>重构文件</h3><p>从工作目录中删除文件并暂存此删除</p>
<pre><code>$ git rm [file]
</code></pre><p>从版本控制中移除文件，但不改变本地文件</p>
<pre><code>$ git rm --cached [file]
</code></pre><p>改变文件名，将其进行快照处理用于版本控制</p>
<pre><code>$ git mv [file-original] [file-renamed]
</code></pre><h3 id="停止追踪"><a href="#停止追踪" class="headerlink" title="停止追踪"></a>停止追踪</h3><p>文本文件.gitignore可以防止一些特定的文件进入到版本控制中</p>
<pre><code>*.log build/ temp-*
</code></pre><p>列出所有项目中忽略的文件</p>
<pre><code>$ git ls-files --others --ignored --exclude-standard
</code></pre><h3 id="保存临时更改"><a href="#保存临时更改" class="headerlink" title="保存临时更改"></a>保存临时更改</h3><p>临时存储所有修改的已跟踪文件</p>
<pre><code>$ git stash
</code></pre><p>重新存储所有最近被stash的文件</p>
<pre><code>$ git stash pop
</code></pre><p>列出所有被stash的更改</p>
<pre><code>$ git stash list
</code></pre><p>放弃所有最近stash的更改</p>
<pre><code>$ git stash drop
</code></pre><h3 id="查阅历史"><a href="#查阅历史" class="headerlink" title="查阅历史"></a>查阅历史</h3><p>列出当前分支的版本历史</p>
<pre><code>$ git log
</code></pre><p>列出文件的版本历史，包括重命名</p>
<pre><code>$ git log --follow [file]
</code></pre><p>展示两个不同分支之间的差异</p>
<pre><code>$ git diff [first-branch]...[second-branch]
</code></pre><p>输出元数据以及特定commit的内容变化</p>
<pre><code>$ git show [commit]
</code></pre><h3 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h3><p>撤销所有[commit]后的的commit，在本地保存更改</p>
<pre><code>$ git reset [commit]
</code></pre><p>放弃所有更改并回到某个特定的commit</p>
<pre><code>$ git reset --hard [commit]
</code></pre><h3 id="同步更改"><a href="#同步更改" class="headerlink" title="同步更改"></a>同步更改</h3><p>下载远程仓库的所有历史</p>
<pre><code>$ git fetch [remote]
</code></pre><p>合并远程分支到当前本地分支</p>
<pre><code>$ git merge [remote]/[branch]
</code></pre><p>上传所有本地分支commit到GitHub上</p>
<pre><code>$ git push [remote] [branch]
</code></pre><p>下载远程仓库的所有历史并合并更改</p>
<pre><code>$ git pull
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> Cheat-sheet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Todo List]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Todo-List/</url>
      <content type="html"><![CDATA[<h1 id="Todo-List"><a href="#Todo-List" class="headerlink" title="Todo List"></a>Todo List</h1><h2 id="Node-React"><a href="#Node-React" class="headerlink" title="Node/React"></a>Node/React</h2><h2 id="基于GWAS-catalog的基因数据解读"><a href="#基于GWAS-catalog的基因数据解读" class="headerlink" title="基于GWAS catalog的基因数据解读"></a>基于GWAS catalog的基因数据解读</h2><h2 id="爬虫-单词统计-gt-计算机英语"><a href="#爬虫-单词统计-gt-计算机英语" class="headerlink" title="爬虫-单词统计-&gt;计算机英语"></a>爬虫-单词统计-&gt;计算机英语</h2>]]></content>
      
        
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown note]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Markdown-note/</url>
      <content type="html"><![CDATA[<h1 id="Markdown语法摘要"><a href="#Markdown语法摘要" class="headerlink" title="Markdown语法摘要"></a>Markdown语法摘要</h1><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><p>标记+空格+内容</p>
<a id="more"></a>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><pre><code># 一级标题 #

## 二级标题

### 三级标题
</code></pre><p>以此类推，共6级标题，后面的#可加可不加</p>
<p>或者</p>
<pre><code>一级标题  
===

二级标题  
---
</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><pre><code>+ 无序列表

- 无序列表

* 无序列表

1. 有序列表

2. 有序列表
</code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><pre><code>&gt; 引用
</code></pre><p>MarkdownPad2快捷键为ctrl+q</p>
<h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>链接：</p>
<pre><code>[]()
[github](https://github.com)
</code></pre><p>图片：</p>
<pre><code>![]()
![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)
</code></pre><p>实例效果：</p>
<p><a href="https://github.com" target="_blank" rel="external">github</a> <img src="https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico" alt="icon"></p>
<p>或者</p>
<pre><code>This is [an example][id] reference-style link.

[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>实例:</p>
<p>This is <a href="http://example.com/" title="Optional Title Here" target="_blank" rel="external">an example</a> reference-style link.</p>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><pre><code>*斜体文本*
_斜体文本_

**粗体文本**
__粗体文本__
</code></pre><p>注意必须前后包围，且不连空格</p>
<p>样式： <em>斜体文本</em>  <strong>粗体文本</strong></p>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>使用 ` 符号</p>
<pre><code>` code `
</code></pre><p>Tab和空格</p>
<pre><code>Tab或4个空格+code
</code></pre><p>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```javascript</div><div class="line">code</div></pre></td></tr></table></figure></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><pre><code>***
* * *
---
___
</code></pre><p>三个及以上 * 或 - 或 _ ，其间可有空格。</p>
<p>样式：</p>
<hr>
<h3 id="需要转义的字符"><a href="#需要转义的字符" class="headerlink" title="需要转义的字符"></a>需要转义的字符</h3><pre><code>\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Cheat-sheet </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node install note]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/node-install-note/</url>
      <content type="html"><![CDATA[<h1 id="Node安装与npm环境变量配置"><a href="#Node安装与npm环境变量配置" class="headerlink" title="Node安装与npm环境变量配置"></a>Node安装与npm环境变量配置</h1><a id="more"></a>
<h1 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h1><p>进入nodejs官方网站下载软件(nodejs.org)</p>
<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>
<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>
<p>下载完成后，双击默认安装。安装程序会自动添加环境变量<br>Windows环境下的NodeJS+NPM+Bower安装配置</p>
<p>检测nodejs是否安装成功。打开cmd命令行 输入 node - v 显示当前版本号</p>
<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>
<p>检查npm是否安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行中键入 npm -v</p>
<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>
<h1 id="npm环境变量配置"><a href="#npm环境变量配置" class="headerlink" title="npm环境变量配置"></a>npm环境变量配置</h1><p>npm作为一个NodeJS的模块管理，之前我由于没有系统地看资料所以导致安装配置模块的时候走了一大段弯路，所以现在很有必要列出来记录下。我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立“node_global”及“node_cache”两个文件夹。我们就在cmd中键入两行命令：<br>    npm config set prefix “D:\Program Files\nodejs\node_global”<br>    和<br>    npm config set cache “D:\Program Files\nodejs\node_cache”</p>
<p>下面这一步非常关键，我们需要设置系统变量。进入我的电脑→属性→高级→环境变量。在系统变量下新建“NODE_PATH”，输入“D:\Program Files\nodejs\node_global\node_modules”。<br>安装bower, npm install bower -g; -g表示全局</p>
<p>输入 node，require(‘bower’) 测试是否安装成功！</p>
]]></content>
      
        
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Hexo]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Hello-Hexo/</url>
      <content type="html"><![CDATA[<p>Hello Hexo !</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Cheat-sheet </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
