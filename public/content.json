{"pages":[{"title":"","permalink":"https://juncaixinchi.github.io/Blogs/404.html","text":"var QZONE = window.QZONE || {}; function imagezoom(imgobj, box_w, box_h) { var src_w = imgobj.width; var src_h = imgobj.height; var r1 = src_w / src_h, r2 = box_w / box_h; var dst_w, dst_h; if (r1 > r2) { dst_w = box_w; dst_h = Math.round(dst_w / src_w * src_h); } else { if (r1 < r2) { dst_h = box_h; dst_w = Math.round(dst_h / src_h * src_w); } else { dst_w = box_w; dst_h = box_h; } } imgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\"; imgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\"; imgobj.style.width = dst_w + \"px\"; imgobj.style.height = dst_h + \"px\"; imgobj.style.opacity = 1; } (function(_w, _d) { var ha = _d.head || _d.getElementsByTagName(\"head\")[0]; var $scope = {}; var current; var tmnow; var chId; var homePageUrl, homePageName; var scs = document.getElementsByTagName(\"script\"); if (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) { homePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\"; homePageUrl = \"http://fm.qq.com\"; } else { if (location.href.indexOf(\"qzone.qq.com\") > -1) { homePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\"; homePageUrl = \"http://qzone.qq.com\"; } else { homePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\"; homePageUrl = \"http://www.qq.com\"; } } for (var i = 0;i < scs.length;i++) { if (scs[i].src.indexOf(\"404/search_children.js\") > -1) { if (scs[i].getAttribute(\"homePageUrl\")) { homePageUrl = scs[i].getAttribute(\"homePageUrl\"); } if (scs[i].getAttribute(\"homePageName\")) { homePageName = scs[i].getAttribute(\"homePageName\"); } break; } } $scope.rettext = homePageName; $scope.retlink = homePageUrl; function getData(srcUrl, callback) { var sc = _d.createElement(\"script\"); function orc() { if (sc.readyState === \"loaded\") { setTimeout(function() { callback && callback(); }, 0); } } if (sc.addEventListener) { if (callback) { sc.addEventListener(\"load\", callback, false); } } else { sc.attachEvent(\"onreadystatechange\", orc); } ha && ha.appendChild(sc); sc.src = srcUrl; } function resolveData(d) { var tid, len, ddata = [], tdata; if (\"object\" == typeof d && (d.data && (len = d.data.length))) { for (var i = 0;i < len;i++) { var expire = d.data[i].expire; d.data[i]._id = new Date * Math.random() * Math.random() * 1E7; if (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) { var _c = d.data[i].city, _p = d.data[i].province; if (_c && city) { if ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) { ddata.push(d.data[i]); continue; } } if (_p && province) { if ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) { ddata.push(d.data[i]); } } } } tid = Math.floor(Math.random() * (ddata.length || len)); tdata = (ddata.length ? ddata : d.data)[chId = tid]; if (_w.foundjsondata) { tdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\"; tdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\"; tdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) { return \"#p=\" + (+n + 1); }); return format(tmpl2, tdata); } if (!tdata.ext1) { tdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\"; } return tdata; } } function setTopData(tdata) { current = tdata; $scope.topname = tdata.name; $scope.topgender = tdata.sex; $scope.topbirth = tdata.birth_time; $scope.toplostdate = tdata.lost_time; $scope.toplostplace = tdata.lost_place; $scope.toplostdesc = tdata.child_feature; $scope.toplink = tdata.url; $scope.topimg = tdata.child_pic; $scope.topid = tdata._id; document.body.innerHTML = template(\"body\", $scope); } function init(data) { tmnow = data.tm_now * 1E3; var tdata = resolveData(jsondata); $scope.whichin = 0; jsondata.data.splice(chId, 1); $scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5)); setTopData(tdata); } var timeout; window._Callback = function(d) { clearTimeout(timeout); init(d); }; timeout = setTimeout(function() { _Callback({tm_now:(new Date).getTime() / 1E3}); }, 2E3); _w.share = function(target) { var summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\"); if (summary) { summary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary; } var stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\"; var desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\"; var encode = encodeURIComponent; var opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url}; var surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", origin_url = opts.origin_url || \"http://www.qq.com/404/\"; var shareList = {weibo:{method:function(evt) { var w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\"); }}, qzone:{method:function(evt) { var buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site}; for (var k in ps) { buff.push(k + \"=\" + encode(ps[k] || \"\")); } var w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\"); }}, sina:{method:function() { var w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\"); }}, kaixin:{method:function() { var n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary); openit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\"); }}, renren:{method:function() { var n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\"); if (p) { p.focus(); } }}, weixin:{method:function() { var n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\"); if (p) { p.focus(); } }}}; var openit = function(u, n, p) { function o() { var z; if (!(z = window.open(u, n, p))) { location.href = u; } else { z.focus(); } } o(); }; shareList[target] && shareList[target].method(); }; _w.toThis = function(id) { for (var i = 0;i < $scope.otherdata.length;i++) { if ($scope.otherdata[i]._id == id) { setTopData($scope.otherdata[i]); break; } } return false; }; var meta = document.createElement(\"meta\"); meta.name = \"viewport\"; meta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"; ha.appendChild(meta); (function registerStyle() { var link = document.createElement(\"link\"); link.rel = \"stylesheet\"; link.type = \"text/css\"; link.href = \"https://qzone.qq.com/gy/404/style/404style.css\"; ha.appendChild(link); })(); (function initStat() { var qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i; function cb() { var url = location.host; var src = \"\"; if (qzoneDomainNameRE.test(url)) { src = \"new404.qzone\"; } else { if (qqDomainNameRE.test(url)) { src = \"new404.qq\"; } else { if (qzsDomainNameRE.test(url)) { src = \"new404.qzonestyle\"; } else { src = url.replace(\".\", \"_\"); } } } _w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src)); } getData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb); })(); })(window, document); !function() { function a(a, b) { return(/string|function/.test(typeof b) ? h : g)(a, b); } function b(a, c) { return \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a; } function c(a) { return l[a]; } function d(a) { return b(a).replace(/&(?![\\w#]+;)|[\"']/g, c); } function e(a, b) { if (m(a)) { for (var c = 0, d = a.length;d > c;c++) { b.call(a, a[c], c, a); } } else { for (c in a) { b.call(a, a[c], c); } } } function f(a, b) { var c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b; for (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) { e = e.replace(c, \"/\"); } return e; } function g(b, c) { var d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"}); return c ? d(c) : d; } function h(a, b) { if (\"string\" == typeof b) { var c = b; b = function() { return new k(c); }; } var d = j[a] = function(c) { try { return new b(c, a) + \"\"; } catch (d) { return i(d)(); } }; return d.prototype = b.prototype = n, d.toString = function() { return b + \"\"; }, d; } function i(a) { var b = \"{Template Error}\", c = a.stack || \"\"; if (c) { c = c.split(\"\\n\").slice(0, 2).join(\"\\n\"); } else { for (var d in a) { c += \"\\n\" + a[d] + \"\\n\\n\"; } } return function() { return \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b; }; } var j = a.cache = {}, k = this.String, l = {\"\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) { return \"[object Array]\" === {}.toString.call(a); }, n = a.utils = {$helpers:{}, $include:function(a, b, c) { return a = f(c, a), g(a, b); }, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers; a.get = function(a) { return j[a.replace(/^\\.\\//, \"\")]; }, a.helper = function(a, b) { o[a] = b; }, \"function\" == typeof define ? define(function() { return a; }) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) { var b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\"); return r += ' 404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01 ', r += c(e), r += ' ', r += c(h), r += '(', r += c(i), r += ') \\u51fa\\u751f\\u65e5\\u671f\\uff1a', r += c(j), r += ' \\u5931\\u8e2a\\u65f6\\u95f4\\uff1a', r += c(l), r += ' \\u5931\\u8e2a\\u5730\\u70b9\\uff1a', r += c(m), r += ' \\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a', r += c(n), r += ' \\u67e5\\u770b\\u8be6\\u60c5 \\u5206\\u4eab \\u817e\\u8baf\\u5fae\\u535a QQ\\u7a7a\\u95f4 \\u65b0\\u6d6a\\u5fae\\u535a \\u5fae\\u4fe1 ', p(q, function(a) { r += ' '; }), r += \" \", new k(r); }); }();"},{"title":"","permalink":"https://juncaixinchi.github.io/Blogs/hitokoto.json","text":"{\"1324011466000\":{\"hitokoto\":\"既不回头，何必不忘；既然无缘，何须誓言；今日种种，似水无痕；明夕何夕，君已陌路。\",\"cat\":\"a\",\"author\":\"赵吟风\",\"source\":\"仙剑奇侠传\",\"like\":42,\"date\":\"2011.12.16 12:57:46\",\"catname\":\"Anime - 动画\",\"id\":1324011466000},\"1319270278000\":{\"hitokoto\":\"美好的人眼裡映出的世界也是美好的。\",\"cat\":\"a\",\"author\":\"misaki\",\"source\":\"ARIA\",\"like\":57,\"date\":\"2011.10.22 15:57:58\",\"catname\":\"Anime - 动画\",\"id\":1319270278000},\"1318780307000\":{\"hitokoto\":\"那双紧握不放的手⋯⋯抓住的是希望⋯⋯亦或是絕望⋯⋯\",\"cat\":\"e\",\"author\":\"sseeyyou\",\"source\":\"\",\"like\":56,\"date\":\"2011.10.16 23:51:47\",\"catname\":\"原创\",\"id\":1318780307000},\"1398857065373\":{\"hitokoto\":\"我们一路奋战，不是为了改变世界，而是为了不让世界改变我们。\",\"cat\":\"g\",\"author\":\"928884975\",\"source\":\"熔炉\",\"like\":4,\"date\":\"2014.04.30 19:24:25\",\"catname\":\"其他\",\"id\":1398857065373},\"1358015938000\":{\"hitokoto\":\"能够原谅女人的，才是男人。\",\"cat\":\"a\",\"author\":\"798750776\",\"source\":\"海贼王\",\"like\":14,\"date\":\"2013.01.13 02:38:58\",\"catname\":\"Anime - 动画\",\"id\":1358015938000},\"1370246153000\":{\"hitokoto\":\"隐约雷鸣，阴霾天空，但盼风雨来，能留你在此。\",\"cat\":\"a\",\"author\":\"_____丶X。\",\"source\":\"言叶之庭\",\"like\":21,\"date\":\"2013.06.03 15:55:53\",\"catname\":\"Anime - 动画\",\"id\":1370246153000},\"1319304215000\":{\"hitokoto\":\"什么都无所谓只想在你身边，什么都无所谓只想和你说话，什么都无所谓所以请你不要逃避。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"好想告诉你\",\"like\":21,\"date\":\"2011.10.23 01:23:35\",\"catname\":\"Anime - 动画\",\"id\":1319304215000},\"1318957204000\":{\"hitokoto\":\"要相信同伴，拯救同伴。\",\"cat\":\"a\",\"author\":\"星野望\",\"source\":\"绯弹的亚里亚\",\"like\":21,\"date\":\"2011.10.19 01:00:04\",\"catname\":\"Anime - 动画\",\"id\":1318957204000},\"1370006300000\":{\"hitokoto\":\"苦到头未必是甜的，而甜到头一定是苦的 。\",\"cat\":\"e\",\"author\":\"LastFairy\",\"source\":\"\",\"like\":12,\"date\":\"2013.05.31 21:18:20\",\"catname\":\"原创\",\"id\":1370006300000},\"1396632108880\":{\"hitokoto\":\"勇气，就是即便害怕也会去做。\",\"cat\":\"e\",\"author\":\"岛音。\",\"source\":\"\",\"like\":5,\"date\":\"2014.04.05 01:21:48\",\"catname\":\"原创\",\"id\":1396632108880},\"1319726579000\":{\"hitokoto\":\"人的记忆本来就是暧昧的，不值得信任。\",\"cat\":\"a\",\"author\":\"奇迹之梦\",\"source\":\"叛逆的鲁鲁修R2\",\"like\":30,\"date\":\"2011.10.27 22:42:59\",\"catname\":\"Anime - 动画\",\"id\":1319726579000},\"1318782718000\":{\"hitokoto\":\"要改变别人的心真是件很难办的事，不过改变自己要容易一点。\",\"cat\":\"a\",\"author\":\"E聋魍魉\",\"source\":\"XXXHolic\",\"like\":20,\"date\":\"2011.10.17 00:31:58\",\"catname\":\"Anime - 动画\",\"id\":1318782718000},\"1318782676000\":{\"hitokoto\":\"少罗嗦，你还不如虫子呢！\",\"cat\":\"a\",\"author\":\"萌朧意識\",\"source\":\"迷糊餐厅\",\"like\":20,\"date\":\"2011.10.17 00:31:16\",\"catname\":\"Anime - 动画\",\"id\":1318782676000},\"1320425511000\":{\"hitokoto\":\"梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。\",\"cat\":\"a\",\"author\":\"默默然\",\"source\":\"守护甜心\",\"like\":26,\"date\":\"2011.11.05 00:51:51\",\"catname\":\"Anime - 动画\",\"id\":1320425511000},\"1368261223000\":{\"hitokoto\":\"面对就好，去经历就好。\",\"cat\":\"a\",\"author\":\"umbrella\",\"source\":\"花伞菌\",\"like\":10,\"date\":\"2013.05.11 16:33:43\",\"catname\":\"Anime - 动画\",\"id\":1368261223000},\"1320766030000\":{\"hitokoto\":\"不相信自己的人，连努力的价值都没有。\",\"cat\":\"a\",\"author\":\"泠树\",\"source\":\"火影忍者\",\"like\":30,\"date\":\"2011.11.08 23:27:10\",\"catname\":\"Anime - 动画\",\"id\":1320766030000},\"1318782138000\":{\"hitokoto\":\"失去的东西虽然拿不回来，但是，忘记的事情是可以想起来的。\",\"cat\":\"a\",\"author\":\"星野月瞳\",\"source\":\"TOUCH\",\"like\":35,\"date\":\"2011.10.17 00:22:18\",\"catname\":\"Anime - 动画\",\"id\":1318782138000},\"1397908449866\":{\"hitokoto\":\"我很好奇！\",\"cat\":\"a\",\"author\":\"久野原\",\"source\":\"冰菓\",\"like\":7,\"date\":\"2014.04.19 19:54:09\",\"catname\":\"Anime - 动画\",\"id\":1397908449866},\"1369238506000\":{\"hitokoto\":\"人生最糟糕的事，一个是饿肚子，一个是孤独。\",\"cat\":\"a\",\"author\":\"空城”旧梦\",\"source\":\"夏日大作战\",\"like\":5,\"date\":\"2013.05.23 00:01:46\",\"catname\":\"Anime - 动画\",\"id\":1369238506000},\"1319123096000\":{\"hitokoto\":\"我并不羡慕别人的人生，这就是所谓幸福。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"幸运星\",\"like\":59,\"date\":\"2011.10.20 23:04:56\",\"catname\":\"Anime - 动画\",\"id\":1319123096000},\"1318920070000\":{\"hitokoto\":\"我不会接受我不要的未来，哪怕是命中注定。\",\"cat\":\"e\",\"author\":\"lzgsimerly\",\"source\":\"\",\"like\":32,\"date\":\"2011.10.18 14:41:10\",\"catname\":\"原创\",\"id\":1318920070000},\"1367264708000\":{\"hitokoto\":\"君生我未生，我生君已老。 君恨我生迟，我恨君生早。\",\"cat\":\"g\",\"author\":\"Sai\",\"source\":\"全唐诗续拾\",\"like\":5,\"date\":\"2013.04.30 03:45:08\",\"catname\":\"其他\",\"id\":1367264708000},\"1379503035000\":{\"hitokoto\":\"一天吐槽太多次的话，梗也是会用完的。\",\"cat\":\"a\",\"author\":\"hsk\",\"source\":\"我的脑内恋爱选项\",\"like\":9,\"date\":\"2013.09.18 19:17:15\",\"catname\":\"Anime - 动画\",\"id\":1379503035000},\"1382452204000\":{\"hitokoto\":\"All for one, one for all.\",\"cat\":\"a\",\"author\":\"青熊兽真烦人\",\"source\":\"海贼王\",\"like\":7,\"date\":\"2013.10.22 22:30:04\",\"catname\":\"Anime - 动画\",\"id\":1382452204000},\"1321185194000\":{\"hitokoto\":\"你还欠我一句对不起，可我不会再说没关系了。\",\"cat\":\"f\",\"author\":\"wxvveboss\",\"source\":\"\",\"like\":9,\"date\":\"2011.11.13 19:53:14\",\"catname\":\"来自网络\",\"id\":1321185194000},\"1370948421000\":{\"hitokoto\":\"人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人。\",\"cat\":\"a\",\"author\":\"占星术杀人魔法\",\"source\":\"进击的巨人\",\"like\":3,\"date\":\"2013.06.11 19:00:21\",\"catname\":\"Anime - 动画\",\"id\":1370948421000},\"1318782735000\":{\"hitokoto\":\"你才是⑨！你全家都是⑨！\",\"cat\":\"f\",\"author\":\"琪露诺_⑨\",\"source\":\"\",\"like\":39,\"date\":\"2011.10.17 00:32:15\",\"catname\":\"来自网络\",\"id\":1318782735000},\"1319817177000\":{\"hitokoto\":\"比起有一百个朋友，不如有个比一百人还要重要的真心朋友。\",\"cat\":\"d\",\"author\":\"Ntsume_rin\",\"source\":\"我的朋友很少\",\"like\":28,\"date\":\"2011.10.28 23:52:57\",\"catname\":\"Novel - 小说\",\"id\":1319817177000},\"1369998561000\":{\"hitokoto\":\"只有破碎的心才有伤人的棱角。\",\"cat\":\"e\",\"author\":\"岁碎叶\",\"source\":\"\",\"like\":12,\"date\":\"2013.05.31 19:09:21\",\"catname\":\"原创\",\"id\":1369998561000},\"1324011689000\":{\"hitokoto\":\"刁蛮少女贵千金，比武招亲动芳心。盼能与君长相依，结伴江湖侠侣行。\",\"cat\":\"c\",\"author\":\"赵吟风\",\"source\":\"仙剑奇侠传\",\"like\":6,\"date\":\"2011.12.16 13:01:29\",\"catname\":\"Game - 游戏\",\"id\":1324011689000},\"1318779929000\":{\"hitokoto\":\"既然如此，就再努力一次吧。别在这里愁眉不展，也不要再自欺欺人，重新来过！\",\"cat\":\"a\",\"author\":\"№1‰の薇恩\",\"source\":\"某科学的超电磁炮\",\"like\":43,\"date\":\"2011.10.16 23:45:29\",\"catname\":\"Anime - 动画\",\"id\":1318779929000},\"1318956710000\":{\"hitokoto\":\"真相只有一个！\",\"cat\":\"a\",\"author\":\"雪丶风\",\"source\":\"柯南\",\"like\":23,\"date\":\"2011.10.19 00:51:50\",\"catname\":\"Anime - 动画\",\"id\":1318956710000},\"1406104905880\":{\"hitokoto\":\"我一直以为人是慢慢变老的，其实不是，人是一瞬间变老的。\",\"cat\":\"d\",\"author\":\"優しさの猫\",\"source\":\"《舞！舞！舞！》\",\"like\":10,\"date\":\"2014.07.23 16:41:45\",\"catname\":\"Novel - 小说\",\"id\":1406104905880},\"1318782205000\":{\"hitokoto\":\"要超越过去与悲伤，用坚强和笑容去开拓明天。\",\"cat\":\"c\",\"author\":\"SD影\",\"source\":\"伊苏\",\"like\":24,\"date\":\"2011.10.17 00:23:25\",\"catname\":\"Game - 游戏\",\"id\":1318782205000},\"1412011566059\":{\"hitokoto\":\"风停之后再扬帆，船绝不会前行。\",\"cat\":\"d\",\"author\":\"c7318418\",\"source\":\"分身\",\"like\":9,\"date\":\"2014.09.30 01:26:06\",\"catname\":\"Novel - 小说\",\"id\":1412011566059},\"1319202568000\":{\"hitokoto\":\"我年轻，我傲娇。\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"\",\"like\":36,\"date\":\"2011.10.21 21:09:28\",\"catname\":\"来自网络\",\"id\":1319202568000},\"1318782073000\":{\"hitokoto\":\"H什么的最讨厌了！\",\"cat\":\"f\",\"author\":\"恶魔？天使\",\"source\":\"\",\"like\":31,\"date\":\"2011.10.17 00:21:13\",\"catname\":\"来自网络\",\"id\":1318782073000},\"1318782310000\":{\"hitokoto\":\"风筝的线你随时可以放开，只是别盼望我会回来。\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"\",\"like\":36,\"date\":\"2011.10.17 00:25:10\",\"catname\":\"来自网络\",\"id\":1318782310000},\"1318999172000\":{\"hitokoto\":\"天空是连着的，如果我们也能各自发光的话，无论距离有多远，都能看到彼此努力的身影。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"龙虎斗\",\"like\":30,\"date\":\"2011.10.19 12:39:32\",\"catname\":\"Anime - 动画\",\"id\":1318999172000},\"1374588289000\":{\"hitokoto\":\"所以，他们的祭典还没结束。\",\"cat\":\"a\",\"author\":\"阿布碳。\",\"source\":\"我的青春恋爱物语果然有问题\",\"like\":5,\"date\":\"2013.07.23 22:04:49\",\"catname\":\"Anime - 动画\",\"id\":1374588289000},\"1384237882000\":{\"hitokoto\":\"越是锐利的小刀切完东西后就越容易变钝。\",\"cat\":\"c\",\"author\":\"5454554a@2980.com\",\"source\":\"东方永夜抄\",\"like\":2,\"date\":\"2013.11.12 14:31:22\",\"catname\":\"Game - 游戏\",\"id\":1384237882000},\"1318782658000\":{\"hitokoto\":\"就算只有六十亿分之一的机会，我们还是会邂逅。\",\"cat\":\"a\",\"author\":\"灼思\",\"source\":\"Angel Beats!\",\"like\":81,\"date\":\"2011.10.17 00:30:58\",\"catname\":\"Anime - 动画\",\"id\":1318782658000},\"1400082458249\":{\"hitokoto\":\"喜欢大胸只是本能，喜欢贫乳才是审美。\",\"cat\":\"f\",\"author\":\"ShineAwesome\",\"source\":\"呃……\",\"like\":15,\"date\":\"2014.05.14 23:47:38\",\"catname\":\"来自网络\",\"id\":1400082458249},\"1370948504000\":{\"hitokoto\":\"日子过的象流水一般。它静静的从我们身边缓缓流过，不带半分声响。那些我们当年执着的人，执着的事，执着之后，却变成一种负担。\",\"cat\":\"d\",\"author\":\"占星术杀人魔法\",\"source\":\"凑合活着\",\"like\":17,\"date\":\"2013.06.11 19:01:44\",\"catname\":\"Novel - 小说\",\"id\":1370948504000},\"1319303688000\":{\"hitokoto\":\"哭泣并不能改变任何事情。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"推理之绊\",\"like\":12,\"date\":\"2011.10.23 01:14:48\",\"catname\":\"Anime - 动画\",\"id\":1319303688000},\"1318956747000\":{\"hitokoto\":\"虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。\",\"cat\":\"a\",\"author\":\"雪丶风\",\"source\":\"反叛的鲁鲁修\",\"like\":36,\"date\":\"2011.10.19 00:52:27\",\"catname\":\"Anime - 动画\",\"id\":1318956747000},\"1318781270000\":{\"hitokoto\":\"错误可不是为了别人才改的过来的，要为了自己才能改正。\",\"cat\":\"a\",\"author\":\"神之翼者\",\"source\":\"XXXHolic\",\"like\":27,\"date\":\"2011.10.17 00:07:50\",\"catname\":\"Anime - 动画\",\"id\":1318781270000},\"1340423132000\":{\"hitokoto\":\"故乡的云。上古的玉。随手的诗。十九岁的你。\",\"cat\":\"f\",\"author\":\"無い\",\"source\":\"可遇不可求的事\",\"like\":20,\"date\":\"2012.06.23 11:45:32\",\"catname\":\"来自网络\",\"id\":1340423132000},\"1395484436252\":{\"hitokoto\":\"我的腿让我停下，可是心却不允许我那么做。\",\"cat\":\"a\",\"author\":\"Sakamoto\",\"source\":\"钢之炼金术师\",\"like\":15,\"date\":\"2014.03.22 18:33:56\",\"catname\":\"Anime - 动画\",\"id\":1395484436252},\"1319300567000\":{\"hitokoto\":\"不要，我现在暂时留在他身边，直到那转瞬即逝的日子到来。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"夏目友人帐\",\"like\":22,\"date\":\"2011.10.23 00:22:47\",\"catname\":\"Anime - 动画\",\"id\":1319300567000},\"1319002171000\":{\"hitokoto\":\"比起悲伤来说，无法分享快乐这件事，要更加的寂寞吧。\",\"cat\":\"a\",\"author\":\"林志广\",\"source\":\"AIR\",\"like\":22,\"date\":\"2011.10.19 13:29:31\",\"catname\":\"Anime - 动画\",\"id\":1319002171000},\"1318870538000\":{\"hitokoto\":\"欺骗世界，欺骗最初的你。\",\"cat\":\"a\",\"author\":\"南都夜夜\",\"source\":\"Steins;Gate\",\"like\":28,\"date\":\"2011.10.18 00:55:38\",\"catname\":\"Anime - 动画\",\"id\":1318870538000},\"1318957518000\":{\"hitokoto\":\"代表月亮消灭你！\",\"cat\":\"a\",\"author\":\"edvda\",\"source\":\"美少女战士\",\"like\":28,\"date\":\"2011.10.19 01:05:18\",\"catname\":\"Anime - 动画\",\"id\":1318957518000},\"1329034235000\":{\"hitokoto\":\"你的那双手呢，是为了紧紧抓住什么而存在的哦。\",\"cat\":\"a\",\"author\":\"shijiongyuan\",\"source\":\"仰望半月的夜空\",\"like\":5,\"date\":\"2012.02.12 16:10:35\",\"catname\":\"Anime - 动画\",\"id\":1329034235000},\"1357409603000\":{\"hitokoto\":\"自己永远是孤单的，但你可以让其他人变得不孤单。\",\"cat\":\"e\",\"author\":\"Rokileng\",\"source\":\"\",\"like\":35,\"date\":\"2013.01.06 02:13:23\",\"catname\":\"原创\",\"id\":1357409603000},\"1369936213000\":{\"hitokoto\":\"做不到的话，不过就是一死 。但是，赢了就能活下去，要是不战斗就赢不了。\",\"cat\":\"a\",\"author\":\"吢月\",\"source\":\"进击的巨人\",\"like\":25,\"date\":\"2013.05.31 01:50:13\",\"catname\":\"Anime - 动画\",\"id\":1369936213000},\"1318782189000\":{\"hitokoto\":\"如果我会变成恶魔，那就随他吧。我会接受放逐，一切只为了保护她。\",\"cat\":\"c\",\"author\":\"银炎\",\"source\":\"鬼泣\",\"like\":33,\"date\":\"2011.10.17 00:23:09\",\"catname\":\"Game - 游戏\",\"id\":1318782189000},\"1319304252000\":{\"hitokoto\":\"自己的感觉，不说出来，别人也不会懂，如果不懂，就应该互相沟通。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"好想告诉你\",\"like\":53,\"date\":\"2011.10.23 01:24:12\",\"catname\":\"Anime - 动画\",\"id\":1319304252000},\"1318999096000\":{\"hitokoto\":\"我是要成为海贼王的男人！\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"海贼王\",\"like\":16,\"date\":\"2011.10.19 12:38:16\",\"catname\":\"Anime - 动画\",\"id\":1318999096000},\"1319464706000\":{\"hitokoto\":\"想要成为无论多么悲伤的时候，也能够漂亮微笑的人吧。\",\"cat\":\"d\",\"author\":\"砕月\",\"source\":\"文学少女\",\"like\":73,\"date\":\"2011.10.24 21:58:26\",\"catname\":\"Novel - 小说\",\"id\":1319464706000},\"1320586764000\":{\"hitokoto\":\"将愿望倾入不愿忘却的回忆中⋯⋯\",\"cat\":\"a\",\"author\":\"lqsasa\",\"source\":\"ef-a tale of memories\",\"like\":15,\"date\":\"2011.11.06 21:39:24\",\"catname\":\"Anime - 动画\",\"id\":1320586764000},\"1320044406000\":{\"hitokoto\":\"我只对现实世界绝望过，却未对自己绝望过！\",\"cat\":\"a\",\"author\":\"魅影陌客\",\"source\":\"只有神知道的世界\",\"like\":27,\"date\":\"2011.10.31 15:00:06\",\"catname\":\"Anime - 动画\",\"id\":1320044406000},\"1319107400000\":{\"hitokoto\":\"如果你是我该多好，那你就会知道我有多难过，多喜欢你。\",\"cat\":\"e\",\"author\":\"魔法师baby乖\",\"source\":\"\",\"like\":55,\"date\":\"2011.10.20 18:43:20\",\"catname\":\"原创\",\"id\":1319107400000},\"1395252316218\":{\"hitokoto\":\"等待，不是为了你能回来，而是找个借口不离开。\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"九ちのセカィ\",\"like\":11,\"date\":\"2014.03.20 02:05:16\",\"catname\":\"来自网络\",\"id\":1395252316218},\"1318781139000\":{\"hitokoto\":\"呐，我们好像是，被宇宙和地球拆散的恋人似的。\",\"cat\":\"a\",\"author\":\"yeyifangg\",\"source\":\"星之声\",\"like\":23,\"date\":\"2011.10.17 00:05:39\",\"catname\":\"Anime - 动画\",\"id\":1318781139000},\"1370767920000\":{\"hitokoto\":\"你为了你的正义，我为了我的正义。\",\"cat\":\"b\",\"author\":\"青媚狐\",\"source\":\"火影忍者\",\"like\":4,\"date\":\"2013.06.09 16:52:00\",\"catname\":\"Comic - 漫画\",\"id\":1370767920000},\"1321509611000\":{\"hitokoto\":\"如果你不能击败你的敌人，那么就加入他们。\",\"cat\":\"a\",\"author\":\"xi4oh4o\",\"source\":\"加菲猫\",\"like\":21,\"date\":\"2011.11.17 14:00:11\",\"catname\":\"Anime - 动画\",\"id\":1321509611000},\"1379590854000\":{\"hitokoto\":\"少年心意，一如明月松间的青石流水，那些年里看到了，却不懂。\",\"cat\":\"c\",\"author\":\"以风之名\",\"source\":\"诛仙二\",\"like\":6,\"date\":\"2013.09.19 19:40:54\",\"catname\":\"Game - 游戏\",\"id\":1379590854000},\"1387983451000\":{\"hitokoto\":\"有些人，一旦遇见，便一眼万年；有些心动，一旦开始，便覆水难收。\",\"cat\":\"f\",\"author\":\"zerokey\",\"source\":\"网络\",\"like\":21,\"date\":\"2013.12.25 22:57:31\",\"catname\":\"来自网络\",\"id\":1387983451000},\"1379155823000\":{\"hitokoto\":\"我们走过风走过雨，就是没能走进彼此的内心。\",\"cat\":\"a\",\"author\":\"漠伦\",\"source\":\"自分\",\"like\":11,\"date\":\"2013.09.14 18:50:23\",\"catname\":\"Anime - 动画\",\"id\":1379155823000},\"1320659384000\":{\"hitokoto\":\"如果你都不知道自己想去哪里，那去哪里都是一样的。\",\"cat\":\"a\",\"author\":\"Oxalis\",\"source\":\"柴郡猫\",\"like\":30,\"date\":\"2011.11.07 17:49:44\",\"catname\":\"Anime - 动画\",\"id\":1320659384000},\"1318782008000\":{\"hitokoto\":\"哼！悔改吧，你们这群死宅，人家可是身价四千万的大小姐。\",\"cat\":\"e\",\"author\":\"Sai\",\"source\":\"\",\"like\":37,\"date\":\"2011.10.17 00:20:08\",\"catname\":\"原创\",\"id\":1318782008000},\"1319303532000\":{\"hitokoto\":\"看到的感受到的永远都不会消失永远都不会忘记，与各种各样的相遇一同永存。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"夏目友人帐\",\"like\":38,\"date\":\"2011.10.23 01:12:12\",\"catname\":\"Anime - 动画\",\"id\":1319303532000},\"1377390549000\":{\"hitokoto\":\"这是傻瓜的血脉使然啊。\",\"cat\":\"d\",\"author\":\"Sumire\",\"source\":\"有顶天家族\",\"like\":7,\"date\":\"2013.08.25 08:29:09\",\"catname\":\"Novel - 小说\",\"id\":1377390549000},\"1375171578000\":{\"hitokoto\":\"因为我喜欢你，喜欢得想吃掉你啊！\",\"cat\":\"a\",\"author\":\"丶Jan\",\"source\":\"有顶天家族\",\"like\":22,\"date\":\"2013.07.30 16:06:18\",\"catname\":\"Anime - 动画\",\"id\":1375171578000},\"1318780710000\":{\"hitokoto\":\"你的心可以属于耶稣，但你的屁股永远属于陆战队！\",\"cat\":\"a\",\"author\":\"jordan2004a\",\"source\":\"魔法少女陆战队\",\"like\":30,\"date\":\"2011.10.16 23:58:30\",\"catname\":\"Anime - 动画\",\"id\":1318780710000},\"1319786732000\":{\"hitokoto\":\"魔装少女就是本少爷！\",\"cat\":\"a\",\"author\":\"零之幻想\",\"source\":\"这是僵尸吗？\",\"like\":23,\"date\":\"2011.10.28 15:25:32\",\"catname\":\"Anime - 动画\",\"id\":1319786732000},\"1321023192000\":{\"hitokoto\":\"这是眼泪吗？原来眼泪是这么的温暖，我一直以为，哀伤的东西都是冰冷的。\",\"cat\":\"c\",\"author\":\"魅影陌客\",\"source\":\"风色幻想\",\"like\":23,\"date\":\"2011.11.11 22:53:12\",\"catname\":\"Game - 游戏\",\"id\":1321023192000},\"1342005787000\":{\"hitokoto\":\"心，可是很重的。\",\"cat\":\"a\",\"author\":\"fujiyta\",\"source\":\"哈尔的移动城堡\",\"like\":37,\"date\":\"2012.07.11 19:23:07\",\"catname\":\"Anime - 动画\",\"id\":1342005787000},\"1319300197000\":{\"hitokoto\":\"就连一直都无容身之地的我⋯⋯也不是可以任意舍弃的生命。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"夏目友人帐\",\"like\":17,\"date\":\"2011.10.23 00:16:37\",\"catname\":\"Anime - 动画\",\"id\":1319300197000},\"1318782350000\":{\"hitokoto\":\"就算一次也好，我想在这颗星球上尽情奔跑。\",\"cat\":\"c\",\"author\":\"vinkey\",\"source\":\"Eden\",\"like\":40,\"date\":\"2011.10.17 00:25:50\",\"catname\":\"Game - 游戏\",\"id\":1318782350000},\"1318780676000\":{\"hitokoto\":\"此时此刻一切都是静寂的，只剩下我与你的世界，这就是爱？\",\"cat\":\"e\",\"author\":\"DgBoo\",\"source\":\"\",\"like\":15,\"date\":\"2011.10.16 23:57:56\",\"catname\":\"原创\",\"id\":1318780676000},\"1373723127000\":{\"hitokoto\":\"无论你在哪里，就算我看不见你，我也会一直注视着你。\",\"cat\":\"a\",\"author\":\"龙猫龙猫龙猫你好傻\",\"source\":\"妖精的尾巴\",\"like\":13,\"date\":\"2013.07.13 21:45:27\",\"catname\":\"Anime - 动画\",\"id\":1373723127000},\"1423982140990\":{\"hitokoto\":\"走路太骚必摔跤，得瑟过劲会闪腰。\",\"cat\":\"f\",\"author\":\"木风\",\"source\":\"～\",\"like\":0,\"date\":\"2015.02.15 14:35:40\",\"catname\":\"来自网络\",\"id\":1423982140990},\"1318781291000\":{\"hitokoto\":\"下一次重逢，将是何年何月？天空必将见证。\",\"cat\":\"a\",\"author\":\"掌中tiger\",\"source\":\"SOLA\",\"like\":49,\"date\":\"2011.10.17 00:08:11\",\"catname\":\"Anime - 动画\",\"id\":1318781291000},\"1322284624000\":{\"hitokoto\":\"就算是沉落地面的太阳，只要夜晚过了一定会再度升起，不管有什么痛苦或难过的事，跟今天截然不同的明天也一定会到来。\",\"cat\":\"d\",\"author\":\"三酱\",\"source\":\"文学少女\",\"like\":36,\"date\":\"2011.11.26 13:17:04\",\"catname\":\"Novel - 小说\",\"id\":1322284624000},\"1318781000000\":{\"hitokoto\":\"你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"银魂\",\"like\":29,\"date\":\"2011.10.17 00:03:20\",\"catname\":\"Anime - 动画\",\"id\":1318781000000},\"1318781088000\":{\"hitokoto\":\"龙儿是我的，谁都不准碰！\",\"cat\":\"a\",\"author\":\"游啊游の猪\",\"source\":\"龙虎斗\",\"like\":52,\"date\":\"2011.10.17 00:04:48\",\"catname\":\"Anime - 动画\",\"id\":1318781088000},\"1318956647000\":{\"hitokoto\":\"我们所过的每个平凡的日常，也许就是连续发生的奇迹。\",\"cat\":\"a\",\"author\":\"桜花幻影\",\"source\":\"日常\",\"like\":64,\"date\":\"2011.10.19 00:50:47\",\"catname\":\"Anime - 动画\",\"id\":1318956647000},\"1375120649000\":{\"hitokoto\":\"胸不平何以平天下，乳不巨何以聚人心。\",\"cat\":\"f\",\"author\":\"天使の心跳\",\"source\":\"网络\",\"like\":8,\"date\":\"2013.07.30 01:57:29\",\"catname\":\"来自网络\",\"id\":1375120649000},\"1321781378000\":{\"hitokoto\":\"你有学校也有朋友，但对我来说，我的生活中就只有你。\",\"cat\":\"d\",\"author\":\"Natsume_rin\",\"source\":\"我与狗狗的十个约定\",\"like\":18,\"date\":\"2011.11.20 17:29:38\",\"catname\":\"Novel - 小说\",\"id\":1321781378000},\"1319303883000\":{\"hitokoto\":\"别人恋爱不成功，你连暗恋都不成功！\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"灌篮高手\",\"like\":47,\"date\":\"2011.10.23 01:18:03\",\"catname\":\"Anime - 动画\",\"id\":1319303883000},\"1324526556000\":{\"hitokoto\":\"你会梦游，我会磨牙，我们晚上一起去吓人吧！\",\"cat\":\"e\",\"author\":\"一萍敌敌畏\",\"source\":\"\",\"like\":21,\"date\":\"2011.12.22 12:02:36\",\"catname\":\"原创\",\"id\":1324526556000},\"1319621625000\":{\"hitokoto\":\"像平常的你一样引发奇迹吧-\",\"cat\":\"a\",\"author\":\"ludk60\",\"source\":\"魔法少女小圆\",\"like\":16,\"date\":\"2011.10.26 17:33:45\",\"catname\":\"Anime - 动画\",\"id\":1319621625000},\"1379294407000\":{\"hitokoto\":\"我觉得，我这辈子最灿烂的笑容，大概都奉献给我电脑屏幕了。\",\"cat\":\"f\",\"author\":\"萌花残\",\"source\":\"bilibili\",\"like\":37,\"date\":\"2013.09.16 09:20:07\",\"catname\":\"来自网络\",\"id\":1379294407000},\"1375073129000\":{\"hitokoto\":\"十步做一死，千里不留行，事了拂衣去，深藏功与名~\",\"cat\":\"a\",\"author\":\"Lozye\",\"source\":\"侠客行\",\"like\":20,\"date\":\"2013.07.29 12:45:29\",\"catname\":\"Anime - 动画\",\"id\":1375073129000},\"1319303570000\":{\"hitokoto\":\"我想让自己强大起来，因为至少我已经有幸和想要保护的人相遇了。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"夏目友人帐\",\"like\":38,\"date\":\"2011.10.23 01:12:50\",\"catname\":\"Anime - 动画\",\"id\":1319303570000},\"1370006228000\":{\"hitokoto\":\"为错误停驻是件可悲的事。\",\"cat\":\"e\",\"author\":\"LastFairy\",\"source\":\"\",\"like\":21,\"date\":\"2013.05.31 21:17:08\",\"catname\":\"原创\",\"id\":1370006228000},\"1322284754000\":{\"hitokoto\":\"患了中二病，等于有了一种信仰。\",\"cat\":\"f\",\"author\":\"三酱\",\"source\":\"\",\"like\":36,\"date\":\"2011.11.26 13:19:14\",\"catname\":\"来自网络\",\"id\":1322284754000},\"1319288243000\":{\"hitokoto\":\"我们的夏天仍未结束。\",\"cat\":\"a\",\"author\":\"新月\",\"source\":\"王牌投手\",\"like\":15,\"date\":\"2011.10.22 20:57:23\",\"catname\":\"Anime - 动画\",\"id\":1319288243000},\"1318782100000\":{\"hitokoto\":\"谎言不一定是谎言，被发现的谎言，才算是谎言。\",\"cat\":\"c\",\"author\":\"坏坏的微笑\",\"source\":\"秋之回忆\",\"like\":37,\"date\":\"2011.10.17 00:21:40\",\"catname\":\"Game - 游戏\",\"id\":1318782100000},\"1381845791000\":{\"hitokoto\":\"小孩子看了根本把持不住！\",\"cat\":\"e\",\"author\":\"李狗蛋儿\",\"source\":\"\",\"like\":6,\"date\":\"2013.10.15 22:03:11\",\"catname\":\"原创\",\"id\":1381845791000},\"1367158739000\":{\"hitokoto\":\"若隐若现才是艺术！\",\"cat\":\"a\",\"author\":\"言叶\",\"source\":\"问题儿童来自异世界\",\"like\":12,\"date\":\"2013.04.28 22:18:59\",\"catname\":\"Anime - 动画\",\"id\":1367158739000},\"1397308397446\":{\"hitokoto\":\"世界这么大，人生这么长，总会有那么一个人，让你想要温柔的对待。\",\"cat\":\"a\",\"author\":\"anythink\",\"source\":\"哈尔的移动城堡\",\"like\":3,\"date\":\"2014.04.12 21:13:17\",\"catname\":\"Anime - 动画\",\"id\":1397308397446},\"1320171553000\":{\"hitokoto\":\"当朋友是不需要什么资格的。\",\"cat\":\"a\",\"author\":\"绤谷少年。\",\"source\":\"全职猎人\",\"like\":31,\"date\":\"2011.11.02 02:19:13\",\"catname\":\"Anime - 动画\",\"id\":1320171553000},\"1318782264000\":{\"hitokoto\":\"如果你执意追寻着我的幻影，总有一天会被真正的我打败。\",\"cat\":\"a\",\"author\":\"炎羽\",\"source\":\"棋魂\",\"like\":20,\"date\":\"2011.10.17 00:24:24\",\"catname\":\"Anime - 动画\",\"id\":1318782264000},\"1319283998000\":{\"hitokoto\":\"“你没车没房没卡,拿什么和我谈恋爱？”“......我有高达......”\",\"cat\":\"e\",\"author\":\"弄它\",\"source\":\"gundam\",\"like\":293,\"date\":\"2011.10.22 19:46:38\",\"catname\":\"原创\",\"id\":1319283998000},\"1323606216000\":{\"hitokoto\":\"二次元什么的我本来是不感冒的，直到我的膝盖中了一箭。\",\"cat\":\"f\",\"author\":\"智代有爱\",\"source\":\"\",\"like\":15,\"date\":\"2011.12.11 20:23:36\",\"catname\":\"来自网络\",\"id\":1323606216000},\"1414559336903\":{\"hitokoto\":\"我敬你是条汉子！\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"论如何回答女友问题“你为什么对我这么好”\",\"like\":4,\"date\":\"2014.10.29 13:08:56\",\"catname\":\"来自网络\",\"id\":1414559336903},\"1318780656000\":{\"hitokoto\":\"只要微笑就可以了。\",\"cat\":\"a\",\"author\":\"卍谷\",\"source\":\"EVA\",\"like\":28,\"date\":\"2011.10.16 23:57:36\",\"catname\":\"Anime - 动画\",\"id\":1318780656000},\"1319974786000\":{\"hitokoto\":\"重要的不是你做了多少事，而是你放了多少心思进去。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"凉宫春日的忧郁\",\"like\":20,\"date\":\"2011.10.30 19:39:46\",\"catname\":\"Anime - 动画\",\"id\":1319974786000},\"1319299625000\":{\"hitokoto\":\"如果还有来生 ，我无论如何都要来到你身边，我已经没有了其他想要追求的东西，因为没有比你更重要的了。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"秒速五厘米\",\"like\":52,\"date\":\"2011.10.23 00:07:05\",\"catname\":\"Anime - 动画\",\"id\":1319299625000},\"1319025587000\":{\"hitokoto\":\"就是因为抱有不现实的理想，所以才总是做出如此极端的事情！\",\"cat\":\"a\",\"author\":\"言靈\",\"source\":\"逆袭的夏亚\",\"like\":25,\"date\":\"2011.10.19 19:59:47\",\"catname\":\"Anime - 动画\",\"id\":1319025587000},\"1355272000000\":{\"hitokoto\":\"用番茄Lu过…比香蕉好←那是你没领悟到香蕉的正确用法\",\"cat\":\"a\",\"author\":\"Lust·Sloth\",\"source\":\"樱花庒的宠物女孩 10 B站弹幕\",\"like\":12,\"date\":\"2012.12.12 08:26:40\",\"catname\":\"Anime - 动画\",\"id\":1355272000000},\"1396631559789\":{\"hitokoto\":\"有些事情我不看透，不是我笨，只是我太善良。\",\"cat\":\"a\",\"author\":\"岛音。\",\"source\":\"樱桃小丸子\",\"like\":5,\"date\":\"2014.04.05 01:12:39\",\"catname\":\"Anime - 动画\",\"id\":1396631559789},\"1318780900000\":{\"hitokoto\":\"我的终点，与幸福同在。\",\"cat\":\"a\",\"author\":\"掌中tiger\",\"source\":\"AIR\",\"like\":26,\"date\":\"2011.10.17 00:01:40\",\"catname\":\"Anime - 动画\",\"id\":1318780900000},\"1322366316000\":{\"hitokoto\":\"我愿意给你自己所有的快乐，你愿意分担我一半的难过吗？\",\"cat\":\"e\",\"author\":\"getweb\",\"source\":\"\",\"like\":26,\"date\":\"2011.11.27 11:58:36\",\"catname\":\"原创\",\"id\":1322366316000},\"1371428305000\":{\"hitokoto\":\"其实，恋爱这种东西，当你看上人家的那一刹那就已经失败了。\",\"cat\":\"a\",\"author\":\"LT2142\",\"source\":\"秋之回忆\",\"like\":19,\"date\":\"2013.06.17 08:18:25\",\"catname\":\"Anime - 动画\",\"id\":1371428305000},\"1319805189000\":{\"hitokoto\":\"我能够允许你逃避过去，不过至少从现在或者明天开始都不要再逃避。\",\"cat\":\"a\",\"author\":\"魅影陌客\",\"source\":\"无头骑士异闻录\",\"like\":53,\"date\":\"2011.10.28 20:33:09\",\"catname\":\"Anime - 动画\",\"id\":1319805189000},\"1375438803000\":{\"hitokoto\":\"男人许下的诺言就一定要遵守。\",\"cat\":\"a\",\"author\":\"南瓜酱\",\"source\":\"海贼王\",\"like\":5,\"date\":\"2013.08.02 18:20:03\",\"catname\":\"Anime - 动画\",\"id\":1375438803000},\"1395252134111\":{\"hitokoto\":\"如果分手的恋人还能做朋友，要不从没爱过，要不还在爱着。\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"九ちのセカィ\",\"like\":7,\"date\":\"2014.03.20 02:02:14\",\"catname\":\"来自网络\",\"id\":1395252134111},\"1373442235000\":{\"hitokoto\":\"生活中若没有朋友，就像生活中没有阳光一样。\",\"cat\":\"f\",\"author\":\"能美\",\"source\":\"网络\",\"like\":5,\"date\":\"2013.07.10 15:43:55\",\"catname\":\"来自网络\",\"id\":1373442235000},\"1417109520238\":{\"hitokoto\":\"（根据相关法律法规，相关内容已被屏蔽。）\",\"cat\":\"f\",\"author\":\"地球好闪亮\",\"source\":\"（根据相关法律法规，相关内容已被屏蔽。）\",\"like\":13,\"date\":\"2014.11.28 01:32:00\",\"catname\":\"来自网络\",\"id\":1417109520238},\"1319276997000\":{\"hitokoto\":\"旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。\",\"cat\":\"a\",\"author\":\"立花纹\",\"source\":\"狼与香辛料\",\"like\":26,\"date\":\"2011.10.22 17:49:57\",\"catname\":\"Anime - 动画\",\"id\":1319276997000},\"1319854734000\":{\"hitokoto\":\"黑暗不能驱除黑暗，只有光明可以做到；仇恨不能驱除仇恨，只有爱可以做到。\",\"cat\":\"f\",\"author\":\"Avatien\",\"source\":\"\",\"like\":17,\"date\":\"2011.10.29 10:18:54\",\"catname\":\"来自网络\",\"id\":1319854734000},\"1318998977000\":{\"hitokoto\":\"我会跟她结婚，并不是因为她是计算机，而是因为她就是她。同样的，我会喜欢你，也是因为你就是你。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"人型电脑天使心\",\"like\":24,\"date\":\"2011.10.19 12:36:17\",\"catname\":\"Anime - 动画\",\"id\":1318998977000},\"1401290783870\":{\"hitokoto\":\"既然认准这条路，何必去打听要走多久。\",\"cat\":\"f\",\"author\":\"friend131995\",\"source\":\"来自网络\",\"like\":4,\"date\":\"2014.05.28 23:26:23\",\"catname\":\"来自网络\",\"id\":1401290783870},\"1323606650000\":{\"hitokoto\":\"不要把你所遭遇的苦难看得太大，更不要把你所拥有的幸福看得太少。\",\"cat\":\"e\",\"author\":\"月咏亚斗\",\"source\":\"\",\"like\":13,\"date\":\"2011.12.11 20:30:50\",\"catname\":\"原创\",\"id\":1323606650000},\"1374406576000\":{\"hitokoto\":\"研表究明，汉字的序顺并不定一能影阅响读，比如当你看完这句话后，才发这现里的字全是都乱的。\",\"cat\":\"f\",\"author\":\"吾乃外星人\",\"source\":\"\",\"like\":28,\"date\":\"2013.07.21 19:36:16\",\"catname\":\"来自网络\",\"id\":1374406576000},\"1387983353000\":{\"hitokoto\":\"既然认准这条路，何必去打听要走多久。\",\"cat\":\"f\",\"author\":\"zerokey\",\"source\":\"网络\",\"like\":3,\"date\":\"2013.12.25 22:55:53\",\"catname\":\"来自网络\",\"id\":1387983353000},\"1321785422000\":{\"hitokoto\":\"人总是会变的，不要害怕改变哦。\",\"cat\":\"c\",\"author\":\"幻、天使\",\"source\":\"秋之回忆\",\"like\":11,\"date\":\"2011.11.20 18:37:02\",\"catname\":\"Game - 游戏\",\"id\":1321785422000},\"1318776323000\":{\"hitokoto\":\"有被杀的觉悟，才有资格开枪。\",\"cat\":\"a\",\"author\":\"SweatHeart\",\"source\":\"反叛的鲁路修\",\"like\":46,\"date\":\"2011.10.16 22:45:23\",\"catname\":\"Anime - 动画\",\"id\":1318776323000},\"1319003541000\":{\"hitokoto\":\"知道活着的痛苦处的人就能对人温柔，这和软弱是不一样的。\",\"cat\":\"a\",\"author\":\"林志广\",\"source\":\"eva\",\"like\":65,\"date\":\"2011.10.19 13:52:21\",\"catname\":\"Anime - 动画\",\"id\":1319003541000},\"1319032359000\":{\"hitokoto\":\"没有谁能够永远坚强下去的，每个人都会有疲累的无法站起的时候。世间的故事，就是为了这一刻而存在的哦。\",\"cat\":\"a\",\"author\":\"遥かな日々\",\"source\":\"文学少女\",\"like\":15,\"date\":\"2011.10.19 21:52:39\",\"catname\":\"Anime - 动画\",\"id\":1319032359000},\"1372329042000\":{\"hitokoto\":\"我的小伙伴们都惊呆了！\",\"cat\":\"f\",\"author\":\"矢野加奈\",\"source\":\"\",\"like\":4,\"date\":\"2013.06.27 18:30:42\",\"catname\":\"来自网络\",\"id\":1372329042000},\"1321573151000\":{\"hitokoto\":\"和哥哥的便当比起来夜空的薯片就像大便一样！只会给我大便的大便夜空是笨蛋～笨蛋～\",\"cat\":\"a\",\"author\":\"初语\",\"source\":\"我的朋友很少\",\"like\":29,\"date\":\"2011.11.18 07:39:11\",\"catname\":\"Anime - 动画\",\"id\":1321573151000},\"1408473594080\":{\"hitokoto\":\"一直注视着你，似近似远，总是触碰不到。\",\"cat\":\"a\",\"author\":\"Dadicatus545\",\"source\":\"来自风平浪静的明天\",\"like\":2,\"date\":\"2014.08.20 02:39:54\",\"catname\":\"Anime - 动画\",\"id\":1408473594080},\"1393140285756\":{\"hitokoto\":\"情深不寿，强极则辱，谦谦君子，温润如玉。\",\"cat\":\"d\",\"author\":\"Hubert\",\"source\":\"书剑恩仇录\",\"like\":2,\"date\":\"2014.02.23 15:24:45\",\"catname\":\"Novel - 小说\",\"id\":1393140285756},\"1391663766000\":{\"hitokoto\":\"心之所愿，无所不成。\",\"cat\":\"f\",\"author\":\"漠伦\",\"source\":\"网络\",\"like\":7,\"date\":\"2014.02.06 13:16:06\",\"catname\":\"来自网络\",\"id\":1391663766000},\"1378006337000\":{\"hitokoto\":\"所谓的言语，只有当对方听进去了才开始有意义啊。\",\"cat\":\"a\",\"author\":\"alwaysandforever\",\"source\":\"少年同盟\",\"like\":3,\"date\":\"2013.09.01 11:32:17\",\"catname\":\"Anime - 动画\",\"id\":1378006337000},\"1395252153608\":{\"hitokoto\":\"记性太好，有时候是一种负担。容易忘记往事的人，是幸福的。\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"九ちのセカィ\",\"like\":6,\"date\":\"2014.03.20 02:02:33\",\"catname\":\"来自网络\",\"id\":1395252153608},\"1319304304000\":{\"hitokoto\":\"今后无论发生什么事也好，这个左手上的⋯⋯都是同伴的记号！\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"海贼王\",\"like\":18,\"date\":\"2011.10.23 01:25:04\",\"catname\":\"Anime - 动画\",\"id\":1319304304000},\"1367209246000\":{\"hitokoto\":\"我不是萝莉控，是妹控啊！\",\"cat\":\"a\",\"author\":\"梁钲恒\",\"source\":\"我的妹妹不可能那么可爱第二季\",\"like\":11,\"date\":\"2013.04.29 12:20:46\",\"catname\":\"Anime - 动画\",\"id\":1367209246000},\"1342929721000\":{\"hitokoto\":\"我从小就害怕虫子\",\"cat\":\"g\",\"author\":\"firo\",\"source\":\"小小闲\",\"like\":12,\"date\":\"2012.07.22 12:02:01\",\"catname\":\"其他\",\"id\":1342929721000},\"1319975151000\":{\"hitokoto\":\"爱,其实很简单，困难的是去接受它。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"通灵王\",\"like\":18,\"date\":\"2011.10.30 19:45:51\",\"catname\":\"Anime - 动画\",\"id\":1319975151000},\"1396799662079\":{\"hitokoto\":\"弱小和无知不是生存的障碍，傲慢才是。\",\"cat\":\"d\",\"author\":\"kaomao\",\"source\":\"三体\",\"like\":1,\"date\":\"2014.04.06 23:54:22\",\"catname\":\"Novel - 小说\",\"id\":1396799662079},\"1320921648000\":{\"hitokoto\":\"看似美好的东西，往往藏着陷阱。\",\"cat\":\"a\",\"author\":\"紫月岚\",\"source\":\"只有神知道的世界\",\"like\":25,\"date\":\"2011.11.10 18:40:48\",\"catname\":\"Anime - 动画\",\"id\":1320921648000},\"1382452042000\":{\"hitokoto\":\"人一生会遇到约2920万人，两个人相爱的概率是0.000049。所以你不爱我，我不怪你。\",\"cat\":\"a\",\"author\":\"青熊兽真烦人\",\"source\":\"秒速五厘米\",\"like\":27,\"date\":\"2013.10.22 22:27:22\",\"catname\":\"Anime - 动画\",\"id\":1382452042000},\"1374457132000\":{\"hitokoto\":\"我的愿望是—幸福地活着，幸福地死去。\",\"cat\":\"a\",\"author\":\"19920214\",\"source\":\"神不在的星期天\",\"like\":7,\"date\":\"2013.07.22 09:38:52\",\"catname\":\"Anime - 动画\",\"id\":1374457132000},\"1321526919000\":{\"hitokoto\":\"邂逅本身，就是一种奇迹啊。\",\"cat\":\"a\",\"author\":\"以风之名\",\"source\":\"游魂\",\"like\":12,\"date\":\"2011.11.17 18:48:39\",\"catname\":\"Anime - 动画\",\"id\":1321526919000},\"1318780595000\":{\"hitokoto\":\"挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力⋯⋯\",\"cat\":\"a\",\"author\":\"zjl4835751\",\"source\":\"秒速五厘米\",\"like\":62,\"date\":\"2011.10.16 23:56:35\",\"catname\":\"Anime - 动画\",\"id\":1318780595000},\"1318782470000\":{\"hitokoto\":\"24岁的阿升你好，我是15岁的美加子，我现在也还是非常、非常的喜欢阿升哦！\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"星之声\",\"like\":26,\"date\":\"2011.10.17 00:27:50\",\"catname\":\"Anime - 动画\",\"id\":1318782470000},\"1319974911000\":{\"hitokoto\":\"别人说的记在脑袋里，而自己的，则放在心里。\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"\",\"like\":25,\"date\":\"2011.10.30 19:41:51\",\"catname\":\"来自网络\",\"id\":1319974911000},\"1373193656000\":{\"hitokoto\":\"臣妾做不到啊~\",\"cat\":\"g\",\"author\":\"mlmtmfz\",\"source\":\"甄嬛传\",\"like\":7,\"date\":\"2013.07.07 18:40:56\",\"catname\":\"其他\",\"id\":1373193656000},\"1374146112000\":{\"hitokoto\":\"我有在反省，但我不后悔。\",\"cat\":\"a\",\"author\":\"billykingzero\",\"source\":\"物语系列\",\"like\":14,\"date\":\"2013.07.18 19:15:12\",\"catname\":\"Anime - 动画\",\"id\":1374146112000},\"1397308818349\":{\"hitokoto\":\"如果我不会飞，那我就只是一只普通的猪。\",\"cat\":\"a\",\"author\":\"anythink\",\"source\":\"红猪\",\"like\":0,\"date\":\"2014.04.12 21:20:18\",\"catname\":\"Anime - 动画\",\"id\":1397308818349},\"1371028347000\":{\"hitokoto\":\"我如朝露降人间，和风樱花随春谢。四十九年一朝梦，一期荣华一杯酒。\",\"cat\":\"d\",\"author\":\"缩叶子\",\"source\":\"上杉谦信\",\"like\":8,\"date\":\"2013.06.12 17:12:27\",\"catname\":\"Novel - 小说\",\"id\":1371028347000},\"1318782369000\":{\"hitokoto\":\"我在未来等你。\",\"cat\":\"a\",\"author\":\"库腐腐\",\"source\":\"穿越时空的少女\",\"like\":14,\"date\":\"2011.10.17 00:26:09\",\"catname\":\"Anime - 动画\",\"id\":1318782369000},\"1374139164000\":{\"hitokoto\":\"生我何用？不能欢笑。灭我何用？不减狂骄。\",\"cat\":\"d\",\"author\":\"kaomao\",\"source\":\"悟空传\",\"like\":12,\"date\":\"2013.07.18 17:19:24\",\"catname\":\"Novel - 小说\",\"id\":1374139164000},\"1318780471000\":{\"hitokoto\":\"XX什么的，最讨厌了！\",\"cat\":\"f\",\"author\":\"kira0769\",\"source\":\"\",\"like\":17,\"date\":\"2011.10.16 23:54:31\",\"catname\":\"来自网络\",\"id\":1318780471000},\"1319376641000\":{\"hitokoto\":\"少女祈祷中⋯⋯\",\"cat\":\"c\",\"author\":\"qqa623582347\",\"source\":\"东方project\",\"like\":46,\"date\":\"2011.10.23 21:30:41\",\"catname\":\"Game - 游戏\",\"id\":1319376641000},\"1368110784000\":{\"hitokoto\":\"阳光灼热，数不尽夏日繁华；蝉鸣幽幽，道不完苦辣酸甜。\",\"cat\":\"d\",\"author\":\"qq745840496\",\"source\":\"危险同居人\",\"like\":16,\"date\":\"2013.05.09 22:46:24\",\"catname\":\"Novel - 小说\",\"id\":1368110784000},\"1415536802891\":{\"hitokoto\":\"微风摇曳着窗帘，夕阳斜射入教室，在那里鼓起勇气告白的少年。即使现在也能清晰地回想起她的声音「当朋友，不行吗？」\",\"cat\":\"a\",\"author\":\"retaker\",\"source\":\"果然我的青春恋爱喜剧搞错了\",\"like\":9,\"date\":\"2014.11.09 20:40:02\",\"catname\":\"Anime - 动画\",\"id\":1415536802891},\"1319277064000\":{\"hitokoto\":\"廉价的自尊、粗劣的傲气，无论哪个后生小辈都很重视这些东西。\",\"cat\":\"a\",\"author\":\"立花纹\",\"source\":\"狼与香辛料\",\"like\":24,\"date\":\"2011.10.22 17:51:04\",\"catname\":\"Anime - 动画\",\"id\":1319277064000},\"1318780206000\":{\"hitokoto\":\"你知道雪为什么是白色的吗？因为她忘记了本来的颜色。\",\"cat\":\"a\",\"author\":\"掌中tiger\",\"source\":\"反叛的鲁路修\",\"like\":62,\"date\":\"2011.10.16 23:50:06\",\"catname\":\"Anime - 动画\",\"id\":1318780206000},\"1319304479000\":{\"hitokoto\":\"一天最大任务莫过于，好好睡觉，好好醒来。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"火影忍者\",\"like\":15,\"date\":\"2011.10.23 01:27:59\",\"catname\":\"Anime - 动画\",\"id\":1319304479000},\"1318780840000\":{\"hitokoto\":\"从一开始，我就不那么喜欢你。\",\"cat\":\"c\",\"author\":\"隐之鱼\",\"source\":\"秋之回忆\",\"like\":31,\"date\":\"2011.10.17 00:00:40\",\"catname\":\"Game - 游戏\",\"id\":1318780840000},\"1395252571723\":{\"hitokoto\":\"最终让你难以忘怀的，并不是某个谁，而是当初为之倾心，不顾一切的自己。\",\"cat\":\"f\",\"author\":\"Sai\",\"source\":\"九ちのセカィ\",\"like\":11,\"date\":\"2014.03.20 02:09:31\",\"catname\":\"来自网络\",\"id\":1395252571723},\"1318919561000\":{\"hitokoto\":\"生活就像愤怒的小鸟，失败后总有几只猪在笑。\",\"cat\":\"f\",\"author\":\"yudezhuixun\",\"source\":\"\",\"like\":14,\"date\":\"2011.10.18 14:32:41\",\"catname\":\"来自网络\",\"id\":1318919561000},\"1318780949000\":{\"hitokoto\":\"我觉得你很幸福，因为你可以选择爱我或不爱我，而我只能选择爱你或更爱你。\",\"cat\":\"a\",\"author\":\"天與地的巡禮\",\"source\":\"School Days\",\"like\":53,\"date\":\"2011.10.17 00:02:29\",\"catname\":\"Anime - 动画\",\"id\":1318780949000},\"1319687444000\":{\"hitokoto\":\"文能提笔控萝莉，武能床上定人妻。进可欺身压正太，退能提臀迎众基。\",\"cat\":\"g\",\"author\":\"Wesion\",\"source\":\"\",\"like\":99,\"date\":\"2011.10.27 11:50:44\",\"catname\":\"其他\",\"id\":1319687444000},\"1321546211000\":{\"hitokoto\":\"已经无法回到过去了。也不知道将来会是什么模样。\",\"cat\":\"a\",\"author\":\"万至阳\",\"source\":\"文学少女\",\"like\":14,\"date\":\"2011.11.18 00:10:11\",\"catname\":\"Anime - 动画\",\"id\":1321546211000},\"1318782117000\":{\"hitokoto\":\"记得当时年纪小，你爱卖萌我爱笑。\",\"cat\":\"f\",\"author\":\"ssc1355\",\"source\":\"\",\"like\":20,\"date\":\"2011.10.17 00:21:57\",\"catname\":\"来自网络\",\"id\":1318782117000},\"1379055996000\":{\"hitokoto\":\"正义不会因为无人歌颂而变成非议。\",\"cat\":\"d\",\"author\":\"苍之轨迹\",\"source\":\"阿亚罗克年代记\",\"like\":4,\"date\":\"2013.09.13 15:06:36\",\"catname\":\"Novel - 小说\",\"id\":1379055996000},\"1319025338000\":{\"hitokoto\":\"夹在我女友与前女友与青梅竹马间的果然是修罗场！\",\"cat\":\"d\",\"author\":\"萧\",\"source\":\"夹在我女友与青梅竹马间的各种修罗场\",\"like\":17,\"date\":\"2011.10.19 19:55:38\",\"catname\":\"Novel - 小说\",\"id\":1319025338000},\"1318782051000\":{\"hitokoto\":\"美丽的不是这个世界，而是看世界的你的眼神。\",\"cat\":\"a\",\"author\":\"燿燿\",\"source\":\"吸血鬼骑士\",\"like\":15,\"date\":\"2011.10.17 00:20:51\",\"catname\":\"Anime - 动画\",\"id\":1318782051000},\"1319002425000\":{\"hitokoto\":\"所谓的人类，可是连短短的十分钟也等不起的。\",\"cat\":\"a\",\"author\":\"林志广\",\"source\":\"Angel Beats!\",\"like\":30,\"date\":\"2011.10.19 13:33:45\",\"catname\":\"Anime - 动画\",\"id\":1319002425000},\"1375261045000\":{\"hitokoto\":\"虽有遗憾，并无后悔。\",\"cat\":\"c\",\"author\":\"_SCarLet\",\"source\":\"古剑奇谭\",\"like\":11,\"date\":\"2013.07.31 16:57:25\",\"catname\":\"Game - 游戏\",\"id\":1375261045000},\"1319975276000\":{\"hitokoto\":\"即使从梦中醒来，还会有回忆留下。\",\"cat\":\"a\",\"author\":\"Sai\",\"source\":\"AIR\",\"like\":35,\"date\":\"2011.10.30 19:47:56\",\"catname\":\"Anime - 动画\",\"id\":1319975276000},\"1366551368000\":{\"hitokoto\":\"请叫我女王大人~\",\"cat\":\"f\",\"author\":\"Zhao.small\",\"source\":\"十万个冷笑话\",\"like\":11,\"date\":\"2013.04.21 21:36:08\",\"catname\":\"来自网络\",\"id\":1366551368000},\"1318781891000\":{\"hitokoto\":\"生活就像超级女生，走到最后的都是纯爷们。\",\"cat\":\"f\",\"author\":\"X\",\"source\":\"\",\"like\":34,\"date\":\"2011.10.17 00:18:11\",\"catname\":\"来自网络\",\"id\":1318781891000},\"1396968527210\":{\"hitokoto\":\"桑丘，让他们管我叫疯子吧，我还疯得不够，所以得不到他们的赞许。\",\"cat\":\"d\",\"author\":\"l863921044\",\"source\":\"堂吉诃德\",\"like\":4,\"date\":\"2014.04.08 22:48:47\",\"catname\":\"Novel - 小说\",\"id\":1396968527210},\"1319039074000\":{\"hitokoto\":\"可是就算我们通一千次短信，我们各自的心，大概也只会相互靠近一厘米吧。\",\"cat\":\"a\",\"author\":\"西泽空\",\"source\":\"秒速5厘米\",\"like\":55,\"date\":\"2011.10.19 23:44:34\",\"catname\":\"Anime - 动画\",\"id\":1319039074000},\"1382451948000\":{\"hitokoto\":\"不会停的雨的确存在，但是撑起伞来就行了，接下来抬起头前进，这样一来，偶尔会出现下着太阳雨的日子，经过阳光的反射闪闪发亮的雨滴，一定非常美丽。\",\"cat\":\"d\",\"author\":\"青熊兽真烦人\",\"source\":\"秋之回忆Memories Off\",\"like\":12,\"date\":\"2013.10.22 22:25:48\",\"catname\":\"Novel - 小说\",\"id\":1382451948000},\"1318781332000\":{\"hitokoto\":\"前天是小兔子，昨天是小鹿，今天是你。\",\"cat\":\"a\",\"author\":\"和你说88\",\"source\":\"CLANNAD\",\"like\":83,\"date\":\"2011.10.17 00:08:52\",\"catname\":\"Anime - 动画\",\"id\":1318781332000},\"1369238556000\":{\"hitokoto\":\"就是因为你不好，才要留在你身边，给你幸福。\",\"cat\":\"a\",\"author\":\"空城”旧梦\",\"source\":\"哈尔的移动城堡\",\"like\":4,\"date\":\"2013.05.23 00:02:36\",\"catname\":\"Anime - 动画\",\"id\":1369238556000},\"1369475607000\":{\"hitokoto\":\"什么都无法舍弃的人，什么都无法改变 。\",\"cat\":\"a\",\"author\":\"空城‘’旧梦\",\"source\":\"进击的巨人\",\"like\":11,\"date\":\"2013.05.25 17:53:27\",\"catname\":\"Anime - 动画\",\"id\":1369475607000},\"1318919532000\":{\"hitokoto\":\"流浪去吧，总会在世界的一角找到愿意懂你的人。\",\"cat\":\"f\",\"author\":\"xuduoyu17\",\"source\":\"几米\",\"like\":30,\"date\":\"2011.10.18 14:32:12\",\"catname\":\"来自网络\",\"id\":1318919532000},\"1344085253000\":{\"hitokoto\":\"用我一生，换你十年天真无邪。\",\"cat\":\"d\",\"author\":\"秦木\",\"source\":\"盗墓笔记\",\"like\":16,\"date\":\"2012.08.04 21:00:53\",\"catname\":\"Novel - 小说\",\"id\":1344085253000},\"1320492049000\":{\"hitokoto\":\"你永远是我唯爱旅行中名为秘密的起点站。\",\"cat\":\"d\",\"author\":\"Samurai\",\"source\":\"绘心\",\"like\":17,\"date\":\"2011.11.05 19:20:49\",\"catname\":\"Novel - 小说\",\"id\":1320492049000},\"1336794697000\":{\"hitokoto\":\"无论是丢下还是被丢下，都是一样痛苦的。\",\"cat\":\"f\",\"author\":\"锡了个纸\",\"source\":\"\",\"like\":25,\"date\":\"2012.05.12 11:51:37\",\"catname\":\"来自网络\",\"id\":1336794697000},\"1318957281000\":{\"hitokoto\":\"只是，想要做些什么而已。 觉得不做些什么就会死掉而已。\",\"cat\":\"d\",\"author\":\"苦橙の种\",\"source\":\"戏言\",\"like\":29,\"date\":\"2011.10.19 01:01:21\",\"catname\":\"Novel - 小说\",\"id\":1318957281000},\"1318779962000\":{\"hitokoto\":\"不要哀求，学会争取；若是如此，终有所获。\",\"cat\":\"a\",\"author\":\"空色の风琴\",\"source\":\"交响诗篇\",\"like\":28,\"date\":\"2011.10.16 23:46:02\",\"catname\":\"Anime - 动画\",\"id\":1318779962000},\"1336364600000\":{\"hitokoto\":\"为毛我的眼里常含泪水，因为我老是中枪。\",\"cat\":\"e\",\"author\":\"不管外表怎样强悍我都是受\",\"source\":\"\",\"like\":11,\"date\":\"2012.05.07 12:23:20\",\"catname\":\"原创\",\"id\":1336364600000},\"1319898383000\":{\"hitokoto\":\"想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过⋯⋯\",\"cat\":\"a\",\"author\":\"芽衣洛\",\"source\":\"文学少女\",\"like\":48,\"date\":\"2011.10.29 22:26:23\",\"catname\":\"Anime - 动画\",\"id\":1319898383000},\"1318782332000\":{\"hitokoto\":\"明明只是活着，哀伤却无处不在⋯⋯\",\"cat\":\"a\",\"author\":\"Rewrite\",\"source\":\"秒速五厘米\",\"like\":47,\"date\":\"2011.10.17 00:25:32\",\"catname\":\"Anime - 动画\",\"id\":1318782332000},\"1320044209000\":{\"hitokoto\":\"不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。\",\"cat\":\"a\",\"author\":\"魅影陌客\",\"source\":\"angel beats\",\"like\":56,\"date\":\"2011.10.31 14:56:49\",\"catname\":\"Anime - 动画\",\"id\":1320044209000},\"1322545512000\":{\"hitokoto\":\"今天的早餐是：早苗的面包、秋子的果酱和观铃的果汁~\",\"cat\":\"e\",\"author\":\"Mion\",\"source\":\"\",\"like\":39,\"date\":\"2011.11.29 13:45:12\",\"catname\":\"原创\",\"id\":1322545512000},\"1321267573000\":{\"hitokoto\":\"你是我的，那是曾经。我是你的，直到现在。\",\"cat\":\"e\",\"author\":\"时静\",\"source\":\"\",\"like\":27,\"date\":\"2011.11.14 18:46:13\",\"catname\":\"原创\",\"id\":1321267573000},\"1319034015000\":{\"hitokoto\":\"爱迪生说过：“要把BOSS打倒就要准备足够的等级。”\",\"cat\":\"a\",\"author\":\"牧瀨、紅莉棲\",\"source\":\"学生会的一己之见\",\"like\":30,\"date\":\"2011.10.19 22:20:15\",\"catname\":\"Anime - 动画\",\"id\":1319034015000},\"1387983498000\":{\"hitokoto\":\"在你最冷的时候，有人不顾自己寒冷抱着你，这就是幸福。\",\"cat\":\"f\",\"author\":\"zerokey\",\"source\":\"网络\",\"like\":2,\"date\":\"2013.12.25 22:58:18\",\"catname\":\"来自网络\",\"id\":1387983498000}}"},{"title":"关于我","permalink":"https://juncaixinchi.github.io/Blogs/about/index.html","text":"不知疲倦的翻越，每一座山丘！"},{"title":"All tags","permalink":"https://juncaixinchi.github.io/Blogs/tags/index.html","text":""}],"posts":[{"title":"npm and googleapis mirror","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/03/20/npm-mirror/","text":"最近家里网络很糟糕，上不了npm，很是纠结，于是修改设置使用国内的taobao镜像 NPM镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）: 1.通过config命令 npm config set registry https://registry.npm.taobao.org npm info underscore （如果上面配置正确这个命令会有字符串response） 2.命令行指定 npm --registry https://registry.npm.taobao.org info underscore 3.编辑 ~/.npmrc 加入下面内容 registry = https://registry.npm.taobao.org 搜索镜像: https://npm.taobao.org 建立或使用镜像,参考: https://github.com/cnpm/cnpmjs.org googleapis另外google的字体也需要国内镜像，可以考虑中科大的镜像服务LUG，在源代码内做以下替换即可 123ajax.googleapis.com =&gt; ajax.lug.ustc.edu.cnfonts.googleapis.com =&gt; fonts.lug.ustc.edu.cnthemes.googleusercontent.com =&gt; google-themes.lug.ustc.edu.cn"},{"title":"React-Develop-Environment","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/03/19/React-Develop-Environment/","text":"搭建React开发环境搭建基于React+webpack+Babel+Eslint的react开发环境 Package利用npm下载所有所需软件包 npm install 按照当前项目 node_modules 目录内的安装包情况生成稳定的版本号描述，参考npm-shrinkwrap npm shrinkwrap 安装的软件包列表，package.json 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; \"name\": \"Test\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": &#123; \"build\": \"webpack\", \"dev\": \"webpack-dev-server --hot\" &#125;, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"devDependencies\": &#123; \"babel-core\": \"^6.23.1\", \"babel-eslint\": \"^7.1.1\", \"babel-loader\": \"^6.4.0\", \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\", \"babel-preset-es2015\": \"^6.22.0\", \"babel-preset-react\": \"^6.23.0\", \"babel-preset-react-hmre\": \"^1.1.1\", \"babel-preset-stage-2\": \"^6.22.0\", \"css-loader\": \"^0.27.3\", \"debug\": \"^2.6.3\", \"eslint\": \"^3.17.1\", \"eslint-config-airbnb\": \"^14.1.0\", \"eslint-loader\": \"^1.6.3\", \"eslint-plugin-import\": \"^2.2.0\", \"eslint-plugin-jsx-a11y\": \"^4.0.0\", \"eslint-plugin-react\": \"^6.10.0\", \"html-webpack-plugin\": \"^2.28.0\", \"node-sass\": \"^4.5.0\", \"react-tap-event-plugin\": \"^2.0.1\", \"sass-loader\": \"^6.0.3\", \"style-loader\": \"^0.13.2\", \"webpack\": \"^2.2.1\", \"webpack-dev-server\": \"^2.4.1\" &#125;, \"dependencies\": &#123; \"marked\": \"^0.3.6\", \"material-ui\": \"^0.17.0\", \"react\": \"^15.4.2\", \"react-dom\": \"^15.4.2\" &#125;&#125; BabelBabel 是一个 JavaScript 转换器，它将 JavaScript 变成 JavaScript（现在是将高版本的 ES6/ES7 转换为 ES5）。 Babel的配置文件，.babelrc 123456789&#123; \"presets\": [\"react\", \"es2015\", \"stage-2\"], \"env\": &#123; \"development\": &#123; \"presets\": [\"react-hmre\"] &#125; &#125;, \"plugins\": [\"transform-decorators-legacy\"]&#125; Webpackwebpack是一个模块打包器，能够把 React 库、JSX 文件和任何其它 JavaScript 的相关部分打包为一个文件。它还能扩展到 CSS（LESS/SASS）文件和应用程序所用的其它类型的素材。其中webpack-dev提供能够热替换的调试工具 Webpack的配置文件,webpack.config.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const path = require('path')const HtmlwebpackPlugin = require('html-webpack-plugin')const ROOT_PATH = path.resolve(__dirname)const BUILD_PATH = path.resolve(ROOT_PATH, 'public')const APP_PATH = path.resolve(ROOT_PATH, 'src')module.exports = &#123; entry: &#123; app: path.resolve(APP_PATH, 'app.jsx') &#125;, output: &#123; path: path.resolve(ROOT_PATH, BUILD_PATH), filename: 'bundle.js' &#125;, module: &#123; rules: [ &#123; test: /\\.jsx?$/, include: [ path.resolve(ROOT_PATH, 'src') ], loader: 'babel-loader' &#125;, &#123; test: /\\.scss$/, include: [ path.resolve(ROOT_PATH, 'src') ], loaders: ['style-loader', 'css-loader', 'sass-loader'] &#125; ] &#125;, resolve: &#123; modules: ['node_modules', path.join(ROOT_PATH, 'src')], extensions: ['.js', '.jsx'] &#125;, devtool: 'eval-source-map', devServer: &#123; contentBase: path.join(ROOT_PATH, 'dist'), compress: true, port: 9000, hot: true, inline: true &#125;, plugins: [ new HtmlwebpackPlugin(&#123; title: 'React Test App' &#125;) ]&#125; EslintESLint 是一个插件化的javascript 代码检测工具，它可以用于检查常见的JavaScript 代码错误，也可以进行代码风格检查。这里主要以airbnb的指南为准，基本规则见Eslint Rules，React相关规则见React Rules 检查file.jsx的代码格式 eslint file.jsx 检查并修改可自动修正的部分（主要是空格与换行等空白的修复） eslint --fix file.jsx Eslint的配置文件，.eslintrc 1234567891011121314151617181920212223242526272829303132333435363738394041&#123; \"extends\": \"airbnb\", \"parser\": \"babel-eslint\", \"env\": &#123; \"browser\": true, \"node\": true &#125;, \"settings\": &#123; \"ecmascript\": 6, \"jsx\": true &#125;, \"plugins\": [ \"react\", \"jsx-a11y\", \"import\" ], \"rules\": &#123; \"strict\": \"warn\", \"quotes\": \"warn\", \"camelcase\": \"warn\", \"no-underscore-dangle\": \"warn\", \"no-undef\": \"warn\", \"max-len\": \"warn\", \"no-unused-vars\": \"warn\", \"no-unused-expressions\": \"warn\", \"no-shadow\": \"warn\", \"default-case\": \"warn\", \"no-confusing-arrow\": \"warn\", \"no-useless-constructor\": \"warn\", \"no-nested-ternary\": \"off\", \"no-mixed-operators\": \"off\", \"semi\": [\"warn\", \"never\"], \"comma-dangle\": [\"warn\", \"never\"], \"no-plusplus\": [\"warn\", &#123; \"allowForLoopAfterthoughts\": true &#125;], \"import/no-extraneous-dependencies\": \"warn\", \"import/extensions\": [\"warn\", \"never\"], \"react/no-multi-comp\": \"warn\", \"react/prop-types\": \"off\", \"react/prefer-stateless-function\": [\"warn\", &#123; \"ignorePureComponents\": true &#125;] &#125;&#125; Github项目链接：React-DE"},{"title":"Vim-Setting","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/03/18/Vim-Setting/","text":"Vim 是高效的文本编辑器，以下是我整理的日常中经常用到的命令与插件 基本编辑命令打开文件file vi file 进入编辑模式 i 退出编辑模式，进入命令模式 &lt;Esc&gt; 保存并退出 :wp 强制（不保存）退去 :q! 文件命令将vim窗口分成双栏并打开新文件 :vs newfile 在多栏窗口中切换 ctrl + w + w 移动命令移动到第一行 gg 移动到最后一行 G 移动到第7行 7gg 插入命令在当前位置生前插入 i 在当前行首插入 I 在当前行尾插入 A 在当前行之后插入一行 o 复制、粘贴、删除拷贝当前行或者之后的7行 yy y7y 粘贴 p 删除当前行或者之后的7行 dd d7d 查找命令查找text，按n健查找下一个，按N健查找前一个 /text 查找光标处的单词 * 设置高亮查找到的内容 :set hlsearch 全局替换aaa为bbb :%s/aaa/bbb/g 用//注释第3-5行 :3,5 s/^/\\/\\/ /g 撤销和重做撤销（Undo） u 重做（Redo），即撤销的撤销 Ctrl + r VIM 代码折叠用缩进表示折叠 set foldmethod=indent 全部折叠 :set foldlevelstart=0 取消折叠 :set foldlevelstart=99 使用空格作为折叠快捷键 nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt; 自动加载view，使得上一次折叠的内容可以保存 au BufWinLeave * silent mkview au BufWinEnter * silent loadview 安装插件 首先要安装Vundle 1234567mkdir ~/.vim/bundlemkdir ~/.vim/bundle/Vundle.vimcd ~/.vim/bundle/Vundle.vimgit clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim 在.vimrc中配置Vundle，加入以下内容 12345678910111213141516171819202122set nocompatible &quot; be iMproved, requiredfiletype off &quot; required&quot; set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()&quot; let Vundle manage Vundle, required&quot; use the command below to install the plugins from the command line&quot; vim +PluginInstall +qallPlugin &apos;VundleVim/Vundle.vim&apos;Plugin &apos;vim-syntastic/syntastic&apos;Plugin &apos;Valloric/YouCompleteMe&apos;Plugin &apos;pangloss/vim-javascript&apos;Plugin &apos;mxw/vim-jsx&apos;&quot; All of your Plugins must be added before the following linecall vundle#end() &quot; requiredfiletype plugin indent on &quot; requiredsyntax on 在配置文件的Plugin部分添加插件，如插件vim-jsx的github链接为 https://github.com/mxw/vim-jsx，于是可以写作 1Plugin &apos;mxw/vim-jsx&apos; 然后运行以下代码安装插件 vim +PluginInstall +qall 配置文件.vimrc123456789101112131415161718192021222324252627282930313233343536373839404142434445464748set nocompatible &quot; be iMproved, requiredfiletype off &quot; required&quot; set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()&quot; let Vundle manage Vundle, required&quot; use the command below to install the plugins from the command line&quot; vim +PluginInstall +qallPlugin &apos;VundleVim/Vundle.vim&apos;Plugin &apos;vim-syntastic/syntastic&apos;Plugin &apos;Valloric/YouCompleteMe&apos;Plugin &apos;pangloss/vim-javascript&apos;Plugin &apos;mxw/vim-jsx&apos;&quot; All of your Plugins must be added before the following linecall vundle#end() &quot; requiredfiletype plugin indent on &quot; requiredsyntax on&quot; vim-jsxlet g:jsx_ext_required = 0&quot; syntastic&quot; see more by &apos;:help syntastic&apos;let g:syntastic_javascript_checkers = [&apos;eslint&apos;]let g:syntastic_check_on_w = 0&quot; foldset foldmethod=indentset foldlevelstart=99nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;&quot; auto mkview &amp; loadviewau BufWinLeave * silent mkviewau BufWinEnter * silent loadview&quot; indent set tab = 2 blank spaceset ts=2set sw=2set expandtabset smartindentset number"},{"title":"Lifting-State-Up","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/03/10/Lifting-State-Up/","text":"很多情况下，几个组件之间需要共享state。此时就可以利用提升共同state至附组件的方法来处理，参见：Lifting State Up 简单而言就是通过在子组件中使用this.props.state代替this.state，将state托管至父组件，进而共享state。其中原来子组件的this.setState要用this.props.setState或者间接的function代替（如下例子中的handleChange），不过其中要注意使用bind(this)方法。 以下是一个具体的例子： 父组件Calculator.jsx 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import React from 'react'import TemperatureInput from './TemperatureInput'const BoilingVerdict = (props) =&gt; &#123; if (props.celsius &gt;= 100) &#123; return &lt;p&gt;The water would boil.&lt;/p&gt; &#125; return &lt;p&gt;The water would not boil.&lt;/p&gt;&#125;const toCelsius = fahrenheit =&gt; (fahrenheit - 32) * 5 / 9const toFahrenheit = celsius =&gt; (celsius * 9 / 5) + 32const tryConvert = (value, convert) =&gt; &#123; const input = parseFloat(value) if (Number.isNaN(input)) &#123; return '' &#125; const output = convert(input) const rounded = Math.round(output * 1000) / 1000 return rounded.toString()&#125;export default class Calculator extends React.Component &#123; constructor(props) &#123; super(props) this.handleCelsiusChange = this.handleCelsiusChange.bind(this) this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this) this.state = &#123; value: '', scale: 'c' &#125; &#125; handleCelsiusChange(value) &#123; this.setState(&#123; scale: 'c', value &#125;) &#125; handleFahrenheitChange(value) &#123; this.setState(&#123; scale: 'f', value &#125;) &#125; render() &#123; const scale = this.state.scale const value = this.state.value const celsius = scale === 'f' ? tryConvert(value, toCelsius) : value const fahrenheit = scale === 'c' ? tryConvert(value, toFahrenheit) : value return ( &lt;div&gt; &lt;TemperatureInput scale=\"c\" value=&#123;celsius&#125; onChange=&#123;this.handleCelsiusChange&#125; /&gt; &lt;TemperatureInput scale=\"f\" value=&#123;fahrenheit&#125; onChange=&#123;this.handleFahrenheitChange&#125; /&gt; &lt;BoilingVerdict celsius=&#123;parseFloat(celsius)&#125; /&gt; &lt;/div&gt; ) &#125;&#125; 子组件TemperatureInput.jsx 1234567891011121314151617181920212223242526272829303132import React from 'react'const scaleNames = &#123; c: 'Celsius', f: 'Fahrenheit'&#125;export default class TemperatureInput extends React.Component &#123; constructor(props) &#123; super(props) this.handleChange = this.handleChange.bind(this) &#125; handleChange(e) &#123; this.props.onChange(e.target.value) &#125; render() &#123; const value = this.props.value const scale = this.props.scale return ( &lt;fieldset&gt; &lt;legend&gt;Enter value in &#123;scaleNames[scale]&#125;:&lt;/legend&gt; &lt;input value=&#123;value&#125; onChange=&#123;this.handleChange&#125; /&gt; &lt;/fieldset&gt; ) &#125;&#125; 代码可见Github"},{"title":"JSX-Syntax","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/03/04/JSX-Syntax/","text":"JSX 语法JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。 Hello World首先是官网的例子helloworld，其中&lt;h1&gt;Hello, world!&lt;/h1&gt;就是使用到了JSX语法。HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;Hello React!&lt;/title&gt; &lt;script src=\"vendor-js/react.js\"&gt;&lt;/script&gt; &lt;script src=\"vendor-js/react-dom.js\"&gt;&lt;/script&gt; &lt;script src=\"vendor-js/babel-core/browser.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"example\"&gt;&lt;/div&gt; &lt;script type=\"text/babel\"&gt; ReactDOM.render( &lt;h1&gt;Hello, world!&lt;/h1&gt;, document.getElementById('example') ); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在上述JSX语法中要注意的地方： &lt;script&gt; 标签的 type 属性为 text/babel，这是React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是在页面中直接使用 JSX 的地方，都要加上 type=&quot;text/babel&quot;。 一共用了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能， browser.min.js的作用是将 JSX 语法转为 JavaScript 语法。 ReactDOM.render 是 React 的最基本方法，将模板转为HTML语言，并插入指定的 DOM 节点。 将 JSX 语法转为 JavaScript 语法，这一步很消耗时间。现在前端项目，都会使用前端工程化，不会直接在html页面中直接写js代码，写好的js代码都会使用工具进行编译压缩等。这样的话，JSX也会通过编译直接转化成js语法，让浏览器直接使用。 JSX的特点 类XML语法容易接受，结构清晰 增强JS语义 抽象程度高，屏蔽DOM操作，跨平台 代码模块化 JSX基本语法规则JSX本身就和XML语法类似，可以定义属性以及子元素。唯一特殊的是可以用大括号来加入JavaScript表达式，即： 遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。 12345678var arr = [ &lt;h1&gt;Hello world!&lt;/h1&gt;, &lt;h2&gt;React is awesome&lt;/h2&gt;,];ReactDOM.render( &lt;div&gt;&#123;arr&#125;&lt;/div&gt;, document.getElementById('example')); JavaScript表达式基础语法用一对大括号 { } 包起来的JavaScript表达式可以作为标签的子结点（children），也可以是属性值 123456789// 以下语句等价&lt;MyComponent&gt;foo&lt;/MyComponent&gt;&lt;MyComponent&gt;&#123;'foo'&#125;&lt;/MyComponent&gt;// JavaScript 表达式作为属性值React.render( &lt;div className=&#123;2 &gt; 1 ? 'class-a' : 'class-b'&#125;&gt;content&lt;/div&gt;, document.body); 条件判断的写法因为 JSX 只是函数调用和对象创建的语法糖，在 { } 中不能 if-else 语句，不过可以采用三元操作表达式 123456var HelloMessage = React.createClass(&#123; render: function() &#123; return &lt;div&gt;Hello &#123;this.props.name ？ this.props.name : \"World\"&#125;&lt;/div&gt;; &#125;&#125;);ReactDOM.render(&lt;HelloMessage name=\"xiaowang\" /&gt;, document.body); 可以使用比较运算符“ &amp;&amp; ” 和 “ || ”来替代“ if ” “&amp;&amp;” ：如果左边的值为真，才返回右边的表达式，不过要注意&amp;&amp;之前的需要是一个boolean值 1234&lt;div&gt; &#123;showHeader &amp;&amp; &lt;Header /&gt;&#125; &lt;Content /&gt;&lt;/div&gt; “||” ：如果左边的值为真，则直接返回左边的值，否则返回右边的值 12345var HelloMessage = React.createClass(&#123; render: function() &#123; return &lt;div&gt;Hello &#123;this.props.name || \"World\"&#125;&lt;/div&gt;; &#125;&#125;); Children in JSX在JSX表达式中包括开标签和闭标签，这俩个标签之间的内容被定义为一个特殊的prop，即props.children String Literals as Children开标签和闭标签的内容或者props.children的值可以是一个string，这与HTML的语法相同 12&lt;MyComponent&gt;Hello world!&lt;/MyComponent&gt;&lt;div&gt;This is valid HTML &amp;amp; JSX at the same time.&lt;/div&gt; JSX elements as the ChildrenChildren也可以是一个JSX element，以下是一个“纯组件”的例子 1234&lt;MyContainer&gt; &lt;MyFirstComponent /&gt; &lt;MySecondComponent /&gt;&lt;/MyContainer&gt; JavaScript Expressions as Childrenchildren也可以是JavaScript表达式，需要用{}包起来，以下是渲染一个任意行数的HTML list的例子 123456789101112function Item(props) &#123; return &lt;li&gt;&#123;props.message&#125;&lt;/li&gt;;&#125;function TodoList() &#123; const todos = ['finish doc', 'submit pr', 'nag dan to review']; return ( &lt;ul&gt; &#123;todos.map((message) =&gt; &lt;Item key=&#123;message&#125; message=&#123;message&#125; /&gt;)&#125; &lt;/ul&gt; );&#125; Functions as Children一般情况下，在JSX中的插入的JavaScript表达式会最终表现为string、React element或者这些内容形成的list。但是props.children实际上可以传递任何数据，不需要一定是React可以render的内容。例如，可以自定义一个组件，其children是一个函数，最终函数的callback作为props.children 12345678910111213141516// Calls the children callback numTimes to produce a repeated componentfunction Repeat(props) &#123; let items = []; for (let i = 0; i &lt; props.numTimes; i++) &#123; items.push(props.children(i)); &#125; return &lt;div&gt;&#123;items&#125;&lt;/div&gt;;&#125;function ListOfTenThings() &#123; return ( &lt;Repeat numTimes=&#123;10&#125;&gt; &#123;(index) =&gt; &lt;div key=&#123;index&#125;&gt;This is item &#123;index&#125; in the list&lt;/div&gt;&#125; &lt;/Repeat&gt; );&#125; 所以说Children传给组件的可以是任意内容，只要组件能够在render前，将children转化为React能够理解的内容即可。 注释render函数内的注释需要写在花括号中，实例如下： 1234567ReactDOM.render( &lt;div&gt; &lt;h1&gt;菜鸟教程&lt;/h1&gt; &#123;/*注释...*/&#125; &lt;/div&gt;, document.getElementById('example')); JSX 陷阱 style属性 在React中写行内样式时，要使用`style={{}}`的方式，属性值不能是字符串而必须为对象，需要注意的是属性名同样需要驼峰命名法。即`margin-top`要写成`marginTop`。 骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName 等，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。 123456React.render( &lt;div style=&#123;&#123;color:'red'&#125;&#125;&gt; xxxxx &lt;/div&gt;, document.body); HTML转义 React默认会进行HTML的转义，避免XSS攻击 123456var content='&lt;strong&gt;content&lt;/strong&gt;';React.render( &lt;div&gt;&#123;content&#125;&lt;/div&gt;, document.body);//结果页面直接输出内容了\"&lt;strong&gt;content&lt;/strong&gt;\" 自定义HTML属性 如果往原生 HTML 元素里传入 HTML 规范里不存在的属性，React 不会显示它们。如果需要使用自定义属性，要加 data- 前缀。 1&lt;div data-custom-attribute=\"foo\" /&gt; 组件类只能包含一个顶层标签 123//var myDivElement =&lt;h1&gt;你好&lt;/h1&gt;&lt;h1&gt;hello&lt;/h1&gt;;//上述写法是会报错的，要写成只有一个顶层标签：var myDivElement =&lt;div&gt;&lt;h1&gt;你好&lt;/h1&gt;&lt;h1&gt;hello&lt;/h1&gt;&lt;/div&gt;; Boolean 属性 省略一个属性的值会导致JSX把它当做 true。要传值 false必须使用属性表达式。这常出现于使用HTML表单元素，含有属性如disabled, required, checked 和 readOnly。 1234567// 在JSX中，对于禁用按钮这二者是相同的。&lt;input type=\"button\" disabled /&gt;;&lt;input type=\"button\" disabled=&#123;true&#125; /&gt;;// 在JSX中，对于不禁用按钮这二者是相同的。&lt;input type=\"button\" /&gt;;&lt;input type=\"button\" disabled=&#123;false&#125; /&gt;; React组件基础用法使用JSX来将代码封装成React组件，然后像插入普通 HTML 标签一样，在其他地方插入这个组件。使用React.createClass用于生成一个组件。 123456789var MyComponent=React.createClass(&#123; render: function() &#123; return &lt;h1&gt;Hello world!&lt;/h1&gt;; &#125;&#125;);ReactDOM.render( &lt;MyComponent /&gt;, document.getElementById('example')); 上面代码中，变量 MyComponent就是一个组件类。模板插入 时，会自动生成 MyComponent 的一个实例（下文的”组件”都指组件类的实例）。 所有组件类都必须有自己的 render 方法，用于输出组件。 HTML 标签 vs. React 组件React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。 渲染HTML标签，声明变量采用首字母小写 123//要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。var myDivElement = &lt;div className=\"foo\" /&gt;;React.render(myDivElement, document.getElementById('example')); 渲染React组件，声明变量采用首字母大写 1234//要渲染 React 组件，只需创建一个大写字母开头的本地变量。var MyComponent = React.createClass(&#123;/*...*/&#125;);var myElement = &lt;MyComponent /&gt;;React.render(myElement, document.getElementById('example')); 动态组件1234567891011121314151617181920212223242526var MyComponent=React.createClass(&#123; getInitialState: function() &#123; return &#123;clickNum: 0&#125;; &#125;, handleClick:function()&#123; var num=this.state.clickNum; num++; this.setState(&#123;clickNum:num&#125;); &#125;, render: function() &#123; return ( &lt;div&gt; &lt;h1 onClick=&#123;this.handleClick&#125;&gt;Hello &#123;this.props.name&#125;!&lt;/h1&gt; &lt;h2 style=&#123;&#123;color:'red'&#125;&#125;&gt;点击&#123;this.props.name&#125;次数：&#123;this.state.clickNum&#125;&lt;/h2&gt; &lt;/div&gt; ); &#125;&#125;);ReactDOM.render( &lt;div&gt; &lt;MyComponent name=\"张三\" /&gt; &lt;hr/&gt; &lt;MyComponent name=\"李四\" /&gt; &lt;/div&gt;, document.getElementById('example')); 上面代码中定义的MyComponent组件包含属性，状态和事件，是一个简单的比较完整的组件。 使用props通过父组件进行传递值 使用state定义组件自己的状态 组件支持的大部分的DOM操作事件 属性props的注意要点 class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。+this.props.children 不要children作为把对象的属性名。因为this.props.children获取的该标签下的所有子标签。this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 this.props.children 的时候要小心。官方建议使用React.Children.map来遍历子节点，而不用担心数据类型。 状态state的注意要点 组件免不了要与用户互动，React 将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。 getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。 由于 this.props 和 this.state 的简单的区分方法： this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。"},{"title":"ECMAScript-6-note","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/03/02/ECMAScript-6-note/","text":"学习ES6的笔记ECMAScript 6.0 是JavaScript语言的下一代标准，已经在2015年6月正式发布 主要学习了阮一峰老师的ECMAScript 6 入门 ES6转码器 Babel转码器 Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，可通过npm安装。同时Babel提供一个REPL在线编译器，可以在线将ES6代码转为ES5代码 Traceur转码器 Traceur转码器由Google公司开发，也可以将ES6代码转为ES5代码，也可通过在线编译器转换代码 let和const命令1. let命令ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效 for循环的计数器，就很合适使用let命令 12for (let i = 0; i &lt; 10; i++) &#123;&#125;console.log(i); let不存在变量提升，变量应该在声明语句之后才可以使用，且不允许在相同作用域内，重复声明同一个变量 12345678910111213141516171819// var 的情况console.log(foo); // 输出undefinedvar foo = 2;// let 的情况console.log(bar); // 报错ReferenceErrorlet bar = 2;// 报错function () &#123; let a = 10; var a = 1;&#125;// 报错function () &#123; let a = 10; let a = 1;&#125; 在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ） 12345678var tmp = 123;if (true) &#123; tmp = 'abc'; // ReferenceError let tmp;&#125;typeof x; // ReferenceErrorlet x; 2.块级作用域let实际上为JavaScript新增了块级作用域，{}内部即为一个块级作用域 1234567function f1() &#123; let n = 5; if (true) &#123; let n = 10; &#125; console.log(n); // 5&#125; 块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了 1234567891011// IIFE 写法(function () &#123; var tmp = ...; ...&#125;());// 块级作用域写法&#123; let tmp = ...; ...&#125; ES6 引入了块级作用域，明确允许在块级作用域之中声明函数 1234'use strict';if (true) &#123; function f() &#123;&#125;&#125; 浏览器环境并一定完全兼容，故在块级作用域内声明函数时，建议用函数表达式，而不是函数声明语句 1234567// 函数表达式&#123; let a = 'secret'; let f = function () &#123; return a; &#125;;&#125; 3.const命令const声明一个只读的常量。一旦声明变量，就必须立即初始化，只在声明所在的块级作用域内有效 12345const PI = 3.1415;PI // 3.1415PI = 3;// TypeError: Assignment to constant variable. 对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心 1234567const foo = &#123;&#125;;foo.prop = 123;foo.prop// 123foo = &#123;&#125;; // TypeError: \"foo\" is read-only 如果真的想将对象冻结，应该使用Object.freeze方法 12345678var constantize = (obj) =&gt; &#123; Object.freeze(obj); Object.keys(obj).forEach( (key, value) =&gt; &#123; if ( typeof obj[key] === 'object' ) &#123; constantize( obj[key] ); &#125; &#125;);&#125;; 4.顶层对象的属性 var命令和function命令声明的全局变量，依旧是顶层对象的属性 let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性 1234567var a = 1;// 如果在Node的REPL环境，可以写成global.a// 或者采用通用方法，写成this.awindow.a // 1let b = 1;window.b // undefined 5.global 对象ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。 浏览器和 Web Worker 里面，self也指向顶层对象，但是Node没有self。 Node 里面，顶层对象是global，但其他环境都不支持。 同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。 全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。 不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。 综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。 12345678910111213141516// 方法一(typeof window !== 'undefined' ? window : (typeof process === 'object' &amp;&amp; typeof require === 'function' &amp;&amp; typeof global === 'object') ? global : this);// 方法二var getGlobal = function () &#123; if (typeof self !== 'undefined') &#123; return self; &#125; if (typeof window !== 'undefined') &#123; return window; &#125; if (typeof global !== 'undefined') &#123; return global; &#125; throw new Error('unable to locate global object');&#125;; 变量的解构赋值"},{"title":"Javascript-note","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/22/Javascript-note/","text":"学习javascript的笔记主要学习了 JavaScript教程 字符串多行字符串 这是一个 多行 字符串; toUpperCase(),toLowerCase() 把一个字符串全部变为大写或小写 123var s = 'Hello';s.toUpperCase(); // 返回'HELLO's.toLowerCase(); // 返回'hello' indexOf()搜索指定字符串出现的位置 123var s = 'hello, world';s.indexOf('world'); // 返回7s.indexOf('World'); // 没有找到指定的子串，返回-1 substring()返回指定索引区间的子串 123var s = 'hello, world's.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello's.substring(7); // 从索引7开始到结束，返回'world' 数组通过Array.length获取数组长度，给length赋一个新的值或索引赋值时索引超过了范围，会导致Array大小的变化 123456var arr = [1, 2, 3.14];arr.length; // 3arr.length = 4;arr; // arr变为[1, 2, 3.14, undefined]arr[5] = 'x';arr; // arr变为[1, 2, 3, undefined, undefined, 'x'] 通过indexOf()来搜索Array中一个指定的元素的位置 123var arr = [10, 20, '30', 'xyz'];arr.indexOf(10); // 元素10的索引为0arr.indexOf(30); // 元素30没有找到，返回-1 通过slice()截取Array的部分元素，然后返回一个新的Array 123var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G'] push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉,unshift()往Array的头部添加若干元素，shift()则把Array的第一个元素删掉 123456789101112var arr = [1, 2];arr.push('A', 'B'); // 返回Array新的长度: 4arr; // [1, 2, 'A', 'B']arr.pop(); // pop()返回'B'arr; // [1, 2, 'A']arr.unshift('A', 'B'); // 返回Array新的长度: 5arr; // ['A', 'B', 1, 2, 'A']arr.shift(); // 'A'arr; // ['B', 1, 2, 'A']arr = [];arr.pop(); // 空数组继续pop不会报错，而是返回undefinedarr.shift(); // 空数组继续shift不会报错，而是返回undefined sort(), reverse()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认把所有元素先转换为String，再根据ASCII码进行排序 12345var arr = ['B', 'C', 'A', 'b'];arr.sort();arr; // ['A', 'B', 'C', 'b']arr.reverse(); arr; //['b', C', 'B', 'A'] splice()方法可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素： 12345678910var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];// 从索引2开始删除3个元素,然后再添加两个元素:arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']// 只删除,不添加:arr.splice(2, 2); // ['Google', 'Facebook']arr; // ['Microsoft', 'Apple', 'Oracle']// 只添加,不删除:arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle'] concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array： 123var arr = ['A', 'B', 'C'];arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]arr; // ['A', 'B', 'C'] join()方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串： 123var arr = ['A', 'B', 'C', 1, 2, 3];arr.join('-'); // 'A-B-C-1-2-3'arr.join(''); // 'ABC123' 如果数组的某个元素又是一个Array，则可以形成多维数组 12var arr = [[1, 2, 3], [400, 500, 600], '-'];arr[1][1]; //500 对象JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来 123456789101112var xiaoming = &#123; name: '小明', birth: 1990, school: 'No.1 Middle School', height: 1.70, weight: 65, score: null&#125;;xiaohong['middle-school']; // 'No.1 Middle School'xiaohong['name']; // '小红'xiaohong.name; // '小红'xiaoming.age; // undefined 要检测xiaoming是否拥有某一属性，可以用in操作符。因为toString定义在object对象中，所以xiaoming继承了toString属性；可以用hasOwnProperty()方法判断一个属性是否是xiaoming自身拥有的，而不是继承得到的。 123456var xiaoming = &#123; name: '小明'&#125;;'toString' in xiaoming; // truexiaoming.hasOwnProperty('name'); // truexiaoming.hasOwnProperty('toString'); // false 条件判断使用if () { ... } else { ... }来进行条件判断，else if通常连写在一起，以增加可读性。 12345678var age = 3;if (age &gt;= 18) &#123; console.log('adult');&#125; else if (age &gt;= 6) &#123; console.log('teenager');&#125; else &#123; console.log('kid');&#125; 循环for循环最常用的地方是利用索引来遍历数组 123456var arr = ['Apple', 'Google', 'Microsoft'];var i, x;for (i=0; i&lt;arr.length; i++) &#123; x = arr[i]; console.log(x);&#125; for循环的3个条件都是可以省略的，但必须使用break语句退出循环，否则就是死循环 1234567var x = 0;for (;;) &#123; // 将无限循环下去 if (x &gt; 100) &#123; break; // 通过if判断来退出循环 &#125; x ++;&#125; for ... in循环可以把一个对象的所有属性依次循环出来 12345678var o = &#123; name: 'Jack', age: 20, city: 'Beijing'&#125;;for (var key in o) &#123; console.log(key); // 'name', 'age', 'city'&#125; for ... in循环可以直接循环出Array的索引，但得到索引的是String而不是Number 12345var a = ['A', 'B', 'C', 1, 2, 3];for (var i in a) &#123; console.log(i) console.log(a[i]); &#125; while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环 1234567var x = 0;var n = 99;while (n &gt; 0) &#123; x = x + n; n = n - 2;&#125;x; // 2500 do { ... } while()循环，它和while循环的唯一区别在于前者是在每次循环完成的时候判断条件，所以至少会执行一次循环 12345var n = 0;do &#123; n = n + 1;&#125; while (n &lt; 100);n; // 100 Map和SetMap是一组键值对的结构，具有极快的查找速度，Map具有以下方法： 12345678var M = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);var m = new Map(); // 空Mapm.set('Adam', 67); // 添加新的key-valuem.set('Bob', 59);m.has('Adam'); // 是否存在key 'Adam': truem.get('Adam'); // 67m.delete('Adam'); // 删除key 'Adam'm.get('Adam'); // undefined Set是一组key的集合，不能重复，重复元素在Set中自动被过滤 123456var s = new Set([1, 2, 3, 3, '3']);s; // Set &#123;1, 2, 3, \"3\"&#125;s.add(4); // Set &#123;1, 2, 3, \"3\", 4&#125;s.delete(2); // Set &#123;1, 3, \"3\", 4&#125;s.size; //4s.has(3); // true iterablefor ... of循环来遍历Array、Map和Set 123456789101112var a = ['A', 'B', 'C'];var s = new Set(['A', 'B', 'C']);var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);for (var x of a) &#123; // 遍历Array console.log(x);&#125;for (var x of s) &#123; // 遍历Set console.log(x);&#125;for (var x of m) &#123; // 遍历Map console.log(x[0] + '&lt;=&gt;' + x[1]);&#125; iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数，以下是Array的例子 1234567var a = ['A', 'B', 'C'];a.forEach(function (element, index, array) &#123; // element: 指向当前元素的值 // index: 指向当前索引 // array: 指向Array对象本身 console.log(\"element: \" + element + \"; index: \" + index + \"; array: \" + array);&#125;); Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身 1234var s = new Set(['A', 'B', 'C']);s.forEach(function (element, sameElement, set) &#123; console.log(\"element: \" + element + \"; sameElement: \" + sameElement + \"; set: \" + set);&#125;); Map的回调函数参数依次为value、key和map本身 1234var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);m.forEach(function (value, key, map) &#123; console.log(\"value: \" + value + \"; key: \" + key + \"; map: \" + map);&#125;); 函数定义和调用12345678// 一般定义function abs(x) &#123; return x&gt;0 ? x : -x;&#125;// 匿名函数定义var abs = function (x) &#123; return x&gt;0 ? x : -x;&#125;; 利用arguments获取所有传入参数 12345678910function abs() &#123; if (arguments.length === 0) &#123; return 0; &#125; if (typeof x !== 'number') &#123; throw 'Not a number'; &#125; var x = arguments[0]; return x &gt;= 0 ? x : -x;&#125; 使用rest来获取任意个参数，需写在最后面，前面加... 1234567891011121314function foo(a, b, ...rest) &#123; console.log('a = ' + a); console.log('b = ' + b); console.log(rest);&#125;// sum()函数，接收任意个参数并返回它们的和function sum(x, ...rest) &#123; let tmp = 0; if(x) tmp += x; for(let i of rest)&#123; tmp += i; &#125; return tmp;&#125; ## 变量作用域 var定义变量，该变量的作用域为整个函数体。不在任何函数内定义的变量就具有全局作用域，被绑定到全局对象window的一个属性 123456789'use strict';var course = 'Learn JavaScript';console.log(course); // 'Learn JavaScript'console.log(window.course); // 'Learn JavaScript'function foo() &#123; console.log('you foo');&#125;foo(); // 直接调用foo()window.foo(); // 通过window.foo()调用 ES6引入了新的关键字let，用let替代var可以申明一个块级作用域(for循环等)的变量 1234567function foo() &#123; var sum = 0; for (let i=0; i&lt;100; i++) &#123; sum += i; &#125; return sum;&#125; ES6标准引入了新的具有块级作用域的关键字const来定义常量 123const PI = 3.14;PI = 3; // 某些浏览器不报错，但是无效果！PI; // 3.14 方法在一个对象中绑定函数，称为这个对象的方法，在一个方法内部，this是一个特殊变量，它始终指向当前对象 123456789var xiaoming = &#123; name: '小明', birth: 1990, age: function () &#123; var y = new Date().getFullYear(); return y - this.birth; &#125;&#125;;xiaoming.age(); //2017年则是27 apply()可以指定函数的this的指向 1234567891011function getAge() &#123; var y = new Date().getFullYear(); return y - this.birth;&#125;var xiaoming = &#123; name: '小明', birth: 1990, age: getAge&#125;;xiaoming.age(); // 25getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空 call()方法与apply()类似 apply()把参数打包成Array再传入； call()把参数按顺序传入。 12Math.max.apply(null, [3, 5, 4]); // 5Math.max.call(null, 3, 5, 4); // 5 利用apply()动态改变函数的行为，如通过用我们自己的函数替换掉默认的parseInt()的方法统计代码一共调用了多少次parseInt() 1234567891011121314var count = 0;var oldParseInt = parseInt; // 保存原函数window.parseInt = function () &#123; count += 1; return oldParseInt.apply(null, arguments); // 调用原函数&#125;;// 测试:parseInt('10');parseInt('20');for(let x=0;x&lt;10;x++)&#123; parseInt('30');&#125;count; // 12 高阶函数map()方法将array内的每一个元素一次处理 1234567function pow(x) &#123; return x * x;&#125;var arr = [1, 2, 3];arr.map(pow); // [1, 4, 9]arr.map(String);//[\"1\",\"2\",\"3\"] reduce()方法把一个函数作用在这个Array的[x1, x2, x3…]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算 1234567891011[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)// 求和var arr = [1, 3, 5, 7, 9];arr.reduce(function (x, y) &#123; return x + y;&#125;); // 25//将字符串转化为Number的函数function string2int(s) &#123; return s.split(\"\").map(function(x)&#123;return x-0&#125;).reduce(function(x,y)&#123;return x*10+y&#125;);&#125;string2int(\"23434\");//23434 filter()方法把传入的函数依次作用于array的每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素 123456789101112131415161718192021222324// 删掉Array中的空字符串var arr = ['A', '', 'B', null, undefined, 'C', ' '];var r = arr.filter(function (s) &#123; return s &amp;&amp; s.trim(); // 注意：IE9以下的版本没有trim()方法&#125;);arr; // ['A', 'B', 'C']// 回调函数var arr = ['A', 'B', 'C'];var r = arr.filter(function (element, index, self) &#123; console.log(element); // 依次打印'A', 'B', 'C' console.log(index); // 依次打印0, 1, 2 console.log(self); // self就是变量arr return true;&#125;);// 去除array中的重复元素varr,arr = ['1', '1', '2', '3', '2', '4', '5', '1'];r = arr.filter(function (element, index, self) &#123; return self.indexOf(element) === index;&#125;);//[\"1\", \"2\", \"3\", \"4\", \"5\"] sort()方法默认把所有元素先转换为String再以ASCII排序，直接使用对数字排序会有大Bug，可通过自定义方式解决问题。sort()方法会直接对Array进行修改，它返回的结果仍是当前Array 12345678910111213// 升序排列var arr = [10, 20, 1, 2];a2 = arr.sort(function (x, y) &#123; if (x &lt; y) &#123; return -1; &#125; if (x &gt; y) &#123; return 1; &#125; return 0;&#125;); // [1, 2, 10, 20]a2 = arr; // true 闭包闭包就是能够读取其他函数内部变量的函数，由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁 12345678910111213function f1()&#123; var n=999; nAdd=function()&#123;n+=1&#125;; function f2()&#123; console.log(n); &#125; return f2;&#125;var result=f1();result(); // 999nAdd();result(); // 1000// 函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除 箭头函数ES6标准新增了一种新的函数：Arrow Function（箭头函数） 12345x =&gt; x * x// 相当于function (x) &#123; return x * x;&#125; 箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj 123456789var obj = &#123; birth: 1990, getAge: function () &#123; var b = this.birth; // 1990 var fn = () =&gt; new Date().getFullYear() - this.birth; // this指向obj对象 return fn(); &#125;&#125;;obj.getAge(); // 25 generatorgenerator（生成器）是ES6标准引入的新的数据类型，使用function*定义。一个generator看上去像一个函数，但可以返回多次 12345678910111213141516171819//斐波那契数列function* fib(min,max) &#123; var t, a = 0, b = 1, n = 1; while (n &lt;= max) &#123; if(n &gt;= min)&#123; yield a; &#125; t = a + b; a = b; b = t; n ++; &#125; return a;&#125;for (let x of fib(4,5)) &#123; console.log(x); // 依次输出2, 3&#125; 对象类型转换和判断需要注意的问题： 用parseInt()或parseFloat()来转换任意类型到number； 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法； 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}； typeof操作符可以判断出number、boolean、string、function和undefined； 判断Array要使用Array.isArray(arr)； 判断null请使用myVar === null； 判断某个全局变量是否存在用typeof window.myVar === &#39;undefined&#39;； 函数内部判断某个变量是否存在用typeof myVar === &#39;undefined&#39;。 123//number的toString()要特殊处理123..toString(); // '123', 注意是两个点！(123).toString(); // '123' Date 对象在JavaScript中，Date对象用来表示日期和时间，使用Date()获取系统时间； 123456789101112131415var now = new Date();now; // Mon Feb 27 2017 22:24:10 GMT+0800 (中国标准时间)now.getFullYear(); // 2017, 年份now.getMonth(); // 1, 月份，注意月份范围是0~11，1表示二月now.getDate(); // 27, 表示27号now.getDay(); // 1, 表示星期一now.getHours(); // 22, 24小时制now.getMinutes(); // 24, 分钟now.getSeconds(); // 10, 秒now.getMilliseconds(); // 264, 毫秒数now.getTime(); // 1488205450264, 以number形式表示的时间戳var d = new Date(1970, 0, 1, 7, 59, 59, 999);d; // Thu Jan 01 1970 07:59:59 GMT+0800 (中国标准时间)d.getTime(); -1; RegExp正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的 1234// 匹配正常Email地址的表达式var MailCheck = /^[0-9a-zA-Z\\_\\.]+@[0-9a-zA-Z\\_]+\\.[0-9a-zA-Z\\_]+/;MailCheck.exec('juncaixinchi111#gmail.com'); // nullMailCheck.exec('juncaixinchi111@gmail.com'); // ['juncaixinchi111@gmail.com'] JSONJSON是JavaScript Object Notation的缩写，它是一种数据交换格式 使用JSON.stringify()把对象序列化成JSON格式的字符串： 12345678910var xiaoming = &#123; name: '小明', age: 14, gender: true, height: 1.65, grade: null, 'middle-school': '\\\"W3C\\\" Middle School', skills: ['JavaScript', 'Java', 'Python', 'Lisp']&#125;;JSON.stringify(xiaoming); // '&#123;\"name\":\"小明\",\"age\":14,\"gender\":true,\"height\":1.65,\"grade\":null,\"middle-school\":\"\\\"W3C\\\" Middle School\",\"skills\":[\"JavaScript\",\"Java\",\"Python\",\"Lisp\"]&#125;' 按缩进输出： 12345678910111213141516JSON.stringify(xiaoming, null, ' ');// 结果&#123; \"name\": \"小明\", \"age\": 14, \"gender\": true, \"height\": 1.65, \"grade\": null, \"middle-school\": \"\\\"W3C\\\" Middle School\", \"skills\": [ \"JavaScript\", \"Java\", \"Python\", \"Lisp\" ]&#125; 给对象定义一个toJSON()的方法，直接返回JSON应该序列化的数据 1234567891011121314151617var xiaoming = &#123; name: '小明', age: 14, gender: true, height: 1.65, grade: null, 'middle-school': '\\\"W3C\\\" Middle School', skills: ['JavaScript', 'Java', 'Python', 'Lisp'], toJSON: function () &#123; return &#123; // 只输出name和age，并且改变了key： 'Name': this.name, 'Age': this.age &#125;; &#125;&#125;;JSON.stringify(xiaoming); // '&#123;\"Name\":\"小明\",\"Age\":14&#125;' 使用JSON.parse()反序列化 123456789JSON.parse('&#123;\"name\":\"小明\",\"age\":14&#125;'); // Object &#123;name: '小明', age: 14&#125;// 接收一个函数，用来转换解析出的属性JSON.parse('&#123;\"name\":\"小明\",\"age\":14&#125;', function (key, value) &#123; // 把number * 2: if (key === 'name') &#123; return value + '同学'; &#125; return value;&#125;); // Object &#123;name: '小明同学', age: 14&#125;"},{"title":"Simple-Canvas-Game","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/18/Simple-Canvas-Game/","text":"利用HTML5 Canvas制作小游戏的简单教程，详见 simple_canvas_game 1. 创建一个Canvas对象123456// Create the canvasvar canvas = document.createElement(\"canvas\");var ctx = canvas.getContext(\"2d\");canvas.width = 512;canvas.height = 480;document.body.appendChild(canvas); 我们首先要做的是创建一个canvas对象。可以用JavaScript或HTML来做，都非常简单。此处我用的是JS。当创建了canvas之后，我们就可以获取它的上下文对象（context）、设置尺寸，并且把它加到当前文档中。 2. 载入图片1234567// Background imagevar bgReady = false;var bgImage = new Image();bgImage.onload = function () &#123; bgReady = true;&#125;;bgImage.src = \"images/background.png\"; 游戏需要图像，所以让我们载入一些图片吧。我想尽量简单化，所以只用了Image对象来做，当然，还可以将载入图像的功能封装成一个类或别的任何形式。代码中的bgReady用来标识图片是否已完全载入，只有当图片载入完成后，我们才能使用它，如果在载入完成前就对其进行绘制或渲染，JS将会报一个DOM error的错误。 我们会用到三张图片（背景、英雄、怪物），每张图片都需要这样处理。 3. 定义游戏要使用的对象1234567891011// Game objectsvar hero = &#123; speed: 256, // movement in pixels per second x: 0, y: 0&#125;;var monster = &#123; x: 0, y: 0&#125;;var monstersCaught = 0; 定义一些变量，稍后会用到。hero对象的speed属性表示英雄的移动速度（像素/秒）；monster对象不会移动，所以仅仅具有一对坐标；monstersCaught表示玩家抓住的怪物数量。 4. 处理玩家输入12345678// Handle keyboard controlsvar keysDown = &#123;&#125;;addEventListener(\"keydown\", function (e) &#123; keysDown[e.keyCode] = true;&#125;, false);addEventListener(\"keyup\", function (e) &#123; delete keysDown[e.keyCode];&#125;, false); 现在进行输入的处理。（对具有web开发背景的人来说，这是目前为止第一个具有挑战性的部分）对一般的网页来说，当用户开始输入时，可能需要马上开始播放动画或请求数据。但在这里，我们想让游戏逻辑在一个单独的地方对游戏中发生的事情进行处理。为此我们需要将用户输入保存下来以备稍后处理，而不是立即处理。 我们通过简单地将事件对应的键编码（keyCode）保存在keysDown变量中来实现。如果该变量中具有某个键编码，就表示用户目前正按下这个键。简单吧！ 5. 新游戏123456789// Reset the game when the player catches a monstervar reset = function () &#123; hero.x = canvas.width / 2; hero.y = canvas.height / 2; // Throw the monster somewhere on the screen randomly monster.x = 32 + (Math.random() * (canvas.width - 64)); monster.y = 32 + (Math.random() * (canvas.height - 64));&#125;; 通过调用reset函数来开始新游戏。该函数将英雄（即玩家角色）放到屏幕中间，然后随机选择一个位置来安置怪物。 6. 更新对象1234567891011121314151617181920212223242526// Update game objectsvar update = function (modifier) &#123; if (38 in keysDown) &#123; // Player holding up hero.y -= hero.speed * modifier; &#125; if (40 in keysDown) &#123; // Player holding down hero.y += hero.speed * modifier; &#125; if (37 in keysDown) &#123; // Player holding left hero.x -= hero.speed * modifier; &#125; if (39 in keysDown) &#123; // Player holding right hero.x += hero.speed * modifier; &#125; // Are they touching? if ( hero.x &lt;= (monster.x + 32) &amp;&amp; monster.x &lt;= (hero.x + 32) &amp;&amp; hero.y &lt;= (monster.y + 32) &amp;&amp; monster.y &lt;= (hero.y + 32) ) &#123; ++monstersCaught; reset(); &#125;&#125;; 这是update函数，游戏每隔一定时间会调用它一次。它所做的第一件事情是检查用户是否按下了上下左右四个箭头键。如果是，就将我们的英雄向相应的方向移动。 update有一个modifier参数，这看起来好像有点奇怪。你会在游戏的主函数即main函数中看到它，不过我在这儿先解释一下。modifier参数是一个从1开始的与时间相关的数。如果间隔刚好为1秒时，它的值就会为1，英雄移动的距离即为256像素（英雄的速度为256像素/秒）；而如果间隔是0.5秒，它的值就为0.5，即英雄移动的距离为其速度的一半，以此类推。通常update函数调用的间隔很短，所以modifier的值很小，但用这种方式能够确保不管代码执行的速度怎么样，英雄的移动速度都是相同的。 我们已经实现了根据用户的输入来移动英雄，但我们还可以在移动英雄时对其进行检查，以确定是否有其他事件发生。例如：英雄是否与怪物发生了碰撞——当英雄与怪物发生碰撞时，我们为玩家进行计分（monstersCaught加1）并重置游戏（调用reset函数）。 7. 渲染对象123456789101112131415161718192021// Draw everythingvar render = function () &#123; if (bgReady) &#123; ctx.drawImage(bgImage, 0, 0); &#125; if (heroReady) &#123; ctx.drawImage(heroImage, hero.x, hero.y); &#125; if (monsterReady) &#123; ctx.drawImage(monsterImage, monster.x, monster.y); &#125; // Score ctx.fillStyle = \"rgb(250, 250, 250)\"; ctx.font = \"24px Helvetica\"; ctx.textAlign = \"left\"; ctx.textBaseline = \"top\"; ctx.fillText(\"Goblins caught: \" + monstersCaught, 32, 32);&#125;; 当你能够看到你的行动时游戏才会变得更有趣，所以让我们在屏幕上绘制吧。首先我们将背景图片绘制到canvas，然后是英雄和怪物。注意顺序很重要，因为任何位于表层的图片都会将其下面的像素覆盖掉。 接下来是文字，这有些不同，我们调用fillText函数显示玩家的分数。因为不需要复杂的动画或者对文字进行移动，所以只是绘制一下就ok了。 8. 游戏主循环12345678910// The main game loopvar main = function () &#123; var now = Date.now(); var delta = now - then; update(delta / 1000); render(); then = now;&#125;; 游戏的主循环用来控制游戏流程。首先我们要获得当前的时间，这样我们才能计算时间差（自上次循环以来经过的时间）。然后计算modifier的值并交给update（需要将delta除以1000以将其转换为毫秒）。最后调用render并更新记录的时间。 更多关于游戏循环的内容见“Onslaught! Arena Case Study”。 9. 开始游戏吧1234// Let's play this game!reset();var then = Date.now();setInterval(main, 1); // Execute as fast as possible 快完成了，这是最后一段代码。首先调用reset来开始新游戏。（还记得吗，这会将英雄置中并随机安放怪物）。然后将起始时间保存到变量then中并启动游戏的主循环。OK！（但愿）你现在已经理解了在HTML5 Canvas中用JS来开发游戏的基础知识了。建议最好是能够自己亲自试一把！"},{"title":"Git_note","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/14/Git-note/","text":"Git note学习Git的笔记，完整文档见Git-scm Git 配置获取升级$ git clone git://git.kernel.org/pub/scm/git/git.git 添加用户信息，并查看配置文件$ git config --global user.name &quot;juncaixinchi&quot; $ git config --global user.email &quot;juncaixinchi111@gmail.com&quot; $ less ~/.gitconfig 获取帮助$ git help &lt;verb&gt; $ git &lt;verb&gt; --help $ man git-&lt;verb&gt; 生成ssh keys，在Github-keys添加即可$ ssh-keygen -t rsa -b 4096 -C &quot;juncaixinchi111@gmail.com&quot; $ clip &lt; ~/.ssh/id_rsa.pub Git 基础在现有目录中初始化仓库$ git init 该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。 $ git add * $ git commit -m &apos;initial project version&apos; 在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，应该开始跟踪这些文件并提交。 克隆现有的仓库克隆blog-generater至当前目录，分别使用HTTPS协议、SSH协议、本地协议 $ git clone https://github.com/juncaixinchi/blog-generater.git $ git clone git@github.com:juncaixinchi/blog-generater.git $ git clone /opt/git/project.git 记录每次更新到仓库$ git add README 使用命令 git add 开始跟踪跟踪 README 文件 $ git status $ git status -s 检查当前文件状态，加-s为简略信息 忽略文件创建一个名为 .gitignore 的文件，列出要忽略的文件模式，文件 .gitignore 的格式规范如下： 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。 # no .a files *.a 匹配模式可以以（/）开头防止递归。 # only ignore the TODO file in the current directory, not subdir/TODO /TODO 匹配模式可以以（/）结尾指定目录。 # ignore all files in the build/ directory build/ 可以使用标准的 glob 模式匹配。 # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory doc/**/*.pdf 提交更新commit命令会提交更新，-m参数可添加提交备注，或者随机生成备注 O__O $ git commit -m &quot;update&quot; $ git commit -m &quot;`curl -s http://whatthecommit.com/index.txt`&quot; 给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 add 步骤 $ git commit -a -m &apos;update without git add&apos; 不过正式的提交还是应该避免-m 添加备注，而是详细的添加 移除文件或移动文件使用 rm 命令将文件从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件，如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f $ git rm file_to_remove.md $ git mv file_from file_to 查看提交历史查看所有log $ git log 显示最近两次提交的差异 $ git log -p -2 显示每次提交的简略的统计信息 $ git log --stat 以pretty的方式显示提交历史 $ git log --pretty=oneline 添加了一些ASCII字符串来形象地展示你的分支、合并历史： $ git log --pretty=format:&quot;%h %s&quot; --graph 只显示作者L在2周内提交的近5条记录 $ git log --author L --since=2.weeks -5 撤消操作尝试重新提交,第二次提交将代替第一次提交的结果 $ git commit -m &apos;initial commit&apos; $ git add forgotten_file $ git commit --amend 取消暂存的文件file_to_cancle.txt(git add 的相反操作) $ git reset HEAD file_to_cancle.txt 撤消对文件的修改，恢复文件file_to_restore.txt到上次提交时候的状态 $ git checkout -- file_to_restore.txt 远程仓库的使用查看远程仓库 $ git remote -v $ git remote show 添加远程仓库，默认为 origin $ git remote add &lt;shortname&gt; &lt;url&gt; $ git remote add pd https://github.com/juncaixinchi/blog-generater.git 从远程仓库中抓取，默认从origin抓取，也可自定义 $ git fetch $ git fetch https://github.com/juncaixinchi/blog-generater.git $ git fetch origin master:tmp git fetch不会自动merge，需再merge $ git fetch origin master:tmp $ git diff tmp $ git merge tmp 直接从远程获取最新版本并merge到本地 $ git pull origin master 使用 git push (remote) (branch)推送到远程仓库，默认推送到origin/master, 也可自定义远程仓库及分支（如serverfix） $ git push $ git push https://github.com/juncaixinchi/blog-generater.git $ git push origin serverfix $ git push origin serverfix:awesomebranch 设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支 $ git checkout --track origin/serverfix 远程仓库的移除和重命名 $ git remote rm paul $ git remote rename pb paul 删除远程分支serverfix $ git push origin --delete serverfix 打标签列出已有标签 $ git tag 创建一个附注标签，指定提交的校验和（或部分校验和）则可后期打标签 $ git tag -a v1.4 -m &apos;my version 1.4&apos; $ git tag -a v0.0 -m &quot;origin version&quot; c76e548 共享标签 $ git push origin v1.5 设置别名通过 config 为命令设置别名，外部程序的命令则要加!，使用cmu直接add 及 commit $ git config --global alias.co checkout $ git config --global alias.br branch $ git config --global alias.st status $ git config --global alias.last &apos;log -1 HEAD&apos; $ git config --global alias.hexo &apos;!hexo g -delpoy&apos; $ git config --global alias.cmu &apos;commit -a -m &quot;update&quot;&apos; $ git config --global alias.logbr &apos;log --oneline --decorate --graph --all -20&apos; Git 分支分支的新建和合并创建分支testing，分支切换为testing，然后commit内容将在test分支进行 $ git branch testing $ git checkout testing 或者在过去某个版本，如593015f,建立分支testing $ git log --oneline --decorate --graph --all $ git checkout 593015f $ git checkout -b testing 使用 log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 –decorate。 $ git log --oneline --decorate $ git log --oneline --decorate --graph --all 使用 merge 来合并分支 $ git merger testing 如果 master 和 testing 分支都各有提交新版本，则无法自动合并，会出现如下错误，需要手动编辑冲突的文件，然后再 commit， Auto Merge Failed; Fix Conflicts and Then Commit the Result 例如冲突的文件内容为： &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html &lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt; ======= &lt;div id=&quot;footer&quot;&gt; please contact us at support@github.com &lt;/div&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; testing:index.html 这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置）在这个区段的上半部分（======= 的上半部分），而 testing 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，必须选择使用由 ======= 分割的两部分中的一个，或者也可以自行合并这些内容。 例如，通过把这段内容换成下面的样子来解决冲突： &lt;div id=&quot;footer&quot;&gt; please contact us at email.support@github.com &lt;/div&gt; 另外也可以使用图形化工具来解决冲突 $ git mergetool 合并完成后删除分支testing $ git branch -d testing 分支的管理显示分支列表 $ git branch 查看每一个分支的最后一次提交 $ git branch -v 查看已经合并或尚未合并到当前分支的分支 $ git branch --merged $ git branch --no-merged 删除和强制删除分支 $ git branch -d testing $ git branch -D testing 分支整合之变基使用 rebase 命令将提交到某一分支 testing 上的所有修改都移至另一分支 master 上，然后回到 master 分支，进行一次快进合并。 $ git checkout testing $ git rebase master $ git checkout master $ git merge testing 直接将特性分支（testing）变基到目标分支（即 master）上 $ git rebase master testing 对两个分支进行变基时，将 client 中的修改合并到主分支并发布，但暂时并不合并 server 中的修改 $ git rebase --onto master server client 变基的风险：不要对在仓库外有副本的分支执行变基 Git工具子模块将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。 $ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next $ git submodule init $ git submodule update $ git submodule update themes/next 在开始克隆含有子模块的仓库时，可添加–recursive，直接递归添加所有子模块 $ git clone --recursive https://github.com/juncaixinchi/blog-generater.git 让 Git 在推送到主项目前检查所有子模块是否已推送 $ git push --recurse-submodules=check 让 Git 自动进入到子模块中，然后在推送主项目前推送了它 $ git push --recurse-submodules=on-demand 遍历子模块运行命令 $ git submodule foreach &apos;git push&apos; 调试通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。 开始二分查找，并设置当前版本为有问题状态 $ git bisect start $ git bisect bad 设定没有问题的版本，然后依次检测个版本，设定 bad or good ，直到找到问题版本 $ git bisect good v1.0 完成后，重置 HEAD 指针到最开始的位置 $ git bisect reset 标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者，通过-L来限定行数 $ git blame $ git blame -L 12,22 file_to_check 在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式 $ git grep 维护项目balabala…"},{"title":"基于Hexo+Next+GitHub搭建个人博客","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/14/Blog-driven-by-hexo/","text":"基于Hexo+Next+GitHub搭建个人博客简介Hexo是依赖于node.js的个人博客生成引擎，可以把基于Markdown的文件生成博客页面，所以整个项目分为两部分： 网页生成 安装配置Hexo及其主题Next，撰写整理博客文档，生成静态页面 blog-generater 网页部署 生成的网页存在于public文件夹内，将其部署到Github Pages或其他服务器即可 Blogs 安装和配置首先要有node.js，然后用npm安装hexo $ npm install -g hexo-cli 切换到博客的位置 $ cd ~/Github/ 生成新的博客文件夹，这会需要一段时间 $ hexo init blog $ cd blog 开启服务器，默认为 http://127.0.0.1:4000/ 可在本地查看 $ hexo server 生成新的文章，这里”Hello Hexo”只是标题，然后可以编辑Hello-Hexo.md撰写博客 $ vi ./source/_posts/Hello-Hexo.md 生成静态文件，以便部署到Github Pages，详细配置见下文 $ hexo generate $ hexo deploy 或者合并 $ hexo generate --deploy 安装压缩页面的插件 $ npm install hexo-all-minifier --save 自动生成静态页面和部署安装 hexo-deployer-git. $ npm install hexo-deployer-openshift --save 编辑配置文件，需在github先新建repository：Blogs deploy: type: git repo: git@github.com:juncaixinchi/Blogs.git branch: master 生成静态文件和自动部署 hexo generate --deploy 配置与添加主题在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 设置网站路径很关键，否则上传至GitHub不能正确加载css和js url: https://juncaixinchi.github.io/Blogs/ root: /Blogs/ 设置 语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： language: zh-Hans 设置 头像将avatar.png放置在 source/images/ 目录下，站点配置文件新增字段 avatar，配置为： avatar: /images/avatar.png 安装主题因为添加主题next，在上传GitHub Pages的时候遇到了以下问题： Page build failed: Missing submodule 发现是submodule没有配置好，删除原来的 themes/next/ 文件使用以下代码重新配置 $ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next $ git submodule init $ git submodule update 选择主题SchemeScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。 #scheme: Muse #scheme: Mist scheme: Pisces 添加标签云页面新建一个页面，命名为 tags 。命令如下： hexo new page &quot;tags&quot; 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如： title: All tags date: 2014-12-22 12:39:04 type: &quot;tags&quot; comments: false --- 在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下: menu: home: / archives: /archives tags: /tags 404页面设置设置腾讯的404公益页面，在source/下添加404.html 12345678910111213&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt; &lt;meta name=\"robots\" content=\"all\" /&gt; &lt;meta name=\"robots\" content=\"index,follow\"/&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://juncaixinchi.github.io/Blogs/\" homePageName=\"回到我的主页\"&gt; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 但是该页面使用http获取js，且其中嵌入的各种链接都是http，而Github要求全部为https。故修改代码（见下面）。其中search_children.js主要提取了data.js及page.js两个文件，前者是寻找儿童的数据，在Github中没问题；后者中默认都是用http加载的js和css，所以不能直接用，故改为https方式获取js与css，直接加入404.html页面，内容详见：404.html 然后生成文件 hexo generate 顺便也可替换404.html，可以避免一次跳转 cp source/404.html public/404.html 然后上传部署，OK hexo deploy Troubleshooting hexo generate的过程可能会报错，可以到[troubleshooting](https://hexo.io/docs/troubleshooting.html)页面查找原因，如页面中含有`{{ }} or {% %}`可能会报错，可以通过用 raw 标签来避免问题 123&#123;% raw %&#125;Hello &#123;&#123; sensitive &#125;&#125;&#123;% endraw %&#125;"},{"title":"Github Git Cheat Sheet","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Github-Git-Cheat-Sheet/","text":"GitHub Git 备忘单Git是一个开源的分布式版本控制系统，方便你在笔记本或桌面端进行GitHub的操作，这个备忘单总结了常用的Git命令行指令，以便快速查询。 转载自GitHub Git 备忘单 要点将所有文件进行快照处理用于版本控制 git add * 将文件快照永久地记录在版本历史中 git commit -m &quot;upload files&quot; 上传所有本地分支commit到GitHub上 git push 安装GitGitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。 GitHub for Windowshttp://windows.github.com GitHub for Machttp://mac.github.com GitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。 Git 全平台版http://git-scm.com 配置工具对你的commit操作设置关联的用户名 $ git config --global user.name &quot;[name]&quot; 对你的commit操作设置关联的邮箱地址 $ git config --global user.email &quot;[email address]&quot; 创建仓库创建一个本地的仓库，并设置名字 $ git init [project-name] 下载一个项目以及它所有的版本历史 $ git clone [url] 更改列出所有新建或者更改的文件，这些文件需要被commit $ git status 展示那些没有暂存文件的差异 $ git diff 将文件进行快照处理用于版本控制 $ git add [file] 展示暂存文件与最新版本之间的不同 $ git diff --staged 将文件移除暂存区，但是保留其内容 $ git reset [file] 将文件快照永久地记录在版本历史中 $ git commit -m&quot;[descriptive message]&quot; 批量更改列出当前仓库中所有的本地分支 $ git branch 建立一个新分支 $ git branch [branch-name] 切换到一个特定的分支上并更新工作目录 $ git checkout [branch-name] 合并特定分支的历史到当前分支 $ git merge [branch-name] 删除特定的分支 $ git branch -d [branch-name] 重构文件从工作目录中删除文件并暂存此删除 $ git rm [file] 从版本控制中移除文件，但不改变本地文件 $ git rm --cached [file] 改变文件名，将其进行快照处理用于版本控制 $ git mv [file-original] [file-renamed] 停止追踪文本文件.gitignore可以防止一些特定的文件进入到版本控制中 *.log build/ temp-* 列出所有项目中忽略的文件 $ git ls-files --others --ignored --exclude-standard 保存临时更改临时存储所有修改的已跟踪文件 $ git stash 重新存储所有最近被stash的文件 $ git stash pop 列出所有被stash的更改 $ git stash list 放弃所有最近stash的更改 $ git stash drop 查阅历史列出当前分支的版本历史 $ git log 列出文件的版本历史，包括重命名 $ git log --follow [file] 展示两个不同分支之间的差异 $ git diff [first-branch]...[second-branch] 输出元数据以及特定commit的内容变化 $ git show [commit] 撤销commit撤销所有[commit]后的的commit，在本地保存更改 $ git reset [commit] 放弃所有更改并回到某个特定的commit $ git reset --hard [commit] 同步更改下载远程仓库的所有历史 $ git fetch [remote] 合并远程分支到当前本地分支 $ git merge [remote]/[branch] 上传所有本地分支commit到GitHub上 $ git push [remote] [branch] 下载远程仓库的所有历史并合并更改 $ git pull"},{"title":"Todo List","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Todo-List/","text":"Todo ListNode/React基于GWAS catalog的基因数据解读爬虫-单词统计-&gt;计算机英语"},{"title":"Markdown note","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Markdown-note/","text":"Markdown语法摘要基本格式标记+空格+内容 标题# 一级标题 # ## 二级标题 ### 三级标题 以此类推，共6级标题，后面的#可加可不加 或者 一级标题 === 二级标题 --- 列表+ 无序列表 - 无序列表 * 无序列表 1. 有序列表 2. 有序列表 引用&gt; 引用 MarkdownPad2快捷键为ctrl+q 图片与链接链接： []() [github](https://github.com) 图片： ![]() ![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico) 实例效果： github 或者 This is [an example][id] reference-style link. [id]: http://example.com/ &quot;Optional Title Here&quot; 实例: This is an example reference-style link. 文本样式*斜体文本* _斜体文本_ **粗体文本** __粗体文本__ 注意必须前后包围，且不连空格 样式： 斜体文本 粗体文本 代码框使用 ` 符号 ` code ` Tab和空格 Tab或4个空格+code 使用123```javascriptcode 分割线*** * * * --- ___ 三个及以上 * 或 - 或 _ ，其间可有空格。 样式： 需要转义的字符\\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号"},{"title":"node install note","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/node-install-note/","text":"Node安装与npm环境变量配置 Node安装进入nodejs官方网站下载软件(nodejs.org) Windows环境下的NodeJS+NPM+Bower安装配置 Windows环境下的NodeJS+NPM+Bower安装配置 下载完成后，双击默认安装。安装程序会自动添加环境变量Windows环境下的NodeJS+NPM+Bower安装配置 检测nodejs是否安装成功。打开cmd命令行 输入 node - v 显示当前版本号 Windows环境下的NodeJS+NPM+Bower安装配置 检查npm是否安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行中键入 npm -v Windows环境下的NodeJS+NPM+Bower安装配置 npm环境变量配置npm作为一个NodeJS的模块管理，之前我由于没有系统地看资料所以导致安装配置模块的时候走了一大段弯路，所以现在很有必要列出来记录下。我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立“node_global”及“node_cache”两个文件夹。我们就在cmd中键入两行命令： npm config set prefix “D:\\Program Files\\nodejs\\node_global” 和 npm config set cache “D:\\Program Files\\nodejs\\node_cache” 下面这一步非常关键，我们需要设置系统变量。进入我的电脑→属性→高级→环境变量。在系统变量下新建“NODE_PATH”，输入“D:\\Program Files\\nodejs\\node_global\\node_modules”。安装bower, npm install bower -g; -g表示全局 输入 node，require(‘bower’) 测试是否安装成功！"},{"title":"Hello Hexo","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/Hello-Hexo/","text":"Hello Hexo !"},{"title":"Hello World","permalink":"https://juncaixinchi.github.io/Blogs/Blogs/2017/02/12/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]}