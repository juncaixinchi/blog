[{"title":"Github Git Cheat Sheet","date":"2017-02-12T08:42:19.000Z","path":"2017/02/12/Github-Git-Cheat-Sheet/","text":"GitHub Git 备忘单要点git add * 将所有文件进行快照处理用于版本控制 git commit -m &quot;upload files&quot; 将文件快照永久地记录在版本历史中 git push 上传所有本地分支commit到GitHub上 详细内容Git是一个开源的分布式版本控制系统，方便你在笔记本或桌面端进行GitHub的操作，这个备忘单总结了常用的Git命令行指令，以便快速查询。 转载自 https://services.github.com/on-demand/downloads/zh_CN/github-git-cheat-sheet/ 安装GitGitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。 GitHub for Windowshttp://windows.github.com GitHub for Machttp://mac.github.com GitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。 Git 全平台版http://git-scm.com 配置工具对所有本地仓库的用户信息进行配置 $ git config --global user.name &quot;[name]&quot; 对你的commit操作设置关联的用户名 $ git config --global user.email &quot;[email address]&quot; 对你的commit操作设置关联的邮箱地址 创建仓库创建一个新的仓库或者从一个现有的链接获取仓库 $ git init [project-name] 创建一个本地的仓库，并设置名字 $ git clone [url] 下载一个项目以及它所有的版本历史 更改检查已有的编辑并执行commit操作 $ git status 列出所有新建或者更改的文件，这些文件需要被commit $ git diff 展示那些没有暂存文件的差异 $ git add [file] 将文件进行快照处理用于版本控制 $ git diff --staged 展示暂存文件与最新版本之间的不同 $ git reset [file] 将文件移除暂存区，但是保留其内容 $ git commit -m&quot;[descriptive message]&quot; 将文件快照永久地记录在版本历史中 批量更改命名一系列commit以及合并已完成的工作 $ git branch 列出当前仓库中所有的本地分支 $ git branch [branch-name] 建立一个新分支 $ git checkout [branch-name] 切换到一个特定的分支上并更新工作目录 $ git merge [branch-name] 合并特定分支的历史到当前分支 $ git branch -d [branch-name] 删除特定的分支 重构文件重定位并移除版本文件 $ git rm [file] 从工作目录中删除文件并暂存此删除 $ git rm --cached [file] 从版本控制中移除文件，并在本地保存文件 $ git mv [file-original] [file-renamed] 改变文件名并准备commit 停止追踪不包含临时文件和路径 *.log build/ temp-* 文本文件.gitignore可以防止一些特定的文件进入到版本控制中 $ git ls-files --others --ignored --exclude-standard 列出所有项目中忽略的文件 保存临时更改暂存一些未完成的更改 $ git stash 临时存储所有修改的已跟踪文件 $ git stash pop 重新存储所有最近被stash的文件 $ git stash list 列出所有被stash的更改 $ git stash drop 放弃所有最近stash的更改 查阅历史浏览并检查项目文件的发展 $ git log 列出当前分支的版本历史 $ git log --follow [file] 列出文件的版本历史，包括重命名 $ git diff [first-branch]...[second-branch] 展示两个不同分支之间的差异 $ git show [commit] 输出元数据以及特定commit的内容变化 撤销commit擦除错误并更改历史 $ git reset [commit] 撤销所有[commit]后的的commit，在本地保存更改 $ git reset --hard [commit] 放弃所有更改并回到某个特定的commit 同步更改注册一个远程的链接，交换仓库的版本历史 $ git fetch [remote] 下载远程仓库的所有历史 $ git merge [remote]/[branch] 合并远程分支到当前本地分支 $ git push [remote] [branch] 上传所有本地分支commit到GitHub上 $ git pull 下载书签历史并合并更改","tags":[{"name":"cheat-sheet","slug":"cheat-sheet","permalink":"https://juncaixinchi.github.io/Blogs/tags/cheat-sheet/"},{"name":"git","slug":"git","permalink":"https://juncaixinchi.github.io/Blogs/tags/git/"},{"name":"Github","slug":"Github","permalink":"https://juncaixinchi.github.io/Blogs/tags/Github/"}]},{"title":"Todo List","date":"2017-02-12T08:42:01.000Z","path":"2017/02/12/Todo-List/","text":"Todo List基于GWAS catalog的基因数据解读Blog计算机英语React教程","tags":[{"name":"blog","slug":"blog","permalink":"https://juncaixinchi.github.io/Blogs/tags/blog/"}]},{"title":"Markdown note","date":"2017-02-12T08:41:46.000Z","path":"2017/02/12/Markdown-note/","text":"Markdown语法摘要 基本格式 标记+空格+内容 标题 # 一级标题 # ## 二级标题 ### 三级标题 以此类推，共6级标题，后面的#可加可不加 或者 一级标题 === 二级标题 --- 列表 + 无序列表 - 无序列表 * 无序列表 1. 有序列表 2. 有序列表 引用引用 MarkdownPad2快捷键为ctrl+q 图片与链接 行内式： 链接为： 例如： github 图片为：![]()例如：![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)实例： github 或者 This is [an example][id] reference-style link. [id]: http://example.com/ &quot;Optional Title Here&quot; 实例: This is an example reference-style link. 文本样式 *斜体文本* _斜体文本_ **粗体文本** __粗体文本__ 注意必须前后包围，且不连空格 样式： 斜体文本 粗体文本 代码框 ` code ` Tab或4个空格+code 分割线 *** * * * --- ___ 三个及以上 * 或 - 或 _ ，其间可有空格。 样式： 转义 \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://juncaixinchi.github.io/Blogs/tags/Markdown/"},{"name":"cheat-sheet","slug":"cheat-sheet","permalink":"https://juncaixinchi.github.io/Blogs/tags/cheat-sheet/"}]},{"title":"node install note","date":"2017-02-12T08:39:15.000Z","path":"2017/02/12/node-install-note/","text":"Node安装与npm环境变量配置 Node安装进入nodejs官方网站下载软件(nodejs.org) Windows环境下的NodeJS+NPM+Bower安装配置 Windows环境下的NodeJS+NPM+Bower安装配置 下载完成后，双击默认安装。安装程序会自动添加环境变量Windows环境下的NodeJS+NPM+Bower安装配置 检测nodejs是否安装成功。打开cmd命令行 输入 node - v 显示当前版本号 Windows环境下的NodeJS+NPM+Bower安装配置 检查npm是否安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行中键入 npm -v Windows环境下的NodeJS+NPM+Bower安装配置 npm环境变量配置npm作为一个NodeJS的模块管理，之前我由于没有系统地看资料所以导致安装配置模块的时候走了一大段弯路，所以现在很有必要列出来记录下。我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立“node_global”及“node_cache”两个文件夹。我们就在cmd中键入两行命令： npm config set prefix “D:\\Program Files\\nodejs\\node_global” 和 npm config set cache “D:\\Program Files\\nodejs\\node_cache” 下面这一步非常关键，我们需要设置系统变量。进入我的电脑→属性→高级→环境变量。在系统变量下新建“NODE_PATH”，输入“D:\\Program Files\\nodejs\\node_global\\node_modules”。安装bower, npm install bower -g; -g表示全局 输入 node，require(‘bower’) 测试是否安装成功！","tags":[{"name":"node.js","slug":"node-js","permalink":"https://juncaixinchi.github.io/Blogs/tags/node-js/"}]},{"title":"基于Hexo+Next+GitHub搭建个人博客","date":"2017-02-12T08:24:56.000Z","path":"2017/02/12/Blog-driven-by-hexo/","text":"基于Hexo+Next+GitHub搭建个人博客简介Hexo是依赖于node.js的个人博客生成引擎，可以把基于Markdown的文件生成博客页面，所以整个项目分为两部分： 网页生成 安装配置Hexo及其主题Next，撰写整理博客文档，生成静态页面 blog-generater 网页部署 生成的网页存在于public文件夹内，将其部署到Github Pages或其他服务器即可 Blogs 安装和配置Hexo首先要有node.js，然后用npm安装hexo npm install -g hexo-cli 切换到博客的位置 cd ~/Github/ 生成新的博客文件夹，这会需要一段时间 hexo init blog cd blog 开启服务器，默认为 http://127.0.0.1:4000/ 可在本地查看 hexo server 生成新的文章，这里”Hello Hexo”只是标题，然后可以编辑Hello-Hexo.md撰写博客 vi ./source/_posts/Hello-Hexo.md 生成静态文件，以便部署到Github Pages，详细配置见下文 hexo generate hexo deploy 或者合并 hexo generate --deploy 自动生成静态页面和部署（generate and deploy）安装 hexo-deployer-git. $ npm install hexo-deployer-openshift --save 编辑配置文件，需在github先新建repository：Blogs deploy: type: git repo: git@github.com:juncaixinchi/Blogs.git branch: master 生成静态文件和自动部署 hexo generate --deploy 配置与添加主题在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 设置网站路径，很关键，否则上传至GitHub不能正确加载css和jsurl: https://juncaixinchi.github.io/Blogs/ root: /Blogs/ 设置 语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： language: zh-Hans 设置 头像将avatar.png放置在 source/images/ 目录下，站点配置文件新增字段 avatar，配置为： avatar: /images/avatar.png 安装主题因为添加主题next，在上传GitHub Pages的时候遇到了以下问题： Page build failed: Missing submodule 发现是submodule没有配置好，删除原来的 themes/next/ 文件使用以下代码重新配置 $ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next $ git submodule init $ git submodule update 选择主题SchemeScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。 #scheme: Muse #scheme: Mist scheme: Pisces 添加一个标签云页面，并在菜单中显示页面链接。新建一个页面，命名为 tags 。命令如下： hexo new page &quot;tags&quot; 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如： title: All tags date: 2014-12-22 12:39:04 type: &quot;tags&quot; comments: false --- 在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下: menu: home: / archives: /archives tags: /tags 404页面设置设置腾讯的404公益页面，在source/下添加404.html12345678910111213&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt; &lt;meta name=\"robots\" content=\"all\" /&gt; &lt;meta name=\"robots\" content=\"index,follow\"/&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://juncaixinchi.github.io/Blogs/\" homePageName=\"回到我的主页\"&gt; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 但是该页面使用http获取js，而Github要求全部为https，故修改代码为 12345678910111213&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt; &lt;meta name=\"robots\" content=\"all\" /&gt; &lt;meta name=\"robots\" content=\"index,follow\"/&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=\"text/javascript\" src=\"404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://juncaixinchi.github.io/Blogs/\" homePageName=\"回到我的主页\"&gt; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 添加404目录 hexo new page &quot;404&quot; 在source/404/，添加新文件search_children.js，内容为： 123var _base = 'https://qzone.qq.com/gy/404/';document.write('&lt;script type=\"text/javascript\" src=\"' + _base + 'data.js\" charset=\"utf-8\"&gt;&lt;/script&gt;');document.write('&lt;script type=\"text/javascript\" src=\"'+ _base + 'page.js\" charset=\"utf-8\"&gt;&lt;/script&gt;');","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://juncaixinchi.github.io/Blogs/tags/Hexo/"},{"name":"next","slug":"next","permalink":"https://juncaixinchi.github.io/Blogs/tags/next/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://juncaixinchi.github.io/Blogs/tags/GitHub-Pages/"},{"name":"blog","slug":"blog","permalink":"https://juncaixinchi.github.io/Blogs/tags/blog/"}]},{"title":"Hello Hexo","date":"2017-02-12T08:24:56.000Z","path":"2017/02/12/Hello-Hexo/","text":"","tags":[]},{"title":"Hello World","date":"2017-02-12T08:20:13.445Z","path":"2017/02/12/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"cheat-sheet","slug":"cheat-sheet","permalink":"https://juncaixinchi.github.io/Blogs/tags/cheat-sheet/"}]}]