{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"themes/material-flow/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/lovewallpaper.json","path":"js/lovewallpaper.json","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/search.js","path":"js/search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"5c1821e9f8ec387916742adaa4ad12ecebda7e5b","modified":1490067053811},{"_id":"themes/material-flow/.git","hash":"689a14f269dd7e395169860094ebe393411933b5","modified":1490067392746},{"_id":"themes/material-flow/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1490067392770},{"_id":"themes/material-flow/README.md","hash":"c5f44d52405b983af98fb03ffd62bcf63a8de661","modified":1490067392770},{"_id":"themes/material-flow/_config.yml","hash":"44d01cc30f8b077d5ea17bda29599eef16256563","modified":1490067392770},{"_id":"source/_data/links.yml","hash":"0b4b7f8e4bfc7d4cba8c21388f4ec6b5b2778224","modified":1490067053811},{"_id":"source/_data/menu.yml","hash":"ae54bd002dc4becdd9aeb6080fb59bcfd9a55407","modified":1490067053811},{"_id":"source/_data/widgets.yml","hash":"6fbca441098a593ee46feccdc4884e6d6ecf7452","modified":1490067053811},{"_id":"source/_posts/Blog-driven-by-hexo.md","hash":"e082cf44b4368d5dbba2f2654c50d0d3b08451ac","modified":1490067053811},{"_id":"source/_posts/ECMAScript-6-note.md","hash":"3c866faa8e8f957839388dfd743ee30d1cdadf20","modified":1490067053811},{"_id":"source/_posts/Git-note.md","hash":"1acc6c0ea571ed2982dbf45878d115d0fdda2917","modified":1490067053823},{"_id":"source/_posts/Github-Git-Cheat-Sheet.md","hash":"20bc6ecc58a2830d20ff9220c1a5a2fc984bc0e1","modified":1490067053823},{"_id":"source/_posts/Hello-Hexo.md","hash":"e413330d47127628e7de9a6d0c2a98cc7efcf0c9","modified":1490067053823},{"_id":"source/_posts/JSX-Syntax.md","hash":"9c0c2645336607586dc226c1797ffbe70cbc9669","modified":1490067053823},{"_id":"source/_posts/Javascript-note.md","hash":"73f71b7ff651869fa98d51af05531d93990804c3","modified":1490067053823},{"_id":"source/_posts/Lifting-State-Up.md","hash":"00d8d21b6fcd9b7d6c6c840f4fb3becc3f6be0be","modified":1490067053823},{"_id":"source/_posts/Markdown-note.md","hash":"3729ddef10bf8afea6a32faa6eb317b7dd911880","modified":1490067053823},{"_id":"source/_posts/React-Develop-Environment.md","hash":"84d3b44dc716e903cbed2b3b6ee62c05edfa9c2a","modified":1490067053823},{"_id":"source/_posts/Simple-Canvas-Game.md","hash":"b089af21ec8d447f53df9c143d0ace6f630dfb58","modified":1490067053823},{"_id":"source/_posts/Vim-Setting.md","hash":"2b5694103f5aaecd7e630c180edcb98edf3ea0fd","modified":1490067053823},{"_id":"source/_posts/Todo-List.md","hash":"f50f3a0fe8ed3dfa1a7a9b3dc0de1b61645182df","modified":1490067053823},{"_id":"source/_posts/hello-world.md","hash":"6306a3773872db0a8548ae9fdbea81ca6710b867","modified":1490067053823},{"_id":"source/_posts/node-install-note.md","hash":"7404eaac390df8a47f48bd1b5e7ebba1ccb030a8","modified":1490067053823},{"_id":"source/_posts/npm-mirror.md","hash":"a306f5529bd7f4e541b5f988a1169f2b9bc66f8e","modified":1490067053823},{"_id":"source/about/index.md","hash":"903d1f1bf58f9746593cee5bbc0a60db28d24a1c","modified":1490067053823},{"_id":"source/images/avatar.jpg","hash":"71f049f18d5db5589afe2251038f1d323b1ece73","modified":1490067053823},{"_id":"source/images/avatar.png","hash":"0ef24e214e37d91880e60b5bf681787f5733481f","modified":1490067053823},{"_id":"source/images/favicon.ico","hash":"c7526962c597b1709a348dbd7ca0cd7124581d57","modified":1490067053823},{"_id":"source/img/avatar.png","hash":"0ef24e214e37d91880e60b5bf681787f5733481f","modified":1490067053823},{"_id":"source/img/favicon.ico","hash":"c7526962c597b1709a348dbd7ca0cd7124581d57","modified":1490067053823},{"_id":"source/tags/index.md","hash":"53add7df786b2ef7ee9f41798299cea42091d7db","modified":1490067053823},{"_id":"themes/material-flow/layout/archive.ejs","hash":"77b68496e89bfa27cb5b61b682e2c61d843fa4e6","modified":1490067392770},{"_id":"themes/material-flow/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1490067392770},{"_id":"themes/material-flow/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1490067392770},{"_id":"themes/material-flow/layout/layout.ejs","hash":"9c285ea320f9a9cf6131d73a6756cbf3bd07e0c7","modified":1490067392770},{"_id":"themes/material-flow/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490067392770},{"_id":"themes/material-flow/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490067392770},{"_id":"themes/material-flow/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1490067392770},{"_id":"themes/material-flow/snapshots/phone.png","hash":"479187e3103d1caa95cedd75fc23604dc073488e","modified":1490067392778},{"_id":"themes/material-flow/source/style.less","hash":"c168abd099ab9de9cdf72feb05f96251a3c76384","modified":1490067392778},{"_id":"themes/material-flow/layout/_partial/archive.ejs","hash":"80bf9872353b4409f74d54ae4946de910f0508a2","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/article.ejs","hash":"c164ac5c55916dc9c8d4770b9e7f00b653e76774","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/categories.ejs","hash":"761fda43c385e81324b628dfab6377b82bfdf82a","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/footer.ejs","hash":"a8d0ee768920a69818e0065a65a94109b72cb77d","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/head.ejs","hash":"813d29da9895dd41afc895ba4dbb6ee4d1e7af42","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/header.ejs","hash":"df128914eb76a0de80764919bd707bad008f9f57","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/post.ejs","hash":"16d695e09c9d73e3e01b78f8b5385690d45d98a1","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/scripts.ejs","hash":"456c65e7c1f93c66511e0976ea88a744d3e6b7de","modified":1490067392770},{"_id":"themes/material-flow/layout/_partial/side.ejs","hash":"6c7a3118c718d75fbb0a94627ae6e06ab0026cde","modified":1490067392770},{"_id":"themes/material-flow/layout/_widget/about.ejs","hash":"39c1f870f2338da484e17bbdb0d6a46c0a90681f","modified":1490067392770},{"_id":"themes/material-flow/layout/_widget/categories.ejs","hash":"2be2c85e4c5275d08e524fabdb38f046054b874a","modified":1490067392770},{"_id":"themes/material-flow/layout/_widget/friendly-links.ejs","hash":"87d0f85ab29ee5cac05e4f28fcf6652d187eba93","modified":1490067392770},{"_id":"themes/material-flow/layout/_widget/tagcloud.ejs","hash":"914698bcc4210b5f984e12166eca3c86de631968","modified":1490067392770},{"_id":"themes/material-flow/source/fonts/icomoon.eot","hash":"09e365cb1dfa85a63d0841b69c30020cff621dad","modified":1490067392778},{"_id":"themes/material-flow/source/fonts/icomoon.svg","hash":"f3efaca04d1f812242163713838f30147abab693","modified":1490067392778},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","hash":"db33ccce951a88b6a08f147363ace84d20db93ae","modified":1490067392778},{"_id":"themes/material-flow/source/fonts/icomoon.woff","hash":"c58f59e279dcc265fb43a0d8378b92064c120ce8","modified":1490067392778},{"_id":"themes/material-flow/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1490067392778},{"_id":"themes/material-flow/source/js/app.js","hash":"fe247403edafde3a4f45eb2647db36a06a0a95b1","modified":1490067459258},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1490067392778},{"_id":"themes/material-flow/source/js/lovewallpaper.json","hash":"9afc32940fe1d85d1a03e24a0a7941e1aad6ec02","modified":1490067392778},{"_id":"themes/material-flow/source/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1490067392778},{"_id":"themes/material-flow/source/less/_archive.less","hash":"024e85db42c4440cba184efb6719c205108de2db","modified":1490067392778},{"_id":"themes/material-flow/source/less/_article.less","hash":"8ef5556aa23306696901f62f5ee5a6e6c06fde01","modified":1490067392778},{"_id":"themes/material-flow/source/less/_base.less","hash":"58aa73d2b188a8cbee93dd5af6cdccc7ed6b2176","modified":1490067392778},{"_id":"themes/material-flow/source/less/_defines.less","hash":"ba5ac0e55971477df1fd31dfed79ea6b35b3f103","modified":1490067392778},{"_id":"themes/material-flow/source/less/_fonts.less","hash":"b1cbf0f65b5e0dfb995fe2f115b58501e3c7adff","modified":1490067392778},{"_id":"themes/material-flow/source/less/_footer.less","hash":"973b1f9c62159f345833db5c30db03c351c66c5c","modified":1490067392778},{"_id":"themes/material-flow/source/less/_header.less","hash":"6b133e0072f45697c476b0634d99ed43c9b86a71","modified":1490067392778},{"_id":"themes/material-flow/source/less/_main.less","hash":"1e3a4ee949eca23d4fd4b36d1d37ce324816f06b","modified":1490067392778},{"_id":"themes/material-flow/source/less/_normalize.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1490067392778},{"_id":"themes/material-flow/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1490067392778},{"_id":"themes/material-flow/source/less/_search.less","hash":"ab1e3d8fdd489adde30723c40726e5e8187a8b6c","modified":1490067392778},{"_id":"themes/material-flow/source/less/_side.less","hash":"cfc75303c93a291d5c1e66067642f1c2747dcc04","modified":1490067392778},{"_id":"themes/material-flow/source/less/_tog.less","hash":"bff0ab3b06e14a3c171ccd53061f8ccddb1e2fc2","modified":1490067392778},{"_id":"themes/material-flow/source/less/_typo.less","hash":"8635fe95a08614f22833c6c159ebf6cf3d731e12","modified":1490067392778},{"_id":"themes/material-flow/source/less/_widget.less","hash":"07806b5d8123811f75f8dbf11463ba9444f2f56b","modified":1490067392778},{"_id":"themes/material-flow/snapshots/desktopv2.png","hash":"7f1137151707becacd842529aac410566e1ac6a5","modified":1490067392774},{"_id":"public/atom.xml","hash":"2664b5a0901856b0ae86e4e41b034471385083ea","modified":1490068609138},{"_id":"public/content.json","hash":"a7b9e17c05866e35bba2d3016c437a573dc7a42c","modified":1490068609378},{"_id":"public/search.xml","hash":"d0b57d52b58494490a9e2f176b4c178c0cec8513","modified":1490068609387},{"_id":"public/about/index.html","hash":"3106a67e2dfa678af495b7dde1e8ab284754a5fa","modified":1490068609394},{"_id":"public/tags/index.html","hash":"5315dde3e55e261e60fa89378fd3d2cf5e5187c6","modified":1490068609394},{"_id":"public/2017/03/21/hello-world/index.html","hash":"c94a597533604ceea80547cdb455506b6e0edde8","modified":1490068609394},{"_id":"public/2017/03/20/npm-mirror/index.html","hash":"cfdd857b8541a4ddfbd8fab982c28eceefa5453e","modified":1490068609394},{"_id":"public/2017/02/12/Todo-List/index.html","hash":"8172a81e060ca71c216b7c74c71cad54f9e9e9d9","modified":1490068609394},{"_id":"public/2017/02/12/Markdown-note/index.html","hash":"ca8097425219a94803fc73e0e0255380da510972","modified":1490068609394},{"_id":"public/2017/02/12/node-install-note/index.html","hash":"0e7a223e2595526d4a76dee6ff0d88f5085c3a75","modified":1490068609394},{"_id":"public/2017/02/12/Hello-Hexo/index.html","hash":"3f1286f9166f2cb8070db7cfe75b1b5122145420","modified":1490068609394},{"_id":"public/archives/index.html","hash":"418f9afdfa340e8af96dd5eee106794001672e47","modified":1490068609394},{"_id":"public/archives/page/2/index.html","hash":"e9bb960a29ea5d3f0445a0722345b0571f0d190a","modified":1490068609394},{"_id":"public/archives/2017/page/2/index.html","hash":"c19d0bb2941e9ad19be4f19b5cc47b483a6f29c3","modified":1490068609394},{"_id":"public/archives/2017/03/index.html","hash":"d21b90e3c0368fc5f9a6f69e3553c0a0f5dc4451","modified":1490068609394},{"_id":"public/page/2/index.html","hash":"29889190db9f8b19c3f033d3c6aede8364674d6a","modified":1490068609394},{"_id":"public/tags/Hexo/index.html","hash":"5b1ae9f9ec9cf7b620ad8c77b4802e6e5daf01ba","modified":1490068609394},{"_id":"public/tags/Next/index.html","hash":"3d760a9f1d073944769d2dd2daefc5c6045e51eb","modified":1490068609395},{"_id":"public/tags/GitHub-Pages/index.html","hash":"4efecb1d6e184b8d08233d311feceaaa0fdae3b0","modified":1490068609395},{"_id":"public/tags/Blog/index.html","hash":"10158117827f06fedbe314aa4b1ae789a66236d2","modified":1490068609395},{"_id":"public/tags/Git/index.html","hash":"4f8cb177a35b12ff75a194ec26c5d74544355571","modified":1490068609395},{"_id":"public/tags/Github/index.html","hash":"fcf6020acc29ad4e66e0a07967136807ace6a70f","modified":1490068609395},{"_id":"public/tags/Cheat-sheet/index.html","hash":"1c2b4ae425bf4d211b356b311cc1f08973d85c18","modified":1490068609395},{"_id":"public/tags/React/index.html","hash":"3d40b05d4977f7cd4ab99f940f5a7bfa86fa7cc5","modified":1490068609395},{"_id":"public/tags/JSX/index.html","hash":"cef0c3ef9e6cf8b18ed355ad5ac803f7c91a5a2e","modified":1490068609395},{"_id":"public/tags/JavaScript/index.html","hash":"10e122ddaed0c5fca0046b0129619a34b8934f02","modified":1490068609395},{"_id":"public/tags/ES6/index.html","hash":"9541d44e585ae461784fd6a95ff93574b2ac967d","modified":1490068609395},{"_id":"public/tags/state/index.html","hash":"c6fff80c0507c528337d0a70c3d0b0ed6d5f6f6d","modified":1490068609395},{"_id":"public/tags/Markdown/index.html","hash":"b606d6583925d921051cffc91600e8bc5613df75","modified":1490068609395},{"_id":"public/tags/Canvas/index.html","hash":"f5db5c348ebfd3b480318f45c121da81f5d74c5d","modified":1490068609395},{"_id":"public/tags/Game/index.html","hash":"a696fb41b98a9dba04a90c8a409be1d6d0f69fdb","modified":1490068609395},{"_id":"public/tags/Demo/index.html","hash":"30bde4f648d8b6a7db6d368597ef8d112c158909","modified":1490068609395},{"_id":"public/tags/Vim/index.html","hash":"8d15cf236dca1096182bb8afa4d36473847ecdb3","modified":1490068609395},{"_id":"public/tags/Linux/index.html","hash":"f3e394aa5624e31070c0eed9a8be1740dbe82d75","modified":1490068609395},{"_id":"public/tags/Node-js/index.html","hash":"c755e735fd35a85dba4703f512277f5e519809a3","modified":1490068609395},{"_id":"public/tags/npm/index.html","hash":"e8ffa4ed7d2cecb67793113512bf607d46917ffb","modified":1490068609395},{"_id":"public/404.html","hash":"f1ff5c576c8e284a7663b14ea13d824e90d550e4","modified":1490068609395},{"_id":"public/2017/03/19/React-Develop-Environment/index.html","hash":"8e6e7e234ed780c28ba2c6f8f8d96459db81e621","modified":1490068609396},{"_id":"public/2017/03/18/Vim-Setting/index.html","hash":"5ccb097242c97e6669fb4293b51177dc10fee214","modified":1490068609396},{"_id":"public/2017/03/10/Lifting-State-Up/index.html","hash":"ca0d7453b38fa2f7ef130d4087f445c268fa259c","modified":1490068609396},{"_id":"public/2017/03/04/JSX-Syntax/index.html","hash":"b4e20248223f9661dd621d83446ee6feca015590","modified":1490068609396},{"_id":"public/2017/03/02/ECMAScript-6-note/index.html","hash":"067b4d4976b31c41718e8cc9e472b38059cb783b","modified":1490068609396},{"_id":"public/2017/02/22/Javascript-note/index.html","hash":"f7868f8b1992dbc938a254d7a30aa09612345d58","modified":1490068609396},{"_id":"public/2017/02/18/Simple-Canvas-Game/index.html","hash":"6eaf92cdd37634408309ca737f9784631520dcb0","modified":1490068609396},{"_id":"public/2017/02/14/Git-note/index.html","hash":"f0e30b88fdf05046bfcc62b3f74402bffe253a5a","modified":1490068609396},{"_id":"public/2017/02/14/Blog-driven-by-hexo/index.html","hash":"3d4f1fdd6d210710f4b93ff2d0d2df0b7b87c509","modified":1490068609396},{"_id":"public/2017/02/12/Github-Git-Cheat-Sheet/index.html","hash":"a143eceacaca77b444f715b09967dafdbaca8519","modified":1490068609396},{"_id":"public/archives/2017/index.html","hash":"f91f56768b293870c9c08fd410786432054d1633","modified":1490068609396},{"_id":"public/archives/2017/02/index.html","hash":"e3f6c993d0dd1385067894435075968dcfdc1fdb","modified":1490068609396},{"_id":"public/index.html","hash":"80c6bc7713ba2c7ff83de863e606c2a721ea527f","modified":1490068609396},{"_id":"public/images/avatar.jpg","hash":"71f049f18d5db5589afe2251038f1d323b1ece73","modified":1490068609401},{"_id":"public/images/avatar.png","hash":"0ef24e214e37d91880e60b5bf681787f5733481f","modified":1490068609402},{"_id":"public/images/favicon.ico","hash":"c7526962c597b1709a348dbd7ca0cd7124581d57","modified":1490068609402},{"_id":"public/img/favicon.ico","hash":"c7526962c597b1709a348dbd7ca0cd7124581d57","modified":1490068609402},{"_id":"public/img/avatar.png","hash":"0ef24e214e37d91880e60b5bf681787f5733481f","modified":1490068609402},{"_id":"public/fonts/icomoon.eot","hash":"09e365cb1dfa85a63d0841b69c30020cff621dad","modified":1490068609402},{"_id":"public/fonts/icomoon.ttf","hash":"db33ccce951a88b6a08f147363ace84d20db93ae","modified":1490068609402},{"_id":"public/fonts/icomoon.svg","hash":"f3efaca04d1f812242163713838f30147abab693","modified":1490068609402},{"_id":"public/fonts/icomoon.woff","hash":"c58f59e279dcc265fb43a0d8378b92064c120ce8","modified":1490068609402},{"_id":"public/js/app.js","hash":"fe247403edafde3a4f45eb2647db36a06a0a95b1","modified":1490068609417},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1490068609417},{"_id":"public/fonts/selection.json","hash":"c38f13105ee7c35a67476dd80eaa2ffd037c124b","modified":1490068609417},{"_id":"public/js/lovewallpaper.json","hash":"b4b3cdff9cb3c7f1d5d4b43799f565cc3a1413b2","modified":1490068609417},{"_id":"public/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1490068609417},{"_id":"public/style.css","hash":"339be9449a9a4df515f6920fc2bae91d94685a66","modified":1490068609677}],"Category":[],"Data":[{"_id":"widgets","data":["about","tagcloud"]},{"_id":"menu","data":[{"name":"Home","slug":"home","url":"/"},{"name":"Archives","slug":"archives","url":"/archives"},{"name":"About","slug":"about","url":"/about"}]},{"_id":"links","data":[{"name":"Github","url":"https://github.com/"}]}],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n\tcharset=\"utf-8\" homePageUrl=\"/Blogs/\"\n\thomePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n\tcharset=\"utf-8\" homePageUrl=\"/Blogs/\"\n\thomePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>","date":"2017-03-21T03:30:53.811Z","updated":"2017-03-21T03:30:53.811Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj0j0dko6000077hxvaepawqk","content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/Blogs/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n\tcharset=\"utf-8\" homePageUrl=\"/Blogs/\"\n\thomePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>"},{"title":"关于我","date":"2017-02-13T13:06:20.000Z","_content":"\n不知疲倦的翻越，每一座山丘！\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-02-13 21:06:20\n---\n\n不知疲倦的翻越，每一座山丘！\n\n","updated":"2017-03-21T03:30:53.823Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0j0dkot000277hxinjhqks5","content":"<p>不知疲倦的翻越，每一座山丘！</p>\n","excerpt":"","more":"<p>不知疲倦的翻越，每一座山丘！</p>\n"},{"title":"All tags","date":"2017-02-12T13:51:11.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2017-02-12 21:51:11\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-21T03:30:53.823Z","path":"tags/index.html","layout":"page","_id":"cj0j0dkq8002977hxw97ve69m","content":"","excerpt":"","more":""}],"Post":[{"title":"基于Hexo+Next+GitHub搭建个人博客","date":"2017-02-14T08:24:56.000Z","_content":"\n\n基于Hexo+Next+GitHub搭建个人博客\n===\n\n### 简介\n\nHexo是依赖于node.js的个人博客生成引擎，可以把基于Markdown的文件生成博客页面，所以整个项目分为两部分：\n\n1. 网页生成\n\n\t安装配置Hexo及其主题Next，撰写整理博客文档，生成静态页面 [blog-generater](https://github.com/juncaixinchi/blog-generater)\n\n2. 网页部署\n\n\t生成的网页存在于public文件夹内，将其部署到Github Pages或其他服务器即可 [Blogs](https://juncaixinchi.github.io/Blogs/)\n\n<!-- more -->\n\n### 安装和配置\n\n首先要有node.js，然后用npm安装hexo\n\n\t$ npm install -g hexo-cli\n\n切换到博客的位置\n\n\t$ cd ~/Github/\n\n生成新的博客文件夹，这会需要一段时间\n\n\t$ hexo init blog\n\t$ cd blog\n\n\n开启服务器，默认为 http://127.0.0.1:4000/ 可在本地查看\n\n\t$ hexo server\n\n生成新的文章，这里\"Hello Hexo\"只是标题，然后可以编辑Hello-Hexo.md撰写博客\n\n\t$ vi ./source/_posts/Hello-Hexo.md\n\n生成静态文件，以便部署到Github Pages，详细配置见下文\n\n\t$ hexo generate\n\n\t$ hexo deploy\n\n或者合并\n\n\t$ hexo generate --deploy\n\n安装压缩页面的插件\n\n\t$ npm install hexo-all-minifier --save\n\n### 自动生成静态页面和部署\n\n安装 hexo-deployer-git.\n\n\t$ npm install hexo-deployer-openshift --save\n\n编辑配置文件，需在github先新建repository：Blogs\n\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:juncaixinchi/Blogs.git\n\t  branch: master\n\t  \n生成静态文件和自动部署\n\n\thexo generate --deploy\n\n\n### 配置与添加主题\n\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。\n\n#### 设置网站路径\n\n很关键，否则上传至GitHub不能正确加载css和js\n\n\turl: https://juncaixinchi.github.io/Blogs/\n\troot: /Blogs/\n\n#### 设置 语言\n\n编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n\n\tlanguage: zh-Hans\n\n#### 设置 头像\n\n将avatar.png放置在 source/images/ 目录下，站点配置文件新增字段 avatar，配置为：\n\t\n\tavatar: /images/avatar.png\n\n#### 安装主题\n\n因为添加主题next，在上传GitHub Pages的时候遇到了以下问题：\n\n\tPage build failed: Missing submodule\n\n发现是submodule没有配置好，删除原来的 themes/next/ 文件使用以下代码重新配置\n\n\t$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n\n\t$ git submodule init\n\n\t$ git submodule update\n\n\n#### 选择主题Scheme\n\nScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：\n\nMuse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\nMist - Muse 的紧凑版本，整洁有序的单栏外观\nPisces - 双栏 Scheme，小家碧玉似的清新\nScheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。\n\n\t#scheme: Muse\n\t#scheme: Mist\n\tscheme: Pisces\n\n#### 添加标签云页面\n\n新建一个页面，命名为 tags 。命令如下：\n\n\thexo new page \"tags\"\n\n编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：\n\n\ttitle: All tags\n\tdate: 2014-12-22 12:39:04\n\ttype: \"tags\"\n\tcomments: false\n\t---\n\n在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下:\n\n\tmenu:\n\t  home: /\n  \t  archives: /archives\n  \t  tags: /tags\n\n#### 404页面设置\n\n设置腾讯的404公益页面，在source/下添加404.html\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://juncaixinchi.github.io/Blogs/\" homePageName=\"回到我的主页\">\n\t</script>\n</body>\n</html>\n```\n但是该页面使用http获取js，且其中嵌入的各种链接都是http，而Github要求全部为https。故修改代码（见下面）。其中search_children.js主要提取了data.js及page.js两个文件，前者是寻找儿童的数据，在Github中没问题；后者中默认都是用http加载的js和css，所以不能直接用，故改为https方式获取js与css，直接加入404.html页面，内容详见：[404.html](https://raw.githubusercontent.com/juncaixinchi/Blogs/master/404.html)\n\n然后生成文件\n\n\thexo generate\n\t\n顺便也可替换404.html，可以避免一次跳转\n\n\tcp source/404.html public/404.html\n\n然后上传部署，OK\n\n\thexo deploy\n\n### Troubleshooting\n\n{% raw %}\nhexo generate的过程可能会报错，可以到[troubleshooting](https://hexo.io/docs/troubleshooting.html)页面查找原因，如页面中含有`{{ }} or {% %}`可能会报错，可以通过用 raw 标签来避免问题\n{% endraw %}\n\n```\n{% raw %}\nHello {{ sensitive }}\n{% endraw %}\n```","source":"_posts/Blog-driven-by-hexo.md","raw":"---\ntitle: 基于Hexo+Next+GitHub搭建个人博客\ndate: 2017-02-14 16:24:56\ntags: \n    - Hexo\n    - Next\n    - GitHub Pages\n    - Blog\n---\n\n\n基于Hexo+Next+GitHub搭建个人博客\n===\n\n### 简介\n\nHexo是依赖于node.js的个人博客生成引擎，可以把基于Markdown的文件生成博客页面，所以整个项目分为两部分：\n\n1. 网页生成\n\n\t安装配置Hexo及其主题Next，撰写整理博客文档，生成静态页面 [blog-generater](https://github.com/juncaixinchi/blog-generater)\n\n2. 网页部署\n\n\t生成的网页存在于public文件夹内，将其部署到Github Pages或其他服务器即可 [Blogs](https://juncaixinchi.github.io/Blogs/)\n\n<!-- more -->\n\n### 安装和配置\n\n首先要有node.js，然后用npm安装hexo\n\n\t$ npm install -g hexo-cli\n\n切换到博客的位置\n\n\t$ cd ~/Github/\n\n生成新的博客文件夹，这会需要一段时间\n\n\t$ hexo init blog\n\t$ cd blog\n\n\n开启服务器，默认为 http://127.0.0.1:4000/ 可在本地查看\n\n\t$ hexo server\n\n生成新的文章，这里\"Hello Hexo\"只是标题，然后可以编辑Hello-Hexo.md撰写博客\n\n\t$ vi ./source/_posts/Hello-Hexo.md\n\n生成静态文件，以便部署到Github Pages，详细配置见下文\n\n\t$ hexo generate\n\n\t$ hexo deploy\n\n或者合并\n\n\t$ hexo generate --deploy\n\n安装压缩页面的插件\n\n\t$ npm install hexo-all-minifier --save\n\n### 自动生成静态页面和部署\n\n安装 hexo-deployer-git.\n\n\t$ npm install hexo-deployer-openshift --save\n\n编辑配置文件，需在github先新建repository：Blogs\n\n\tdeploy:\n\t  type: git\n\t  repo: git@github.com:juncaixinchi/Blogs.git\n\t  branch: master\n\t  \n生成静态文件和自动部署\n\n\thexo generate --deploy\n\n\n### 配置与添加主题\n\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。\n\n#### 设置网站路径\n\n很关键，否则上传至GitHub不能正确加载css和js\n\n\turl: https://juncaixinchi.github.io/Blogs/\n\troot: /Blogs/\n\n#### 设置 语言\n\n编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n\n\tlanguage: zh-Hans\n\n#### 设置 头像\n\n将avatar.png放置在 source/images/ 目录下，站点配置文件新增字段 avatar，配置为：\n\t\n\tavatar: /images/avatar.png\n\n#### 安装主题\n\n因为添加主题next，在上传GitHub Pages的时候遇到了以下问题：\n\n\tPage build failed: Missing submodule\n\n发现是submodule没有配置好，删除原来的 themes/next/ 文件使用以下代码重新配置\n\n\t$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n\n\t$ git submodule init\n\n\t$ git submodule update\n\n\n#### 选择主题Scheme\n\nScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：\n\nMuse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\nMist - Muse 的紧凑版本，整洁有序的单栏外观\nPisces - 双栏 Scheme，小家碧玉似的清新\nScheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。\n\n\t#scheme: Muse\n\t#scheme: Mist\n\tscheme: Pisces\n\n#### 添加标签云页面\n\n新建一个页面，命名为 tags 。命令如下：\n\n\thexo new page \"tags\"\n\n编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：\n\n\ttitle: All tags\n\tdate: 2014-12-22 12:39:04\n\ttype: \"tags\"\n\tcomments: false\n\t---\n\n在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下:\n\n\tmenu:\n\t  home: /\n  \t  archives: /archives\n  \t  tags: /tags\n\n#### 404页面设置\n\n设置腾讯的404公益页面，在source/下添加404.html\n\n```html\n<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://juncaixinchi.github.io/Blogs/\" homePageName=\"回到我的主页\">\n\t</script>\n</body>\n</html>\n```\n但是该页面使用http获取js，且其中嵌入的各种链接都是http，而Github要求全部为https。故修改代码（见下面）。其中search_children.js主要提取了data.js及page.js两个文件，前者是寻找儿童的数据，在Github中没问题；后者中默认都是用http加载的js和css，所以不能直接用，故改为https方式获取js与css，直接加入404.html页面，内容详见：[404.html](https://raw.githubusercontent.com/juncaixinchi/Blogs/master/404.html)\n\n然后生成文件\n\n\thexo generate\n\t\n顺便也可替换404.html，可以避免一次跳转\n\n\tcp source/404.html public/404.html\n\n然后上传部署，OK\n\n\thexo deploy\n\n### Troubleshooting\n\n{% raw %}\nhexo generate的过程可能会报错，可以到[troubleshooting](https://hexo.io/docs/troubleshooting.html)页面查找原因，如页面中含有`{{ }} or {% %}`可能会报错，可以通过用 raw 标签来避免问题\n{% endraw %}\n\n```\n{% raw %}\nHello {{ sensitive }}\n{% endraw %}\n```","slug":"Blog-driven-by-hexo","published":1,"updated":"2017-03-21T03:30:53.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkoq000177hxz7iwbqky","content":"<h1 id=\"基于Hexo-Next-GitHub搭建个人博客\"><a href=\"#基于Hexo-Next-GitHub搭建个人博客\" class=\"headerlink\" title=\"基于Hexo+Next+GitHub搭建个人博客\"></a>基于Hexo+Next+GitHub搭建个人博客</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Hexo是依赖于node.js的个人博客生成引擎，可以把基于Markdown的文件生成博客页面，所以整个项目分为两部分：</p>\n<ol>\n<li><p>网页生成</p>\n<p> 安装配置Hexo及其主题Next，撰写整理博客文档，生成静态页面 <a href=\"https://github.com/juncaixinchi/blog-generater\" target=\"_blank\" rel=\"external\">blog-generater</a></p>\n</li>\n<li><p>网页部署</p>\n<p> 生成的网页存在于public文件夹内，将其部署到Github Pages或其他服务器即可 <a href=\"https://juncaixinchi.github.io/Blogs/\">Blogs</a></p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"安装和配置\"><a href=\"#安装和配置\" class=\"headerlink\" title=\"安装和配置\"></a>安装和配置</h3><p>首先要有node.js，然后用npm安装hexo</p>\n<pre><code>$ npm install -g hexo-cli\n</code></pre><p>切换到博客的位置</p>\n<pre><code>$ cd ~/Github/\n</code></pre><p>生成新的博客文件夹，这会需要一段时间</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>开启服务器，默认为 <a href=\"http://127.0.0.1:4000/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:4000/</a> 可在本地查看</p>\n<pre><code>$ hexo server\n</code></pre><p>生成新的文章，这里”Hello Hexo”只是标题，然后可以编辑Hello-Hexo.md撰写博客</p>\n<pre><code>$ vi ./source/_posts/Hello-Hexo.md\n</code></pre><p>生成静态文件，以便部署到Github Pages，详细配置见下文</p>\n<pre><code>$ hexo generate\n\n$ hexo deploy\n</code></pre><p>或者合并</p>\n<pre><code>$ hexo generate --deploy\n</code></pre><p>安装压缩页面的插件</p>\n<pre><code>$ npm install hexo-all-minifier --save\n</code></pre><h3 id=\"自动生成静态页面和部署\"><a href=\"#自动生成静态页面和部署\" class=\"headerlink\" title=\"自动生成静态页面和部署\"></a>自动生成静态页面和部署</h3><p>安装 hexo-deployer-git.</p>\n<pre><code>$ npm install hexo-deployer-openshift --save\n</code></pre><p>编辑配置文件，需在github先新建repository：Blogs</p>\n<pre><code>deploy:\n  type: git\n  repo: git@github.com:juncaixinchi/Blogs.git\n  branch: master\n</code></pre><p>生成静态文件和自动部署</p>\n<pre><code>hexo generate --deploy\n</code></pre><h3 id=\"配置与添加主题\"><a href=\"#配置与添加主题\" class=\"headerlink\" title=\"配置与添加主题\"></a>配置与添加主题</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>\n<h4 id=\"设置网站路径\"><a href=\"#设置网站路径\" class=\"headerlink\" title=\"设置网站路径\"></a>设置网站路径</h4><p>很关键，否则上传至GitHub不能正确加载css和js</p>\n<pre><code>url: https://juncaixinchi.github.io/Blogs/\nroot: /Blogs/\n</code></pre><h4 id=\"设置-语言\"><a href=\"#设置-语言\" class=\"headerlink\" title=\"设置 语言\"></a>设置 语言</h4><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>\n<pre><code>language: zh-Hans\n</code></pre><h4 id=\"设置-头像\"><a href=\"#设置-头像\" class=\"headerlink\" title=\"设置 头像\"></a>设置 头像</h4><p>将avatar.png放置在 source/images/ 目录下，站点配置文件新增字段 avatar，配置为：</p>\n<pre><code>avatar: /images/avatar.png\n</code></pre><h4 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h4><p>因为添加主题next，在上传GitHub Pages的时候遇到了以下问题：</p>\n<pre><code>Page build failed: Missing submodule\n</code></pre><p>发现是submodule没有配置好，删除原来的 themes/next/ 文件使用以下代码重新配置</p>\n<pre><code>$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n\n$ git submodule init\n\n$ git submodule update\n</code></pre><h4 id=\"选择主题Scheme\"><a href=\"#选择主题Scheme\" class=\"headerlink\" title=\"选择主题Scheme\"></a>选择主题Scheme</h4><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>\n<p>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白<br>Mist - Muse 的紧凑版本，整洁有序的单栏外观<br>Pisces - 双栏 Scheme，小家碧玉似的清新<br>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。</p>\n<pre><code>#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n</code></pre><h4 id=\"添加标签云页面\"><a href=\"#添加标签云页面\" class=\"headerlink\" title=\"添加标签云页面\"></a>添加标签云页面</h4><p>新建一个页面，命名为 tags 。命令如下：</p>\n<pre><code>hexo new page &quot;tags&quot;\n</code></pre><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p>\n<pre><code>title: All tags\ndate: 2014-12-22 12:39:04\ntype: &quot;tags&quot;\ncomments: false\n---\n</code></pre><p>在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下:</p>\n<pre><code>menu:\n  home: /\n    archives: /archives\n    tags: /tags\n</code></pre><h4 id=\"404页面设置\"><a href=\"#404页面设置\" class=\"headerlink\" title=\"404页面设置\"></a>404页面设置</h4><p>设置腾讯的404公益页面，在source/下添加404.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8;\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"all\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.qq.com/404/search_children.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">\"https://juncaixinchi.github.io/Blogs/\"</span> <span class=\"attr\">homePageName</span>=<span class=\"string\">\"回到我的主页\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但是该页面使用http获取js，且其中嵌入的各种链接都是http，而Github要求全部为https。故修改代码（见下面）。其中search_children.js主要提取了data.js及page.js两个文件，前者是寻找儿童的数据，在Github中没问题；后者中默认都是用http加载的js和css，所以不能直接用，故改为https方式获取js与css，直接加入404.html页面，内容详见：<a href=\"https://raw.githubusercontent.com/juncaixinchi/Blogs/master/404.html\" target=\"_blank\" rel=\"external\">404.html</a></p>\n<p>然后生成文件</p>\n<pre><code>hexo generate\n</code></pre><p>顺便也可替换404.html，可以避免一次跳转</p>\n<pre><code>cp source/404.html public/404.html\n</code></pre><p>然后上传部署，OK</p>\n<pre><code>hexo deploy\n</code></pre><h3 id=\"Troubleshooting\"><a href=\"#Troubleshooting\" class=\"headerlink\" title=\"Troubleshooting\"></a>Troubleshooting</h3>\nhexo generate的过程可能会报错，可以到[troubleshooting](https://hexo.io/docs/troubleshooting.html)页面查找原因，如页面中含有`{{ }} or {% %}`可能会报错，可以通过用 raw 标签来避免问题\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% raw %&#125;</div><div class=\"line\">Hello &#123;&#123; sensitive &#125;&#125;</div><div class=\"line\">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>","excerpt":"<h1 id=\"基于Hexo-Next-GitHub搭建个人博客\"><a href=\"#基于Hexo-Next-GitHub搭建个人博客\" class=\"headerlink\" title=\"基于Hexo+Next+GitHub搭建个人博客\"></a>基于Hexo+Next+GitHub搭建个人博客</h1><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Hexo是依赖于node.js的个人博客生成引擎，可以把基于Markdown的文件生成博客页面，所以整个项目分为两部分：</p>\n<ol>\n<li><p>网页生成</p>\n<p> 安装配置Hexo及其主题Next，撰写整理博客文档，生成静态页面 <a href=\"https://github.com/juncaixinchi/blog-generater\">blog-generater</a></p>\n</li>\n<li><p>网页部署</p>\n<p> 生成的网页存在于public文件夹内，将其部署到Github Pages或其他服务器即可 <a href=\"https://juncaixinchi.github.io/Blogs/\">Blogs</a></p>\n</li>\n</ol>","more":"<h3 id=\"安装和配置\"><a href=\"#安装和配置\" class=\"headerlink\" title=\"安装和配置\"></a>安装和配置</h3><p>首先要有node.js，然后用npm安装hexo</p>\n<pre><code>$ npm install -g hexo-cli\n</code></pre><p>切换到博客的位置</p>\n<pre><code>$ cd ~/Github/\n</code></pre><p>生成新的博客文件夹，这会需要一段时间</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>开启服务器，默认为 <a href=\"http://127.0.0.1:4000/\">http://127.0.0.1:4000/</a> 可在本地查看</p>\n<pre><code>$ hexo server\n</code></pre><p>生成新的文章，这里”Hello Hexo”只是标题，然后可以编辑Hello-Hexo.md撰写博客</p>\n<pre><code>$ vi ./source/_posts/Hello-Hexo.md\n</code></pre><p>生成静态文件，以便部署到Github Pages，详细配置见下文</p>\n<pre><code>$ hexo generate\n\n$ hexo deploy\n</code></pre><p>或者合并</p>\n<pre><code>$ hexo generate --deploy\n</code></pre><p>安装压缩页面的插件</p>\n<pre><code>$ npm install hexo-all-minifier --save\n</code></pre><h3 id=\"自动生成静态页面和部署\"><a href=\"#自动生成静态页面和部署\" class=\"headerlink\" title=\"自动生成静态页面和部署\"></a>自动生成静态页面和部署</h3><p>安装 hexo-deployer-git.</p>\n<pre><code>$ npm install hexo-deployer-openshift --save\n</code></pre><p>编辑配置文件，需在github先新建repository：Blogs</p>\n<pre><code>deploy:\n  type: git\n  repo: git@github.com:juncaixinchi/Blogs.git\n  branch: master\n</code></pre><p>生成静态文件和自动部署</p>\n<pre><code>hexo generate --deploy\n</code></pre><h3 id=\"配置与添加主题\"><a href=\"#配置与添加主题\" class=\"headerlink\" title=\"配置与添加主题\"></a>配置与添加主题</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>\n<h4 id=\"设置网站路径\"><a href=\"#设置网站路径\" class=\"headerlink\" title=\"设置网站路径\"></a>设置网站路径</h4><p>很关键，否则上传至GitHub不能正确加载css和js</p>\n<pre><code>url: https://juncaixinchi.github.io/Blogs/\nroot: /Blogs/\n</code></pre><h4 id=\"设置-语言\"><a href=\"#设置-语言\" class=\"headerlink\" title=\"设置 语言\"></a>设置 语言</h4><p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>\n<pre><code>language: zh-Hans\n</code></pre><h4 id=\"设置-头像\"><a href=\"#设置-头像\" class=\"headerlink\" title=\"设置 头像\"></a>设置 头像</h4><p>将avatar.png放置在 source/images/ 目录下，站点配置文件新增字段 avatar，配置为：</p>\n<pre><code>avatar: /images/avatar.png\n</code></pre><h4 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h4><p>因为添加主题next，在上传GitHub Pages的时候遇到了以下问题：</p>\n<pre><code>Page build failed: Missing submodule\n</code></pre><p>发现是submodule没有配置好，删除原来的 themes/next/ 文件使用以下代码重新配置</p>\n<pre><code>$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n\n$ git submodule init\n\n$ git submodule update\n</code></pre><h4 id=\"选择主题Scheme\"><a href=\"#选择主题Scheme\" class=\"headerlink\" title=\"选择主题Scheme\"></a>选择主题Scheme</h4><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>\n<p>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白<br>Mist - Muse 的紧凑版本，整洁有序的单栏外观<br>Pisces - 双栏 Scheme，小家碧玉似的清新<br>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。</p>\n<pre><code>#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n</code></pre><h4 id=\"添加标签云页面\"><a href=\"#添加标签云页面\" class=\"headerlink\" title=\"添加标签云页面\"></a>添加标签云页面</h4><p>新建一个页面，命名为 tags 。命令如下：</p>\n<pre><code>hexo new page &quot;tags&quot;\n</code></pre><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p>\n<pre><code>title: All tags\ndate: 2014-12-22 12:39:04\ntype: &quot;tags&quot;\ncomments: false\n---\n</code></pre><p>在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下:</p>\n<pre><code>menu:\n  home: /\n    archives: /archives\n    tags: /tags\n</code></pre><h4 id=\"404页面设置\"><a href=\"#404页面设置\" class=\"headerlink\" title=\"404页面设置\"></a>404页面设置</h4><p>设置腾讯的404公益页面，在source/下添加404.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8;\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"all\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.qq.com/404/search_children.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">\"https://juncaixinchi.github.io/Blogs/\"</span> <span class=\"attr\">homePageName</span>=<span class=\"string\">\"回到我的主页\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但是该页面使用http获取js，且其中嵌入的各种链接都是http，而Github要求全部为https。故修改代码（见下面）。其中search_children.js主要提取了data.js及page.js两个文件，前者是寻找儿童的数据，在Github中没问题；后者中默认都是用http加载的js和css，所以不能直接用，故改为https方式获取js与css，直接加入404.html页面，内容详见：<a href=\"https://raw.githubusercontent.com/juncaixinchi/Blogs/master/404.html\">404.html</a></p>\n<p>然后生成文件</p>\n<pre><code>hexo generate\n</code></pre><p>顺便也可替换404.html，可以避免一次跳转</p>\n<pre><code>cp source/404.html public/404.html\n</code></pre><p>然后上传部署，OK</p>\n<pre><code>hexo deploy\n</code></pre><h3 id=\"Troubleshooting\"><a href=\"#Troubleshooting\" class=\"headerlink\" title=\"Troubleshooting\"></a>Troubleshooting</h3>\nhexo generate的过程可能会报错，可以到[troubleshooting](https://hexo.io/docs/troubleshooting.html)页面查找原因，如页面中含有`{{ }} or {% %}`可能会报错，可以通过用 raw 标签来避免问题\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% raw %&#125;</div><div class=\"line\">Hello &#123;&#123; sensitive &#125;&#125;</div><div class=\"line\">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>"},{"title":"Git_note","date":"2017-02-14T11:36:07.000Z","_content":"Git note\n===\n\n学习Git的笔记，完整文档见[Git-scm](https://git-scm.com/book/zh/v2)\n\n<!-- more -->\n\n##\tGit 配置\n\n### 获取升级\n\n\t$ git clone git://git.kernel.org/pub/scm/git/git.git\n\n### 添加用户信息，并查看配置文件\n\n\t$ git config --global user.name \"juncaixinchi\"\n\t$ git config --global user.email \"juncaixinchi111@gmail.com\"\n\t$ less ~/.gitconfig\n\n### 获取帮助\n\n\t$ git help <verb>\n\t$ git <verb> --help\n\t$ man git-<verb>\n\n### 生成ssh keys，在[Github-keys](https://github.com/settings/keys)添加即可\n\n\t$ ssh-keygen -t rsa -b 4096 -C \"juncaixinchi111@gmail.com\"\n\t$ clip < ~/.ssh/id_rsa.pub\n\n## Git 基础\n\n### 在现有目录中初始化仓库\n\n\t$ git init\n\n该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。\n\n\t$ git add *\n\t$ git commit -m 'initial project version'\n\n在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，应该开始跟踪这些文件并提交。 \n\n### 克隆现有的仓库\n\n克隆blog-generater至当前目录，分别使用HTTPS协议、SSH协议、本地协议\n\n\t$ git clone https://github.com/juncaixinchi/blog-generater.git\n\t$ git clone git@github.com:juncaixinchi/blog-generater.git\n\t$ git clone /opt/git/project.git\n\n### 记录每次更新到仓库\n\n\t$ git add README\n\n使用命令 git add 开始跟踪跟踪 README 文件\n\n\t$ git status\n\n\t$ git status -s\n\n检查当前文件状态，加-s为简略信息\n\n### 忽略文件\n\n创建一个名为 .gitignore 的文件，列出要忽略的文件模式，文件 .gitignore 的格式规范如下：\n\n+ 所有空行或者以 ＃ 开头的行都会被 Git 忽略。\n+ 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。\n\n\t\t# no .a files\n\t\t*.a\n\n+ 匹配模式可以以（/）开头防止递归。\n\n\t\t# only ignore the TODO file in the current directory, not subdir/TODO\n\t\t/TODO\n\n+ 匹配模式可以以（/）结尾指定目录。\n\n\t\t# ignore all files in the build/ directory\n\t\tbuild/\n\n+ 可以使用标准的 glob 模式匹配。\n\n\t\t# ignore doc/notes.txt, but not doc/server/arch.txt\n\t\tdoc/*.txt\n\n\t\t# ignore all .pdf files in the doc/ directory\n\t\tdoc/**/*.pdf\n\n### 提交更新\n\ncommit命令会提交更新，-m参数可添加提交备注，或者随机生成备注 O__O\n\n\t$ git commit -m \"update\"\n\t$ git commit -m \"`curl -s http://whatthecommit.com/index.txt`\"\n\n给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 add 步骤\n\n\t$ git commit -a -m 'update without git add'\n\n不过正式的提交还是应该避免-m 添加备注，而是详细的添加\n\n### 移除文件或移动文件\n\n使用 rm 命令将文件从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件，如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f\n\n\t$ git rm file_to_remove.md\n\t$ git mv file_from file_to\n\n### 查看提交历史\n\n查看所有log\n\n\t$ git log\n\n显示最近两次提交的差异\n\n\t$ git log -p -2\n\n显示每次提交的简略的统计信息\n\n\t$ git log --stat\n\n以pretty的方式显示提交历史\n\n\t$ git log --pretty=oneline\n\n添加了一些ASCII字符串来形象地展示你的分支、合并历史：\n\n\t$ git log --pretty=format:\"%h %s\" --graph\n\n只显示作者L在2周内提交的近5条记录\n\n\t$ git log --author L --since=2.weeks -5\n\n### 撤消操作\n\t\n尝试重新提交,第二次提交将代替第一次提交的结果\n\n\t$ git commit -m 'initial commit'\n\t$ git add forgotten_file\n\t$ git commit --amend\n\n取消暂存的文件file_to_cancle.txt(git add 的相反操作)\n\n\t$ git reset HEAD file_to_cancle.txt\n\n撤消对文件的修改，恢复文件file_to_restore.txt到上次提交时候的状态\n\n\t$ git checkout -- file_to_restore.txt\n\n### 远程仓库的使用\n\n查看远程仓库\n\n\t$ git remote -v\n\t$ git remote show\n\n添加远程仓库，默认为 origin\n\n\t$ git remote add <shortname> <url>\n\t$ git remote add pd https://github.com/juncaixinchi/blog-generater.git\n\n从远程仓库中抓取，默认从origin抓取，也可自定义\n\t\n\t$ git fetch\n\t$ git fetch https://github.com/juncaixinchi/blog-generater.git\n\t$ git fetch origin master:tmp\n\ngit fetch不会自动merge，需再merge\n\n\t$ git fetch origin master:tmp\n\t$ git diff tmp\n\t$ git merge tmp\n\n直接从远程获取最新版本并merge到本地\n\n\t$ git pull origin master\n\n使用 git push (remote) (branch)推送到远程仓库，默认推送到origin/master, 也可自定义远程仓库及分支（如serverfix）\n\t\n\t$ git push\n\t$ git push https://github.com/juncaixinchi/blog-generater.git\n\t$ git push origin serverfix\n\t$ git push origin serverfix:awesomebranch\n\n设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支\n\n\t$ git checkout --track origin/serverfix\n\n远程仓库的移除和重命名\n\n\t$ git remote rm paul\n\t$ git remote rename pb paul\n\n删除远程分支serverfix\n\n\t$ git push origin --delete serverfix\n\n### 打标签\n\n列出已有标签\n\n\t$ git tag\n\n创建一个附注标签，指定提交的校验和（或部分校验和）则可后期打标签\n\n\t$ git tag -a v1.4 -m 'my version 1.4'\n\t$ git tag -a v0.0 -m \"origin version\" c76e548\n\n共享标签\n\n\t$ git push origin v1.5\n\n### 设置别名\n\n通过 config 为命令设置别名，外部程序的命令则要加!，使用cmu直接add 及 commit \n\n\t$ git config --global alias.co checkout\n\t$ git config --global alias.br branch\n\t$ git config --global alias.st status\n\t$ git config --global alias.last 'log -1 HEAD'\n\t$ git config --global alias.hexo '!hexo g -delpoy'\n\t$ git config --global alias.cmu 'commit -a -m \"update\"'\n\t$ git config --global alias.logbr 'log --oneline --decorate --graph --all -20'\n\n## Git 分支\n\n### 分支的新建和合并\n\n创建分支testing，分支切换为testing，然后commit内容将在test分支进行\n\n\t$ git branch testing\n\t$ git checkout testing\n\n或者在过去某个版本，如593015f,建立分支testing\n\n\t$ git log --oneline --decorate --graph --all\n\t$ git checkout 593015f\n\t$ git checkout -b testing\n\n使用 log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n\t$ git log --oneline --decorate\n\t$ git log --oneline --decorate --graph --all\n\n使用 merge 来合并分支\n\n\t$ git merger testing\n\n如果 master 和 testing 分支都各有提交新版本，则无法自动合并，会出现如下错误，需要手动编辑冲突的文件，然后再 commit，\n\n\tAuto Merge Failed; Fix Conflicts and Then Commit the Result\n\n例如冲突的文件内容为：\n\n\t<<<<<<< HEAD:index.html\n\t<div id=\"footer\">contact : email.support@github.com</div>\n\t=======\n\t<div id=\"footer\">\n\t please contact us at support@github.com\n\t</div>\n\t>>>>>>> testing:index.html\n\n这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置）在这个区段的上半部分（======= 的上半部分），而 testing 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，必须选择使用由 ======= 分割的两部分中的一个，或者也可以自行合并这些内容。 例如，通过把这段内容换成下面的样子来解决冲突：\n\n\t<div id=\"footer\">\n\tplease contact us at email.support@github.com\n\t</div>\n\n另外也可以使用图形化工具来解决冲突\n\n\t$ git mergetool\n\n合并完成后删除分支testing\n\n\t$ git branch -d testing\n\n### 分支的管理\n\n显示分支列表\n\n\t$ git branch\n\n查看每一个分支的最后一次提交\n\n\t$ git branch -v\n\n查看已经合并或尚未合并到当前分支的分支\n\n\t$ git branch --merged\n\t$ git branch --no-merged\n\n删除和强制删除分支\n\n\t$ git branch -d testing\n\t$ git branch -D testing\n\n### 分支整合之变基\n\n使用 rebase 命令将提交到某一分支 testing 上的所有修改都移至另一分支 master 上，然后回到 master 分支，进行一次快进合并。\n\n\t$ git checkout testing\n\t$ git rebase master\n\t\n\t$ git checkout master\n\t$ git merge testing\n\n直接将特性分支（testing）变基到目标分支（即 master）上\n\n\t$ git rebase master testing\n\n对两个分支进行变基时，将 client 中的修改合并到主分支并发布，但暂时并不合并 server 中的修改\n\t\n\t$ git rebase --onto master server client\n\n变基的风险：`不要对在仓库外有副本的分支执行变基`\n\n## Git工具\n\n### 子模块\n\n将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。\n\n\t$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n\t$ git submodule init\n\t$ git submodule update \n\t$ git submodule update themes/next\n\n在开始克隆含有子模块的仓库时，可添加--recursive，直接递归添加所有子模块\n\n\t$ git clone --recursive https://github.com/juncaixinchi/blog-generater.git\n\t\n让 Git 在推送到主项目前检查所有子模块是否已推送\t\n\n\t$ git push --recurse-submodules=check\n\n让 Git 自动进入到子模块中，然后在推送主项目前推送了它\n\n\t$ git push --recurse-submodules=on-demand\n\n遍历子模块运行命令\n\n\t$ git submodule foreach 'git push'\n\n### 调试\n\n通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。\n\n开始二分查找，并设置当前版本为有问题状态\n\n\t$ git bisect start\n\t$ git bisect bad\n\n设定没有问题的版本，然后依次检测个版本，设定 bad or good ，直到找到问题版本\n\n\t$ git bisect good v1.0\n\n完成后，重置 HEAD 指针到最开始的位置\n\n\t$ git bisect reset\n\n标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者，通过-L来限定行数\n\n\t$ git blame\n\n\t$ git blame -L 12,22 file_to_check\n\n在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式\n\n\t$ git grep\n\n### 维护项目\n\nbalabala...\n","source":"_posts/Git-note.md","raw":"---\ntitle: Git_note\ndate: 2017-02-14 19:36:07\ntags: \n\t- Git\n\t- Github\n---\nGit note\n===\n\n学习Git的笔记，完整文档见[Git-scm](https://git-scm.com/book/zh/v2)\n\n<!-- more -->\n\n##\tGit 配置\n\n### 获取升级\n\n\t$ git clone git://git.kernel.org/pub/scm/git/git.git\n\n### 添加用户信息，并查看配置文件\n\n\t$ git config --global user.name \"juncaixinchi\"\n\t$ git config --global user.email \"juncaixinchi111@gmail.com\"\n\t$ less ~/.gitconfig\n\n### 获取帮助\n\n\t$ git help <verb>\n\t$ git <verb> --help\n\t$ man git-<verb>\n\n### 生成ssh keys，在[Github-keys](https://github.com/settings/keys)添加即可\n\n\t$ ssh-keygen -t rsa -b 4096 -C \"juncaixinchi111@gmail.com\"\n\t$ clip < ~/.ssh/id_rsa.pub\n\n## Git 基础\n\n### 在现有目录中初始化仓库\n\n\t$ git init\n\n该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。\n\n\t$ git add *\n\t$ git commit -m 'initial project version'\n\n在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，应该开始跟踪这些文件并提交。 \n\n### 克隆现有的仓库\n\n克隆blog-generater至当前目录，分别使用HTTPS协议、SSH协议、本地协议\n\n\t$ git clone https://github.com/juncaixinchi/blog-generater.git\n\t$ git clone git@github.com:juncaixinchi/blog-generater.git\n\t$ git clone /opt/git/project.git\n\n### 记录每次更新到仓库\n\n\t$ git add README\n\n使用命令 git add 开始跟踪跟踪 README 文件\n\n\t$ git status\n\n\t$ git status -s\n\n检查当前文件状态，加-s为简略信息\n\n### 忽略文件\n\n创建一个名为 .gitignore 的文件，列出要忽略的文件模式，文件 .gitignore 的格式规范如下：\n\n+ 所有空行或者以 ＃ 开头的行都会被 Git 忽略。\n+ 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。\n\n\t\t# no .a files\n\t\t*.a\n\n+ 匹配模式可以以（/）开头防止递归。\n\n\t\t# only ignore the TODO file in the current directory, not subdir/TODO\n\t\t/TODO\n\n+ 匹配模式可以以（/）结尾指定目录。\n\n\t\t# ignore all files in the build/ directory\n\t\tbuild/\n\n+ 可以使用标准的 glob 模式匹配。\n\n\t\t# ignore doc/notes.txt, but not doc/server/arch.txt\n\t\tdoc/*.txt\n\n\t\t# ignore all .pdf files in the doc/ directory\n\t\tdoc/**/*.pdf\n\n### 提交更新\n\ncommit命令会提交更新，-m参数可添加提交备注，或者随机生成备注 O__O\n\n\t$ git commit -m \"update\"\n\t$ git commit -m \"`curl -s http://whatthecommit.com/index.txt`\"\n\n给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 add 步骤\n\n\t$ git commit -a -m 'update without git add'\n\n不过正式的提交还是应该避免-m 添加备注，而是详细的添加\n\n### 移除文件或移动文件\n\n使用 rm 命令将文件从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件，如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f\n\n\t$ git rm file_to_remove.md\n\t$ git mv file_from file_to\n\n### 查看提交历史\n\n查看所有log\n\n\t$ git log\n\n显示最近两次提交的差异\n\n\t$ git log -p -2\n\n显示每次提交的简略的统计信息\n\n\t$ git log --stat\n\n以pretty的方式显示提交历史\n\n\t$ git log --pretty=oneline\n\n添加了一些ASCII字符串来形象地展示你的分支、合并历史：\n\n\t$ git log --pretty=format:\"%h %s\" --graph\n\n只显示作者L在2周内提交的近5条记录\n\n\t$ git log --author L --since=2.weeks -5\n\n### 撤消操作\n\t\n尝试重新提交,第二次提交将代替第一次提交的结果\n\n\t$ git commit -m 'initial commit'\n\t$ git add forgotten_file\n\t$ git commit --amend\n\n取消暂存的文件file_to_cancle.txt(git add 的相反操作)\n\n\t$ git reset HEAD file_to_cancle.txt\n\n撤消对文件的修改，恢复文件file_to_restore.txt到上次提交时候的状态\n\n\t$ git checkout -- file_to_restore.txt\n\n### 远程仓库的使用\n\n查看远程仓库\n\n\t$ git remote -v\n\t$ git remote show\n\n添加远程仓库，默认为 origin\n\n\t$ git remote add <shortname> <url>\n\t$ git remote add pd https://github.com/juncaixinchi/blog-generater.git\n\n从远程仓库中抓取，默认从origin抓取，也可自定义\n\t\n\t$ git fetch\n\t$ git fetch https://github.com/juncaixinchi/blog-generater.git\n\t$ git fetch origin master:tmp\n\ngit fetch不会自动merge，需再merge\n\n\t$ git fetch origin master:tmp\n\t$ git diff tmp\n\t$ git merge tmp\n\n直接从远程获取最新版本并merge到本地\n\n\t$ git pull origin master\n\n使用 git push (remote) (branch)推送到远程仓库，默认推送到origin/master, 也可自定义远程仓库及分支（如serverfix）\n\t\n\t$ git push\n\t$ git push https://github.com/juncaixinchi/blog-generater.git\n\t$ git push origin serverfix\n\t$ git push origin serverfix:awesomebranch\n\n设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支\n\n\t$ git checkout --track origin/serverfix\n\n远程仓库的移除和重命名\n\n\t$ git remote rm paul\n\t$ git remote rename pb paul\n\n删除远程分支serverfix\n\n\t$ git push origin --delete serverfix\n\n### 打标签\n\n列出已有标签\n\n\t$ git tag\n\n创建一个附注标签，指定提交的校验和（或部分校验和）则可后期打标签\n\n\t$ git tag -a v1.4 -m 'my version 1.4'\n\t$ git tag -a v0.0 -m \"origin version\" c76e548\n\n共享标签\n\n\t$ git push origin v1.5\n\n### 设置别名\n\n通过 config 为命令设置别名，外部程序的命令则要加!，使用cmu直接add 及 commit \n\n\t$ git config --global alias.co checkout\n\t$ git config --global alias.br branch\n\t$ git config --global alias.st status\n\t$ git config --global alias.last 'log -1 HEAD'\n\t$ git config --global alias.hexo '!hexo g -delpoy'\n\t$ git config --global alias.cmu 'commit -a -m \"update\"'\n\t$ git config --global alias.logbr 'log --oneline --decorate --graph --all -20'\n\n## Git 分支\n\n### 分支的新建和合并\n\n创建分支testing，分支切换为testing，然后commit内容将在test分支进行\n\n\t$ git branch testing\n\t$ git checkout testing\n\n或者在过去某个版本，如593015f,建立分支testing\n\n\t$ git log --oneline --decorate --graph --all\n\t$ git checkout 593015f\n\t$ git checkout -b testing\n\n使用 log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n\t$ git log --oneline --decorate\n\t$ git log --oneline --decorate --graph --all\n\n使用 merge 来合并分支\n\n\t$ git merger testing\n\n如果 master 和 testing 分支都各有提交新版本，则无法自动合并，会出现如下错误，需要手动编辑冲突的文件，然后再 commit，\n\n\tAuto Merge Failed; Fix Conflicts and Then Commit the Result\n\n例如冲突的文件内容为：\n\n\t<<<<<<< HEAD:index.html\n\t<div id=\"footer\">contact : email.support@github.com</div>\n\t=======\n\t<div id=\"footer\">\n\t please contact us at support@github.com\n\t</div>\n\t>>>>>>> testing:index.html\n\n这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置）在这个区段的上半部分（======= 的上半部分），而 testing 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，必须选择使用由 ======= 分割的两部分中的一个，或者也可以自行合并这些内容。 例如，通过把这段内容换成下面的样子来解决冲突：\n\n\t<div id=\"footer\">\n\tplease contact us at email.support@github.com\n\t</div>\n\n另外也可以使用图形化工具来解决冲突\n\n\t$ git mergetool\n\n合并完成后删除分支testing\n\n\t$ git branch -d testing\n\n### 分支的管理\n\n显示分支列表\n\n\t$ git branch\n\n查看每一个分支的最后一次提交\n\n\t$ git branch -v\n\n查看已经合并或尚未合并到当前分支的分支\n\n\t$ git branch --merged\n\t$ git branch --no-merged\n\n删除和强制删除分支\n\n\t$ git branch -d testing\n\t$ git branch -D testing\n\n### 分支整合之变基\n\n使用 rebase 命令将提交到某一分支 testing 上的所有修改都移至另一分支 master 上，然后回到 master 分支，进行一次快进合并。\n\n\t$ git checkout testing\n\t$ git rebase master\n\t\n\t$ git checkout master\n\t$ git merge testing\n\n直接将特性分支（testing）变基到目标分支（即 master）上\n\n\t$ git rebase master testing\n\n对两个分支进行变基时，将 client 中的修改合并到主分支并发布，但暂时并不合并 server 中的修改\n\t\n\t$ git rebase --onto master server client\n\n变基的风险：`不要对在仓库外有副本的分支执行变基`\n\n## Git工具\n\n### 子模块\n\n将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。\n\n\t$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n\t$ git submodule init\n\t$ git submodule update \n\t$ git submodule update themes/next\n\n在开始克隆含有子模块的仓库时，可添加--recursive，直接递归添加所有子模块\n\n\t$ git clone --recursive https://github.com/juncaixinchi/blog-generater.git\n\t\n让 Git 在推送到主项目前检查所有子模块是否已推送\t\n\n\t$ git push --recurse-submodules=check\n\n让 Git 自动进入到子模块中，然后在推送主项目前推送了它\n\n\t$ git push --recurse-submodules=on-demand\n\n遍历子模块运行命令\n\n\t$ git submodule foreach 'git push'\n\n### 调试\n\n通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。\n\n开始二分查找，并设置当前版本为有问题状态\n\n\t$ git bisect start\n\t$ git bisect bad\n\n设定没有问题的版本，然后依次检测个版本，设定 bad or good ，直到找到问题版本\n\n\t$ git bisect good v1.0\n\n完成后，重置 HEAD 指针到最开始的位置\n\n\t$ git bisect reset\n\n标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者，通过-L来限定行数\n\n\t$ git blame\n\n\t$ git blame -L 12,22 file_to_check\n\n在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式\n\n\t$ git grep\n\n### 维护项目\n\nbalabala...\n","slug":"Git-note","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkov000377hxxad08fne","content":"<h1 id=\"Git-note\"><a href=\"#Git-note\" class=\"headerlink\" title=\"Git note\"></a>Git note</h1><p>学习Git的笔记，完整文档见<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Git-scm</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h2><h3 id=\"获取升级\"><a href=\"#获取升级\" class=\"headerlink\" title=\"获取升级\"></a>获取升级</h3><pre><code>$ git clone git://git.kernel.org/pub/scm/git/git.git\n</code></pre><h3 id=\"添加用户信息，并查看配置文件\"><a href=\"#添加用户信息，并查看配置文件\" class=\"headerlink\" title=\"添加用户信息，并查看配置文件\"></a>添加用户信息，并查看配置文件</h3><pre><code>$ git config --global user.name &quot;juncaixinchi&quot;\n$ git config --global user.email &quot;juncaixinchi111@gmail.com&quot;\n$ less ~/.gitconfig\n</code></pre><h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><pre><code>$ git help &lt;verb&gt;\n$ git &lt;verb&gt; --help\n$ man git-&lt;verb&gt;\n</code></pre><h3 id=\"生成ssh-keys，在Github-keys添加即可\"><a href=\"#生成ssh-keys，在Github-keys添加即可\" class=\"headerlink\" title=\"生成ssh keys，在Github-keys添加即可\"></a>生成ssh keys，在<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"external\">Github-keys</a>添加即可</h3><pre><code>$ ssh-keygen -t rsa -b 4096 -C &quot;juncaixinchi111@gmail.com&quot;\n$ clip &lt; ~/.ssh/id_rsa.pub\n</code></pre><h2 id=\"Git-基础\"><a href=\"#Git-基础\" class=\"headerlink\" title=\"Git 基础\"></a>Git 基础</h2><h3 id=\"在现有目录中初始化仓库\"><a href=\"#在现有目录中初始化仓库\" class=\"headerlink\" title=\"在现有目录中初始化仓库\"></a>在现有目录中初始化仓库</h3><pre><code>$ git init\n</code></pre><p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p>\n<pre><code>$ git add *\n$ git commit -m &apos;initial project version&apos;\n</code></pre><p>在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，应该开始跟踪这些文件并提交。 </p>\n<h3 id=\"克隆现有的仓库\"><a href=\"#克隆现有的仓库\" class=\"headerlink\" title=\"克隆现有的仓库\"></a>克隆现有的仓库</h3><p>克隆blog-generater至当前目录，分别使用HTTPS协议、SSH协议、本地协议</p>\n<pre><code>$ git clone https://github.com/juncaixinchi/blog-generater.git\n$ git clone git@github.com:juncaixinchi/blog-generater.git\n$ git clone /opt/git/project.git\n</code></pre><h3 id=\"记录每次更新到仓库\"><a href=\"#记录每次更新到仓库\" class=\"headerlink\" title=\"记录每次更新到仓库\"></a>记录每次更新到仓库</h3><pre><code>$ git add README\n</code></pre><p>使用命令 git add 开始跟踪跟踪 README 文件</p>\n<pre><code>$ git status\n\n$ git status -s\n</code></pre><p>检查当前文件状态，加-s为简略信息</p>\n<h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><p>创建一个名为 .gitignore 的文件，列出要忽略的文件模式，文件 .gitignore 的格式规范如下：</p>\n<ul>\n<li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li>\n<li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p>\n<pre><code># no .a files\n*.a\n</code></pre></li>\n<li><p>匹配模式可以以（/）开头防止递归。</p>\n<pre><code># only ignore the TODO file in the current directory, not subdir/TODO\n/TODO\n</code></pre></li>\n<li><p>匹配模式可以以（/）结尾指定目录。</p>\n<pre><code># ignore all files in the build/ directory\nbuild/\n</code></pre></li>\n<li><p>可以使用标准的 glob 模式匹配。</p>\n<pre><code># ignore doc/notes.txt, but not doc/server/arch.txt\ndoc/*.txt\n\n# ignore all .pdf files in the doc/ directory\ndoc/**/*.pdf\n</code></pre></li>\n</ul>\n<h3 id=\"提交更新\"><a href=\"#提交更新\" class=\"headerlink\" title=\"提交更新\"></a>提交更新</h3><p>commit命令会提交更新，-m参数可添加提交备注，或者随机生成备注 O__O</p>\n<pre><code>$ git commit -m &quot;update&quot;\n$ git commit -m &quot;`curl -s http://whatthecommit.com/index.txt`&quot;\n</code></pre><p>给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 add 步骤</p>\n<pre><code>$ git commit -a -m &apos;update without git add&apos;\n</code></pre><p>不过正式的提交还是应该避免-m 添加备注，而是详细的添加</p>\n<h3 id=\"移除文件或移动文件\"><a href=\"#移除文件或移动文件\" class=\"headerlink\" title=\"移除文件或移动文件\"></a>移除文件或移动文件</h3><p>使用 rm 命令将文件从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件，如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p>\n<pre><code>$ git rm file_to_remove.md\n$ git mv file_from file_to\n</code></pre><h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><p>查看所有log</p>\n<pre><code>$ git log\n</code></pre><p>显示最近两次提交的差异</p>\n<pre><code>$ git log -p -2\n</code></pre><p>显示每次提交的简略的统计信息</p>\n<pre><code>$ git log --stat\n</code></pre><p>以pretty的方式显示提交历史</p>\n<pre><code>$ git log --pretty=oneline\n</code></pre><p>添加了一些ASCII字符串来形象地展示你的分支、合并历史：</p>\n<pre><code>$ git log --pretty=format:&quot;%h %s&quot; --graph\n</code></pre><p>只显示作者L在2周内提交的近5条记录</p>\n<pre><code>$ git log --author L --since=2.weeks -5\n</code></pre><h3 id=\"撤消操作\"><a href=\"#撤消操作\" class=\"headerlink\" title=\"撤消操作\"></a>撤消操作</h3><p>尝试重新提交,第二次提交将代替第一次提交的结果</p>\n<pre><code>$ git commit -m &apos;initial commit&apos;\n$ git add forgotten_file\n$ git commit --amend\n</code></pre><p>取消暂存的文件file_to_cancle.txt(git add 的相反操作)</p>\n<pre><code>$ git reset HEAD file_to_cancle.txt\n</code></pre><p>撤消对文件的修改，恢复文件file_to_restore.txt到上次提交时候的状态</p>\n<pre><code>$ git checkout -- file_to_restore.txt\n</code></pre><h3 id=\"远程仓库的使用\"><a href=\"#远程仓库的使用\" class=\"headerlink\" title=\"远程仓库的使用\"></a>远程仓库的使用</h3><p>查看远程仓库</p>\n<pre><code>$ git remote -v\n$ git remote show\n</code></pre><p>添加远程仓库，默认为 origin</p>\n<pre><code>$ git remote add &lt;shortname&gt; &lt;url&gt;\n$ git remote add pd https://github.com/juncaixinchi/blog-generater.git\n</code></pre><p>从远程仓库中抓取，默认从origin抓取，也可自定义</p>\n<pre><code>$ git fetch\n$ git fetch https://github.com/juncaixinchi/blog-generater.git\n$ git fetch origin master:tmp\n</code></pre><p>git fetch不会自动merge，需再merge</p>\n<pre><code>$ git fetch origin master:tmp\n$ git diff tmp\n$ git merge tmp\n</code></pre><p>直接从远程获取最新版本并merge到本地</p>\n<pre><code>$ git pull origin master\n</code></pre><p>使用 git push (remote) (branch)推送到远程仓库，默认推送到origin/master, 也可自定义远程仓库及分支（如serverfix）</p>\n<pre><code>$ git push\n$ git push https://github.com/juncaixinchi/blog-generater.git\n$ git push origin serverfix\n$ git push origin serverfix:awesomebranch\n</code></pre><p>设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支</p>\n<pre><code>$ git checkout --track origin/serverfix\n</code></pre><p>远程仓库的移除和重命名</p>\n<pre><code>$ git remote rm paul\n$ git remote rename pb paul\n</code></pre><p>删除远程分支serverfix</p>\n<pre><code>$ git push origin --delete serverfix\n</code></pre><h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><p>列出已有标签</p>\n<pre><code>$ git tag\n</code></pre><p>创建一个附注标签，指定提交的校验和（或部分校验和）则可后期打标签</p>\n<pre><code>$ git tag -a v1.4 -m &apos;my version 1.4&apos;\n$ git tag -a v0.0 -m &quot;origin version&quot; c76e548\n</code></pre><p>共享标签</p>\n<pre><code>$ git push origin v1.5\n</code></pre><h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p>通过 config 为命令设置别名，外部程序的命令则要加!，使用cmu直接add 及 commit </p>\n<pre><code>$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.st status\n$ git config --global alias.last &apos;log -1 HEAD&apos;\n$ git config --global alias.hexo &apos;!hexo g -delpoy&apos;\n$ git config --global alias.cmu &apos;commit -a -m &quot;update&quot;&apos;\n$ git config --global alias.logbr &apos;log --oneline --decorate --graph --all -20&apos;\n</code></pre><h2 id=\"Git-分支\"><a href=\"#Git-分支\" class=\"headerlink\" title=\"Git 分支\"></a>Git 分支</h2><h3 id=\"分支的新建和合并\"><a href=\"#分支的新建和合并\" class=\"headerlink\" title=\"分支的新建和合并\"></a>分支的新建和合并</h3><p>创建分支testing，分支切换为testing，然后commit内容将在test分支进行</p>\n<pre><code>$ git branch testing\n$ git checkout testing\n</code></pre><p>或者在过去某个版本，如593015f,建立分支testing</p>\n<pre><code>$ git log --oneline --decorate --graph --all\n$ git checkout 593015f\n$ git checkout -b testing\n</code></pre><p>使用 log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 –decorate。</p>\n<pre><code>$ git log --oneline --decorate\n$ git log --oneline --decorate --graph --all\n</code></pre><p>使用 merge 来合并分支</p>\n<pre><code>$ git merger testing\n</code></pre><p>如果 master 和 testing 分支都各有提交新版本，则无法自动合并，会出现如下错误，需要手动编辑冲突的文件，然后再 commit，</p>\n<pre><code>Auto Merge Failed; Fix Conflicts and Then Commit the Result\n</code></pre><p>例如冲突的文件内容为：</p>\n<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;\n=======\n&lt;div id=&quot;footer&quot;&gt;\n please contact us at support@github.com\n&lt;/div&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; testing:index.html\n</code></pre><p>这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置）在这个区段的上半部分（======= 的上半部分），而 testing 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，必须选择使用由 ======= 分割的两部分中的一个，或者也可以自行合并这些内容。 例如，通过把这段内容换成下面的样子来解决冲突：</p>\n<pre><code>&lt;div id=&quot;footer&quot;&gt;\nplease contact us at email.support@github.com\n&lt;/div&gt;\n</code></pre><p>另外也可以使用图形化工具来解决冲突</p>\n<pre><code>$ git mergetool\n</code></pre><p>合并完成后删除分支testing</p>\n<pre><code>$ git branch -d testing\n</code></pre><h3 id=\"分支的管理\"><a href=\"#分支的管理\" class=\"headerlink\" title=\"分支的管理\"></a>分支的管理</h3><p>显示分支列表</p>\n<pre><code>$ git branch\n</code></pre><p>查看每一个分支的最后一次提交</p>\n<pre><code>$ git branch -v\n</code></pre><p>查看已经合并或尚未合并到当前分支的分支</p>\n<pre><code>$ git branch --merged\n$ git branch --no-merged\n</code></pre><p>删除和强制删除分支</p>\n<pre><code>$ git branch -d testing\n$ git branch -D testing\n</code></pre><h3 id=\"分支整合之变基\"><a href=\"#分支整合之变基\" class=\"headerlink\" title=\"分支整合之变基\"></a>分支整合之变基</h3><p>使用 rebase 命令将提交到某一分支 testing 上的所有修改都移至另一分支 master 上，然后回到 master 分支，进行一次快进合并。</p>\n<pre><code>$ git checkout testing\n$ git rebase master\n\n$ git checkout master\n$ git merge testing\n</code></pre><p>直接将特性分支（testing）变基到目标分支（即 master）上</p>\n<pre><code>$ git rebase master testing\n</code></pre><p>对两个分支进行变基时，将 client 中的修改合并到主分支并发布，但暂时并不合并 server 中的修改</p>\n<pre><code>$ git rebase --onto master server client\n</code></pre><p>变基的风险：<code>不要对在仓库外有副本的分支执行变基</code></p>\n<h2 id=\"Git工具\"><a href=\"#Git工具\" class=\"headerlink\" title=\"Git工具\"></a>Git工具</h2><h3 id=\"子模块\"><a href=\"#子模块\" class=\"headerlink\" title=\"子模块\"></a>子模块</h3><p>将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。</p>\n<pre><code>$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n$ git submodule init\n$ git submodule update \n$ git submodule update themes/next\n</code></pre><p>在开始克隆含有子模块的仓库时，可添加–recursive，直接递归添加所有子模块</p>\n<pre><code>$ git clone --recursive https://github.com/juncaixinchi/blog-generater.git\n</code></pre><p>让 Git 在推送到主项目前检查所有子模块是否已推送    </p>\n<pre><code>$ git push --recurse-submodules=check\n</code></pre><p>让 Git 自动进入到子模块中，然后在推送主项目前推送了它</p>\n<pre><code>$ git push --recurse-submodules=on-demand\n</code></pre><p>遍历子模块运行命令</p>\n<pre><code>$ git submodule foreach &apos;git push&apos;\n</code></pre><h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。</p>\n<p>开始二分查找，并设置当前版本为有问题状态</p>\n<pre><code>$ git bisect start\n$ git bisect bad\n</code></pre><p>设定没有问题的版本，然后依次检测个版本，设定 bad or good ，直到找到问题版本</p>\n<pre><code>$ git bisect good v1.0\n</code></pre><p>完成后，重置 HEAD 指针到最开始的位置</p>\n<pre><code>$ git bisect reset\n</code></pre><p>标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者，通过-L来限定行数</p>\n<pre><code>$ git blame\n\n$ git blame -L 12,22 file_to_check\n</code></pre><p>在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式</p>\n<pre><code>$ git grep\n</code></pre><h3 id=\"维护项目\"><a href=\"#维护项目\" class=\"headerlink\" title=\"维护项目\"></a>维护项目</h3><p>balabala…</p>\n","excerpt":"<h1 id=\"Git-note\"><a href=\"#Git-note\" class=\"headerlink\" title=\"Git note\"></a>Git note</h1><p>学习Git的笔记，完整文档见<a href=\"https://git-scm.com/book/zh/v2\">Git-scm</a></p>","more":"<h2 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h2><h3 id=\"获取升级\"><a href=\"#获取升级\" class=\"headerlink\" title=\"获取升级\"></a>获取升级</h3><pre><code>$ git clone git://git.kernel.org/pub/scm/git/git.git\n</code></pre><h3 id=\"添加用户信息，并查看配置文件\"><a href=\"#添加用户信息，并查看配置文件\" class=\"headerlink\" title=\"添加用户信息，并查看配置文件\"></a>添加用户信息，并查看配置文件</h3><pre><code>$ git config --global user.name &quot;juncaixinchi&quot;\n$ git config --global user.email &quot;juncaixinchi111@gmail.com&quot;\n$ less ~/.gitconfig\n</code></pre><h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><pre><code>$ git help &lt;verb&gt;\n$ git &lt;verb&gt; --help\n$ man git-&lt;verb&gt;\n</code></pre><h3 id=\"生成ssh-keys，在Github-keys添加即可\"><a href=\"#生成ssh-keys，在Github-keys添加即可\" class=\"headerlink\" title=\"生成ssh keys，在Github-keys添加即可\"></a>生成ssh keys，在<a href=\"https://github.com/settings/keys\">Github-keys</a>添加即可</h3><pre><code>$ ssh-keygen -t rsa -b 4096 -C &quot;juncaixinchi111@gmail.com&quot;\n$ clip &lt; ~/.ssh/id_rsa.pub\n</code></pre><h2 id=\"Git-基础\"><a href=\"#Git-基础\" class=\"headerlink\" title=\"Git 基础\"></a>Git 基础</h2><h3 id=\"在现有目录中初始化仓库\"><a href=\"#在现有目录中初始化仓库\" class=\"headerlink\" title=\"在现有目录中初始化仓库\"></a>在现有目录中初始化仓库</h3><pre><code>$ git init\n</code></pre><p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。</p>\n<pre><code>$ git add *\n$ git commit -m &apos;initial project version&apos;\n</code></pre><p>在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，应该开始跟踪这些文件并提交。 </p>\n<h3 id=\"克隆现有的仓库\"><a href=\"#克隆现有的仓库\" class=\"headerlink\" title=\"克隆现有的仓库\"></a>克隆现有的仓库</h3><p>克隆blog-generater至当前目录，分别使用HTTPS协议、SSH协议、本地协议</p>\n<pre><code>$ git clone https://github.com/juncaixinchi/blog-generater.git\n$ git clone git@github.com:juncaixinchi/blog-generater.git\n$ git clone /opt/git/project.git\n</code></pre><h3 id=\"记录每次更新到仓库\"><a href=\"#记录每次更新到仓库\" class=\"headerlink\" title=\"记录每次更新到仓库\"></a>记录每次更新到仓库</h3><pre><code>$ git add README\n</code></pre><p>使用命令 git add 开始跟踪跟踪 README 文件</p>\n<pre><code>$ git status\n\n$ git status -s\n</code></pre><p>检查当前文件状态，加-s为简略信息</p>\n<h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><p>创建一个名为 .gitignore 的文件，列出要忽略的文件模式，文件 .gitignore 的格式规范如下：</p>\n<ul>\n<li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li>\n<li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p>\n<pre><code># no .a files\n*.a\n</code></pre></li>\n<li><p>匹配模式可以以（/）开头防止递归。</p>\n<pre><code># only ignore the TODO file in the current directory, not subdir/TODO\n/TODO\n</code></pre></li>\n<li><p>匹配模式可以以（/）结尾指定目录。</p>\n<pre><code># ignore all files in the build/ directory\nbuild/\n</code></pre></li>\n<li><p>可以使用标准的 glob 模式匹配。</p>\n<pre><code># ignore doc/notes.txt, but not doc/server/arch.txt\ndoc/*.txt\n\n# ignore all .pdf files in the doc/ directory\ndoc/**/*.pdf\n</code></pre></li>\n</ul>\n<h3 id=\"提交更新\"><a href=\"#提交更新\" class=\"headerlink\" title=\"提交更新\"></a>提交更新</h3><p>commit命令会提交更新，-m参数可添加提交备注，或者随机生成备注 O__O</p>\n<pre><code>$ git commit -m &quot;update&quot;\n$ git commit -m &quot;`curl -s http://whatthecommit.com/index.txt`&quot;\n</code></pre><p>给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 add 步骤</p>\n<pre><code>$ git commit -a -m &apos;update without git add&apos;\n</code></pre><p>不过正式的提交还是应该避免-m 添加备注，而是详细的添加</p>\n<h3 id=\"移除文件或移动文件\"><a href=\"#移除文件或移动文件\" class=\"headerlink\" title=\"移除文件或移动文件\"></a>移除文件或移动文件</h3><p>使用 rm 命令将文件从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件，如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p>\n<pre><code>$ git rm file_to_remove.md\n$ git mv file_from file_to\n</code></pre><h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><p>查看所有log</p>\n<pre><code>$ git log\n</code></pre><p>显示最近两次提交的差异</p>\n<pre><code>$ git log -p -2\n</code></pre><p>显示每次提交的简略的统计信息</p>\n<pre><code>$ git log --stat\n</code></pre><p>以pretty的方式显示提交历史</p>\n<pre><code>$ git log --pretty=oneline\n</code></pre><p>添加了一些ASCII字符串来形象地展示你的分支、合并历史：</p>\n<pre><code>$ git log --pretty=format:&quot;%h %s&quot; --graph\n</code></pre><p>只显示作者L在2周内提交的近5条记录</p>\n<pre><code>$ git log --author L --since=2.weeks -5\n</code></pre><h3 id=\"撤消操作\"><a href=\"#撤消操作\" class=\"headerlink\" title=\"撤消操作\"></a>撤消操作</h3><p>尝试重新提交,第二次提交将代替第一次提交的结果</p>\n<pre><code>$ git commit -m &apos;initial commit&apos;\n$ git add forgotten_file\n$ git commit --amend\n</code></pre><p>取消暂存的文件file_to_cancle.txt(git add 的相反操作)</p>\n<pre><code>$ git reset HEAD file_to_cancle.txt\n</code></pre><p>撤消对文件的修改，恢复文件file_to_restore.txt到上次提交时候的状态</p>\n<pre><code>$ git checkout -- file_to_restore.txt\n</code></pre><h3 id=\"远程仓库的使用\"><a href=\"#远程仓库的使用\" class=\"headerlink\" title=\"远程仓库的使用\"></a>远程仓库的使用</h3><p>查看远程仓库</p>\n<pre><code>$ git remote -v\n$ git remote show\n</code></pre><p>添加远程仓库，默认为 origin</p>\n<pre><code>$ git remote add &lt;shortname&gt; &lt;url&gt;\n$ git remote add pd https://github.com/juncaixinchi/blog-generater.git\n</code></pre><p>从远程仓库中抓取，默认从origin抓取，也可自定义</p>\n<pre><code>$ git fetch\n$ git fetch https://github.com/juncaixinchi/blog-generater.git\n$ git fetch origin master:tmp\n</code></pre><p>git fetch不会自动merge，需再merge</p>\n<pre><code>$ git fetch origin master:tmp\n$ git diff tmp\n$ git merge tmp\n</code></pre><p>直接从远程获取最新版本并merge到本地</p>\n<pre><code>$ git pull origin master\n</code></pre><p>使用 git push (remote) (branch)推送到远程仓库，默认推送到origin/master, 也可自定义远程仓库及分支（如serverfix）</p>\n<pre><code>$ git push\n$ git push https://github.com/juncaixinchi/blog-generater.git\n$ git push origin serverfix\n$ git push origin serverfix:awesomebranch\n</code></pre><p>设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支</p>\n<pre><code>$ git checkout --track origin/serverfix\n</code></pre><p>远程仓库的移除和重命名</p>\n<pre><code>$ git remote rm paul\n$ git remote rename pb paul\n</code></pre><p>删除远程分支serverfix</p>\n<pre><code>$ git push origin --delete serverfix\n</code></pre><h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><p>列出已有标签</p>\n<pre><code>$ git tag\n</code></pre><p>创建一个附注标签，指定提交的校验和（或部分校验和）则可后期打标签</p>\n<pre><code>$ git tag -a v1.4 -m &apos;my version 1.4&apos;\n$ git tag -a v0.0 -m &quot;origin version&quot; c76e548\n</code></pre><p>共享标签</p>\n<pre><code>$ git push origin v1.5\n</code></pre><h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p>通过 config 为命令设置别名，外部程序的命令则要加!，使用cmu直接add 及 commit </p>\n<pre><code>$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.st status\n$ git config --global alias.last &apos;log -1 HEAD&apos;\n$ git config --global alias.hexo &apos;!hexo g -delpoy&apos;\n$ git config --global alias.cmu &apos;commit -a -m &quot;update&quot;&apos;\n$ git config --global alias.logbr &apos;log --oneline --decorate --graph --all -20&apos;\n</code></pre><h2 id=\"Git-分支\"><a href=\"#Git-分支\" class=\"headerlink\" title=\"Git 分支\"></a>Git 分支</h2><h3 id=\"分支的新建和合并\"><a href=\"#分支的新建和合并\" class=\"headerlink\" title=\"分支的新建和合并\"></a>分支的新建和合并</h3><p>创建分支testing，分支切换为testing，然后commit内容将在test分支进行</p>\n<pre><code>$ git branch testing\n$ git checkout testing\n</code></pre><p>或者在过去某个版本，如593015f,建立分支testing</p>\n<pre><code>$ git log --oneline --decorate --graph --all\n$ git checkout 593015f\n$ git checkout -b testing\n</code></pre><p>使用 log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 –decorate。</p>\n<pre><code>$ git log --oneline --decorate\n$ git log --oneline --decorate --graph --all\n</code></pre><p>使用 merge 来合并分支</p>\n<pre><code>$ git merger testing\n</code></pre><p>如果 master 和 testing 分支都各有提交新版本，则无法自动合并，会出现如下错误，需要手动编辑冲突的文件，然后再 commit，</p>\n<pre><code>Auto Merge Failed; Fix Conflicts and Then Commit the Result\n</code></pre><p>例如冲突的文件内容为：</p>\n<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;\n=======\n&lt;div id=&quot;footer&quot;&gt;\n please contact us at support@github.com\n&lt;/div&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; testing:index.html\n</code></pre><p>这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置）在这个区段的上半部分（======= 的上半部分），而 testing 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，必须选择使用由 ======= 分割的两部分中的一个，或者也可以自行合并这些内容。 例如，通过把这段内容换成下面的样子来解决冲突：</p>\n<pre><code>&lt;div id=&quot;footer&quot;&gt;\nplease contact us at email.support@github.com\n&lt;/div&gt;\n</code></pre><p>另外也可以使用图形化工具来解决冲突</p>\n<pre><code>$ git mergetool\n</code></pre><p>合并完成后删除分支testing</p>\n<pre><code>$ git branch -d testing\n</code></pre><h3 id=\"分支的管理\"><a href=\"#分支的管理\" class=\"headerlink\" title=\"分支的管理\"></a>分支的管理</h3><p>显示分支列表</p>\n<pre><code>$ git branch\n</code></pre><p>查看每一个分支的最后一次提交</p>\n<pre><code>$ git branch -v\n</code></pre><p>查看已经合并或尚未合并到当前分支的分支</p>\n<pre><code>$ git branch --merged\n$ git branch --no-merged\n</code></pre><p>删除和强制删除分支</p>\n<pre><code>$ git branch -d testing\n$ git branch -D testing\n</code></pre><h3 id=\"分支整合之变基\"><a href=\"#分支整合之变基\" class=\"headerlink\" title=\"分支整合之变基\"></a>分支整合之变基</h3><p>使用 rebase 命令将提交到某一分支 testing 上的所有修改都移至另一分支 master 上，然后回到 master 分支，进行一次快进合并。</p>\n<pre><code>$ git checkout testing\n$ git rebase master\n\n$ git checkout master\n$ git merge testing\n</code></pre><p>直接将特性分支（testing）变基到目标分支（即 master）上</p>\n<pre><code>$ git rebase master testing\n</code></pre><p>对两个分支进行变基时，将 client 中的修改合并到主分支并发布，但暂时并不合并 server 中的修改</p>\n<pre><code>$ git rebase --onto master server client\n</code></pre><p>变基的风险：<code>不要对在仓库外有副本的分支执行变基</code></p>\n<h2 id=\"Git工具\"><a href=\"#Git工具\" class=\"headerlink\" title=\"Git工具\"></a>Git工具</h2><h3 id=\"子模块\"><a href=\"#子模块\" class=\"headerlink\" title=\"子模块\"></a>子模块</h3><p>将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。</p>\n<pre><code>$ git submodule add git@github.com:juncaixinchi/hexo-theme-next.git themes/next\n$ git submodule init\n$ git submodule update \n$ git submodule update themes/next\n</code></pre><p>在开始克隆含有子模块的仓库时，可添加–recursive，直接递归添加所有子模块</p>\n<pre><code>$ git clone --recursive https://github.com/juncaixinchi/blog-generater.git\n</code></pre><p>让 Git 在推送到主项目前检查所有子模块是否已推送    </p>\n<pre><code>$ git push --recurse-submodules=check\n</code></pre><p>让 Git 自动进入到子模块中，然后在推送主项目前推送了它</p>\n<pre><code>$ git push --recurse-submodules=on-demand\n</code></pre><p>遍历子模块运行命令</p>\n<pre><code>$ git submodule foreach &apos;git push&apos;\n</code></pre><h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。</p>\n<p>开始二分查找，并设置当前版本为有问题状态</p>\n<pre><code>$ git bisect start\n$ git bisect bad\n</code></pre><p>设定没有问题的版本，然后依次检测个版本，设定 bad or good ，直到找到问题版本</p>\n<pre><code>$ git bisect good v1.0\n</code></pre><p>完成后，重置 HEAD 指针到最开始的位置</p>\n<pre><code>$ git bisect reset\n</code></pre><p>标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者，通过-L来限定行数</p>\n<pre><code>$ git blame\n\n$ git blame -L 12,22 file_to_check\n</code></pre><p>在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式</p>\n<pre><code>$ git grep\n</code></pre><h3 id=\"维护项目\"><a href=\"#维护项目\" class=\"headerlink\" title=\"维护项目\"></a>维护项目</h3><p>balabala…</p>"},{"title":"Github Git Cheat Sheet","date":"2017-02-12T08:42:19.000Z","_content":"\n\n# GitHub Git 备忘单\n\nGit是一个开源的分布式版本控制系统，方便你在笔记本或桌面端进行GitHub的操作，这个备忘单总结了常用的Git命令行指令，以便快速查询。\n\n转载自[GitHub Git 备忘单](https://services.github.com/on-demand/downloads/zh_CN/github-git-cheat-sheet/)\n\n\n## 要点\n\n将所有文件进行快照处理用于版本控制\n\n\tgit add *\n\n将文件快照永久地记录在版本历史中\n\n\tgit commit -m \"upload files\"\n\n上传所有本地分支commit到GitHub上\n\n\tgit push\n\n<!-- more -->\n\n### 安装Git\n\nGitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。\n\nGitHub for Windows\nhttp://windows.github.com\n\nGitHub for Mac\nhttp://mac.github.com\n\nGitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。\n\nGit 全平台版\nhttp://git-scm.com\n\n### 配置工具\n\n对你的commit操作设置关联的用户名\n\n\t$ git config --global user.name \"[name]\"\n\n对你的commit操作设置关联的邮箱地址\n\n\t$ git config --global user.email \"[email address]\"\n\n### 创建仓库\n\n创建一个本地的仓库，并设置名字\n\n\t$ git init [project-name]\n\n下载一个项目以及它所有的版本历史\n\n\t$ git clone [url]\n\n### 更改\n\n列出所有新建或者更改的文件，这些文件需要被commit\n\n\t$ git status\n\n展示那些没有暂存文件的差异\n\n\t$ git diff\n\n将文件进行快照处理用于版本控制\n\n\t$ git add [file]\n\n展示暂存文件与最新版本之间的不同\n\n\t$ git diff --staged\n\n将文件移除暂存区，但是保留其内容\n\n\t$ git reset [file]\n\n将文件快照永久地记录在版本历史中\n\n\t$ git commit -m\"[descriptive message]\"\n\n### 批量更改\n\n列出当前仓库中所有的本地分支\n\n\t$ git branch\n\n建立一个新分支\n\n\t$ git branch [branch-name]\n\n切换到一个特定的分支上并更新工作目录\n\n\t$ git checkout [branch-name]\n\n合并特定分支的历史到当前分支\n\n\t$ git merge [branch-name]\n\n删除特定的分支\n\n\t$ git branch -d [branch-name]\n\n### 重构文件\n\n从工作目录中删除文件并暂存此删除\n\n\t$ git rm [file]\n\n从版本控制中移除文件，但不改变本地文件\n\n\t$ git rm --cached [file]\n\n改变文件名，将其进行快照处理用于版本控制\n\n\t$ git mv [file-original] [file-renamed]\n\n\n\n### 停止追踪\n\n文本文件.gitignore可以防止一些特定的文件进入到版本控制中\n\n\t*.log build/ temp-*\n\n列出所有项目中忽略的文件\n\n\t$ git ls-files --others --ignored --exclude-standard\n\n### 保存临时更改\n\n临时存储所有修改的已跟踪文件\n\n\t$ git stash\n\n重新存储所有最近被stash的文件\n\n\t$ git stash pop\n\n列出所有被stash的更改\n\n\t$ git stash list\n\n放弃所有最近stash的更改\n\n\t$ git stash drop\n\n### 查阅历史\n\n列出当前分支的版本历史\n\n\t$ git log\n\n列出文件的版本历史，包括重命名\n\n\t$ git log --follow [file]\n\n展示两个不同分支之间的差异\n\n\t$ git diff [first-branch]...[second-branch]\n\n输出元数据以及特定commit的内容变化\n\n\t$ git show [commit]\n\n### 撤销commit\n\n撤销所有[commit]后的的commit，在本地保存更改\n\n\t$ git reset [commit]\n\n放弃所有更改并回到某个特定的commit\n\n\t$ git reset --hard [commit]\n\n### 同步更改\n\n下载远程仓库的所有历史\n\n\t$ git fetch [remote]\n\n合并远程分支到当前本地分支\n\n\t$ git merge [remote]/[branch]\n\n上传所有本地分支commit到GitHub上\n\n\t$ git push [remote] [branch]\n\n下载远程仓库的所有历史并合并更改\n\n\t$ git pull","source":"_posts/Github-Git-Cheat-Sheet.md","raw":"---\ntitle: Github Git Cheat Sheet\ndate: 2017-02-12 16:42:19\ntags:\n    - Git\n    - Github\n    - Cheat-sheet\n---\n\n\n# GitHub Git 备忘单\n\nGit是一个开源的分布式版本控制系统，方便你在笔记本或桌面端进行GitHub的操作，这个备忘单总结了常用的Git命令行指令，以便快速查询。\n\n转载自[GitHub Git 备忘单](https://services.github.com/on-demand/downloads/zh_CN/github-git-cheat-sheet/)\n\n\n## 要点\n\n将所有文件进行快照处理用于版本控制\n\n\tgit add *\n\n将文件快照永久地记录在版本历史中\n\n\tgit commit -m \"upload files\"\n\n上传所有本地分支commit到GitHub上\n\n\tgit push\n\n<!-- more -->\n\n### 安装Git\n\nGitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。\n\nGitHub for Windows\nhttp://windows.github.com\n\nGitHub for Mac\nhttp://mac.github.com\n\nGitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。\n\nGit 全平台版\nhttp://git-scm.com\n\n### 配置工具\n\n对你的commit操作设置关联的用户名\n\n\t$ git config --global user.name \"[name]\"\n\n对你的commit操作设置关联的邮箱地址\n\n\t$ git config --global user.email \"[email address]\"\n\n### 创建仓库\n\n创建一个本地的仓库，并设置名字\n\n\t$ git init [project-name]\n\n下载一个项目以及它所有的版本历史\n\n\t$ git clone [url]\n\n### 更改\n\n列出所有新建或者更改的文件，这些文件需要被commit\n\n\t$ git status\n\n展示那些没有暂存文件的差异\n\n\t$ git diff\n\n将文件进行快照处理用于版本控制\n\n\t$ git add [file]\n\n展示暂存文件与最新版本之间的不同\n\n\t$ git diff --staged\n\n将文件移除暂存区，但是保留其内容\n\n\t$ git reset [file]\n\n将文件快照永久地记录在版本历史中\n\n\t$ git commit -m\"[descriptive message]\"\n\n### 批量更改\n\n列出当前仓库中所有的本地分支\n\n\t$ git branch\n\n建立一个新分支\n\n\t$ git branch [branch-name]\n\n切换到一个特定的分支上并更新工作目录\n\n\t$ git checkout [branch-name]\n\n合并特定分支的历史到当前分支\n\n\t$ git merge [branch-name]\n\n删除特定的分支\n\n\t$ git branch -d [branch-name]\n\n### 重构文件\n\n从工作目录中删除文件并暂存此删除\n\n\t$ git rm [file]\n\n从版本控制中移除文件，但不改变本地文件\n\n\t$ git rm --cached [file]\n\n改变文件名，将其进行快照处理用于版本控制\n\n\t$ git mv [file-original] [file-renamed]\n\n\n\n### 停止追踪\n\n文本文件.gitignore可以防止一些特定的文件进入到版本控制中\n\n\t*.log build/ temp-*\n\n列出所有项目中忽略的文件\n\n\t$ git ls-files --others --ignored --exclude-standard\n\n### 保存临时更改\n\n临时存储所有修改的已跟踪文件\n\n\t$ git stash\n\n重新存储所有最近被stash的文件\n\n\t$ git stash pop\n\n列出所有被stash的更改\n\n\t$ git stash list\n\n放弃所有最近stash的更改\n\n\t$ git stash drop\n\n### 查阅历史\n\n列出当前分支的版本历史\n\n\t$ git log\n\n列出文件的版本历史，包括重命名\n\n\t$ git log --follow [file]\n\n展示两个不同分支之间的差异\n\n\t$ git diff [first-branch]...[second-branch]\n\n输出元数据以及特定commit的内容变化\n\n\t$ git show [commit]\n\n### 撤销commit\n\n撤销所有[commit]后的的commit，在本地保存更改\n\n\t$ git reset [commit]\n\n放弃所有更改并回到某个特定的commit\n\n\t$ git reset --hard [commit]\n\n### 同步更改\n\n下载远程仓库的所有历史\n\n\t$ git fetch [remote]\n\n合并远程分支到当前本地分支\n\n\t$ git merge [remote]/[branch]\n\n上传所有本地分支commit到GitHub上\n\n\t$ git push [remote] [branch]\n\n下载远程仓库的所有历史并合并更改\n\n\t$ git pull","slug":"Github-Git-Cheat-Sheet","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkoz000577hxif5hr90q","content":"<h1 id=\"GitHub-Git-备忘单\"><a href=\"#GitHub-Git-备忘单\" class=\"headerlink\" title=\"GitHub Git 备忘单\"></a>GitHub Git 备忘单</h1><p>Git是一个开源的分布式版本控制系统，方便你在笔记本或桌面端进行GitHub的操作，这个备忘单总结了常用的Git命令行指令，以便快速查询。</p>\n<p>转载自<a href=\"https://services.github.com/on-demand/downloads/zh_CN/github-git-cheat-sheet/\" target=\"_blank\" rel=\"external\">GitHub Git 备忘单</a></p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><p>将所有文件进行快照处理用于版本控制</p>\n<pre><code>git add *\n</code></pre><p>将文件快照永久地记录在版本历史中</p>\n<pre><code>git commit -m &quot;upload files&quot;\n</code></pre><p>上传所有本地分支commit到GitHub上</p>\n<pre><code>git push\n</code></pre><a id=\"more\"></a>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>GitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。</p>\n<p>GitHub for Windows<br><a href=\"http://windows.github.com\" target=\"_blank\" rel=\"external\">http://windows.github.com</a></p>\n<p>GitHub for Mac<br><a href=\"http://mac.github.com\" target=\"_blank\" rel=\"external\">http://mac.github.com</a></p>\n<p>GitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。</p>\n<p>Git 全平台版<br><a href=\"http://git-scm.com\" target=\"_blank\" rel=\"external\">http://git-scm.com</a></p>\n<h3 id=\"配置工具\"><a href=\"#配置工具\" class=\"headerlink\" title=\"配置工具\"></a>配置工具</h3><p>对你的commit操作设置关联的用户名</p>\n<pre><code>$ git config --global user.name &quot;[name]&quot;\n</code></pre><p>对你的commit操作设置关联的邮箱地址</p>\n<pre><code>$ git config --global user.email &quot;[email address]&quot;\n</code></pre><h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>创建一个本地的仓库，并设置名字</p>\n<pre><code>$ git init [project-name]\n</code></pre><p>下载一个项目以及它所有的版本历史</p>\n<pre><code>$ git clone [url]\n</code></pre><h3 id=\"更改\"><a href=\"#更改\" class=\"headerlink\" title=\"更改\"></a>更改</h3><p>列出所有新建或者更改的文件，这些文件需要被commit</p>\n<pre><code>$ git status\n</code></pre><p>展示那些没有暂存文件的差异</p>\n<pre><code>$ git diff\n</code></pre><p>将文件进行快照处理用于版本控制</p>\n<pre><code>$ git add [file]\n</code></pre><p>展示暂存文件与最新版本之间的不同</p>\n<pre><code>$ git diff --staged\n</code></pre><p>将文件移除暂存区，但是保留其内容</p>\n<pre><code>$ git reset [file]\n</code></pre><p>将文件快照永久地记录在版本历史中</p>\n<pre><code>$ git commit -m&quot;[descriptive message]&quot;\n</code></pre><h3 id=\"批量更改\"><a href=\"#批量更改\" class=\"headerlink\" title=\"批量更改\"></a>批量更改</h3><p>列出当前仓库中所有的本地分支</p>\n<pre><code>$ git branch\n</code></pre><p>建立一个新分支</p>\n<pre><code>$ git branch [branch-name]\n</code></pre><p>切换到一个特定的分支上并更新工作目录</p>\n<pre><code>$ git checkout [branch-name]\n</code></pre><p>合并特定分支的历史到当前分支</p>\n<pre><code>$ git merge [branch-name]\n</code></pre><p>删除特定的分支</p>\n<pre><code>$ git branch -d [branch-name]\n</code></pre><h3 id=\"重构文件\"><a href=\"#重构文件\" class=\"headerlink\" title=\"重构文件\"></a>重构文件</h3><p>从工作目录中删除文件并暂存此删除</p>\n<pre><code>$ git rm [file]\n</code></pre><p>从版本控制中移除文件，但不改变本地文件</p>\n<pre><code>$ git rm --cached [file]\n</code></pre><p>改变文件名，将其进行快照处理用于版本控制</p>\n<pre><code>$ git mv [file-original] [file-renamed]\n</code></pre><h3 id=\"停止追踪\"><a href=\"#停止追踪\" class=\"headerlink\" title=\"停止追踪\"></a>停止追踪</h3><p>文本文件.gitignore可以防止一些特定的文件进入到版本控制中</p>\n<pre><code>*.log build/ temp-*\n</code></pre><p>列出所有项目中忽略的文件</p>\n<pre><code>$ git ls-files --others --ignored --exclude-standard\n</code></pre><h3 id=\"保存临时更改\"><a href=\"#保存临时更改\" class=\"headerlink\" title=\"保存临时更改\"></a>保存临时更改</h3><p>临时存储所有修改的已跟踪文件</p>\n<pre><code>$ git stash\n</code></pre><p>重新存储所有最近被stash的文件</p>\n<pre><code>$ git stash pop\n</code></pre><p>列出所有被stash的更改</p>\n<pre><code>$ git stash list\n</code></pre><p>放弃所有最近stash的更改</p>\n<pre><code>$ git stash drop\n</code></pre><h3 id=\"查阅历史\"><a href=\"#查阅历史\" class=\"headerlink\" title=\"查阅历史\"></a>查阅历史</h3><p>列出当前分支的版本历史</p>\n<pre><code>$ git log\n</code></pre><p>列出文件的版本历史，包括重命名</p>\n<pre><code>$ git log --follow [file]\n</code></pre><p>展示两个不同分支之间的差异</p>\n<pre><code>$ git diff [first-branch]...[second-branch]\n</code></pre><p>输出元数据以及特定commit的内容变化</p>\n<pre><code>$ git show [commit]\n</code></pre><h3 id=\"撤销commit\"><a href=\"#撤销commit\" class=\"headerlink\" title=\"撤销commit\"></a>撤销commit</h3><p>撤销所有[commit]后的的commit，在本地保存更改</p>\n<pre><code>$ git reset [commit]\n</code></pre><p>放弃所有更改并回到某个特定的commit</p>\n<pre><code>$ git reset --hard [commit]\n</code></pre><h3 id=\"同步更改\"><a href=\"#同步更改\" class=\"headerlink\" title=\"同步更改\"></a>同步更改</h3><p>下载远程仓库的所有历史</p>\n<pre><code>$ git fetch [remote]\n</code></pre><p>合并远程分支到当前本地分支</p>\n<pre><code>$ git merge [remote]/[branch]\n</code></pre><p>上传所有本地分支commit到GitHub上</p>\n<pre><code>$ git push [remote] [branch]\n</code></pre><p>下载远程仓库的所有历史并合并更改</p>\n<pre><code>$ git pull\n</code></pre>","excerpt":"<h1 id=\"GitHub-Git-备忘单\"><a href=\"#GitHub-Git-备忘单\" class=\"headerlink\" title=\"GitHub Git 备忘单\"></a>GitHub Git 备忘单</h1><p>Git是一个开源的分布式版本控制系统，方便你在笔记本或桌面端进行GitHub的操作，这个备忘单总结了常用的Git命令行指令，以便快速查询。</p>\n<p>转载自<a href=\"https://services.github.com/on-demand/downloads/zh_CN/github-git-cheat-sheet/\">GitHub Git 备忘单</a></p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><p>将所有文件进行快照处理用于版本控制</p>\n<pre><code>git add *\n</code></pre><p>将文件快照永久地记录在版本历史中</p>\n<pre><code>git commit -m &quot;upload files&quot;\n</code></pre><p>上传所有本地分支commit到GitHub上</p>\n<pre><code>git push\n</code></pre>","more":"<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>GitHub提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。</p>\n<p>GitHub for Windows<br><a href=\"http://windows.github.com\">http://windows.github.com</a></p>\n<p>GitHub for Mac<br><a href=\"http://mac.github.com\">http://mac.github.com</a></p>\n<p>GitHub的Linux和POSIX版本可以在官方的Git SCM网站上获取。</p>\n<p>Git 全平台版<br><a href=\"http://git-scm.com\">http://git-scm.com</a></p>\n<h3 id=\"配置工具\"><a href=\"#配置工具\" class=\"headerlink\" title=\"配置工具\"></a>配置工具</h3><p>对你的commit操作设置关联的用户名</p>\n<pre><code>$ git config --global user.name &quot;[name]&quot;\n</code></pre><p>对你的commit操作设置关联的邮箱地址</p>\n<pre><code>$ git config --global user.email &quot;[email address]&quot;\n</code></pre><h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>创建一个本地的仓库，并设置名字</p>\n<pre><code>$ git init [project-name]\n</code></pre><p>下载一个项目以及它所有的版本历史</p>\n<pre><code>$ git clone [url]\n</code></pre><h3 id=\"更改\"><a href=\"#更改\" class=\"headerlink\" title=\"更改\"></a>更改</h3><p>列出所有新建或者更改的文件，这些文件需要被commit</p>\n<pre><code>$ git status\n</code></pre><p>展示那些没有暂存文件的差异</p>\n<pre><code>$ git diff\n</code></pre><p>将文件进行快照处理用于版本控制</p>\n<pre><code>$ git add [file]\n</code></pre><p>展示暂存文件与最新版本之间的不同</p>\n<pre><code>$ git diff --staged\n</code></pre><p>将文件移除暂存区，但是保留其内容</p>\n<pre><code>$ git reset [file]\n</code></pre><p>将文件快照永久地记录在版本历史中</p>\n<pre><code>$ git commit -m&quot;[descriptive message]&quot;\n</code></pre><h3 id=\"批量更改\"><a href=\"#批量更改\" class=\"headerlink\" title=\"批量更改\"></a>批量更改</h3><p>列出当前仓库中所有的本地分支</p>\n<pre><code>$ git branch\n</code></pre><p>建立一个新分支</p>\n<pre><code>$ git branch [branch-name]\n</code></pre><p>切换到一个特定的分支上并更新工作目录</p>\n<pre><code>$ git checkout [branch-name]\n</code></pre><p>合并特定分支的历史到当前分支</p>\n<pre><code>$ git merge [branch-name]\n</code></pre><p>删除特定的分支</p>\n<pre><code>$ git branch -d [branch-name]\n</code></pre><h3 id=\"重构文件\"><a href=\"#重构文件\" class=\"headerlink\" title=\"重构文件\"></a>重构文件</h3><p>从工作目录中删除文件并暂存此删除</p>\n<pre><code>$ git rm [file]\n</code></pre><p>从版本控制中移除文件，但不改变本地文件</p>\n<pre><code>$ git rm --cached [file]\n</code></pre><p>改变文件名，将其进行快照处理用于版本控制</p>\n<pre><code>$ git mv [file-original] [file-renamed]\n</code></pre><h3 id=\"停止追踪\"><a href=\"#停止追踪\" class=\"headerlink\" title=\"停止追踪\"></a>停止追踪</h3><p>文本文件.gitignore可以防止一些特定的文件进入到版本控制中</p>\n<pre><code>*.log build/ temp-*\n</code></pre><p>列出所有项目中忽略的文件</p>\n<pre><code>$ git ls-files --others --ignored --exclude-standard\n</code></pre><h3 id=\"保存临时更改\"><a href=\"#保存临时更改\" class=\"headerlink\" title=\"保存临时更改\"></a>保存临时更改</h3><p>临时存储所有修改的已跟踪文件</p>\n<pre><code>$ git stash\n</code></pre><p>重新存储所有最近被stash的文件</p>\n<pre><code>$ git stash pop\n</code></pre><p>列出所有被stash的更改</p>\n<pre><code>$ git stash list\n</code></pre><p>放弃所有最近stash的更改</p>\n<pre><code>$ git stash drop\n</code></pre><h3 id=\"查阅历史\"><a href=\"#查阅历史\" class=\"headerlink\" title=\"查阅历史\"></a>查阅历史</h3><p>列出当前分支的版本历史</p>\n<pre><code>$ git log\n</code></pre><p>列出文件的版本历史，包括重命名</p>\n<pre><code>$ git log --follow [file]\n</code></pre><p>展示两个不同分支之间的差异</p>\n<pre><code>$ git diff [first-branch]...[second-branch]\n</code></pre><p>输出元数据以及特定commit的内容变化</p>\n<pre><code>$ git show [commit]\n</code></pre><h3 id=\"撤销commit\"><a href=\"#撤销commit\" class=\"headerlink\" title=\"撤销commit\"></a>撤销commit</h3><p>撤销所有[commit]后的的commit，在本地保存更改</p>\n<pre><code>$ git reset [commit]\n</code></pre><p>放弃所有更改并回到某个特定的commit</p>\n<pre><code>$ git reset --hard [commit]\n</code></pre><h3 id=\"同步更改\"><a href=\"#同步更改\" class=\"headerlink\" title=\"同步更改\"></a>同步更改</h3><p>下载远程仓库的所有历史</p>\n<pre><code>$ git fetch [remote]\n</code></pre><p>合并远程分支到当前本地分支</p>\n<pre><code>$ git merge [remote]/[branch]\n</code></pre><p>上传所有本地分支commit到GitHub上</p>\n<pre><code>$ git push [remote] [branch]\n</code></pre><p>下载远程仓库的所有历史并合并更改</p>\n<pre><code>$ git pull\n</code></pre>"},{"title":"Hello Hexo","date":"2017-02-12T08:24:56.000Z","_content":"\nHello Hexo !","source":"_posts/Hello-Hexo.md","raw":"---\ntitle: Hello Hexo\ndate: 2017-02-12 16:24:56\ntags:\n\t- Hexo\n---\n\nHello Hexo !","slug":"Hello-Hexo","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkp0000677hxjqty3kf1","content":"<p>Hello Hexo !</p>\n","excerpt":"","more":"<p>Hello Hexo !</p>\n"},{"title":"JSX-Syntax","date":"2017-03-04T11:26:35.000Z","_content":"\n# JSX 语法\n\nJSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n\n<!-- more -->\n\n## Hello World\n\n首先是官网的例子helloworld，其中`<h1>Hello, world!</h1>`就是使用到了JSX语法。HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Hello React!</title>\n  <script src=\"vendor-js/react.js\"></script>\n  <script src=\"vendor-js/react-dom.js\"></script>\n  <script src=\"vendor-js/babel-core/browser.min.js\"></script>\n</head>\n<body>\n  <div id=\"example\"></div>\n  <script type=\"text/babel\">\n    ReactDOM.render(\n      <h1>Hello, world!</h1>,\n      document.getElementById('example')\n    );\n  </script>\n</body>\n</html>\n```\n\n在上述JSX语法中要注意的地方：\n\n+ `<script>` 标签的 type 属性为 `text/babel`，这是React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是在页面中直接使用 JSX 的地方，都要加上 `type=\"text/babel\"`。\n+ 一共用了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能， browser.min.js的作用是将 JSX 语法转为 JavaScript 语法。\n+ ReactDOM.render 是 React 的最基本方法，将模板转为HTML语言，并插入指定的 DOM 节点。\n+ 将 JSX 语法转为 JavaScript 语法，这一步很消耗时间。现在前端项目，都会使用前端工程化，不会直接在html页面中直接写js代码，写好的js代码都会使用工具进行编译压缩等。这样的话，JSX也会通过编译直接转化成js语法，让浏览器直接使用。\n\n## JSX的特点\n\n+ 类XML语法容易接受，结构清晰\n+ 增强JS语义\n+ 抽象程度高，屏蔽DOM操作，跨平台\n+ 代码模块化\n\n## JSX基本语法规则\n\nJSX本身就和XML语法类似，可以定义属性以及子元素。唯一特殊的是可以用大括号来加入JavaScript表达式，即：\n\n**遇到 HTML 标签（以 < 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。**\n\n```JSX\nvar arr = [\n <h1>Hello world!</h1>,\n <h2>React is awesome</h2>,\n];\nReactDOM.render(\n <div>{arr}</div>,\n document.getElementById('example')\n);\n```\n\n## JavaScript表达式\n\n### 基础语法\n\n用一对大括号 { } 包起来的JavaScript表达式可以作为标签的子结点（children），也可以是属性值\n\n```JSX\n// 以下语句等价\n<MyComponent>foo</MyComponent>\n<MyComponent>{'foo'}</MyComponent>\n\n// JavaScript 表达式作为属性值\nReact.render(\n    <div className={2 > 1 ? 'class-a' : 'class-b'}>content</div>,\n    document.body\n);\n```\n\n### 条件判断的写法\n\n因为 JSX 只是函数调用和对象创建的语法糖，在 { } 中不能 if-else 语句，不过可以采用三元操作表达式\n\n```JSX\nvar HelloMessage = React.createClass({ \n  render: function() { \n    return <div>Hello {this.props.name ？ this.props.name : \"World\"}</div>; \n  }\n});\nReactDOM.render(<HelloMessage name=\"xiaowang\" />, document.body);\n```\n\n可以使用比较运算符“ && ” 和 “ || ”来替代“ if ”\n\n  + “&&” ：如果左边的值为真，才返回右边的表达式，不过要注意&&之前的需要是一个boolean值\n\n  ```JSX\n  <div>\n    {showHeader && <Header />}\n    <Content />\n  </div>\n  ```\n\n  + “||” ：如果左边的值为真，则直接返回左边的值，否则返回右边的值\n\n  ```JSX\n  var HelloMessage = React.createClass({ \n    render: function() { \n      return <div>Hello {this.props.name || \"World\"}</div>; \n    }\n  });\n  ```\n\n## Children in JSX\n\n在JSX表达式中包括开标签和闭标签，这俩个标签之间的内容被定义为一个特殊的prop，即props.children\n\n### String Literals as Children\n\n开标签和闭标签的内容或者props.children的值可以是一个string，这与HTML的语法相同\n\n```JSX\n<MyComponent>Hello world!</MyComponent>\n<div>This is valid HTML &amp; JSX at the same time.</div>\n```\n\n### JSX elements as the Children\n\nChildren也可以是一个JSX element，以下是一个“纯组件”的例子\n\n```JSX\n<MyContainer>\n  <MyFirstComponent />\n  <MySecondComponent />\n</MyContainer>\n```\n\n### JavaScript Expressions as Children\n\nchildren也可以是JavaScript表达式，需要用{}包起来，以下是渲染一个任意行数的HTML list的例子\n\n```JSX\nfunction Item(props) {\n  return <li>{props.message}</li>;\n}\n\nfunction TodoList() {\n  const todos = ['finish doc', 'submit pr', 'nag dan to review'];\n  return (\n    <ul>\n      {todos.map((message) => <Item key={message} message={message} />)}\n    </ul>\n  );\n}\n```\n\n### Functions as Children\n\n一般情况下，在JSX中的插入的JavaScript表达式会最终表现为string、React element或者这些内容形成的list。但是props.children实际上可以传递任何数据，不需要一定是React可以render的内容。例如，可以自定义一个组件，其children是一个函数，最终函数的callback作为props.children\n\n```JSX\n// Calls the children callback numTimes to produce a repeated component\nfunction Repeat(props) {\n  let items = [];\n  for (let i = 0; i < props.numTimes; i++) {\n    items.push(props.children(i));\n  }\n  return <div>{items}</div>;\n}\n\nfunction ListOfTenThings() {\n  return (\n    <Repeat numTimes={10}>\n      {(index) => <div key={index}>This is item {index} in the list</div>}\n    </Repeat>\n  );\n}\n```\n所以说Children传给组件的可以是任意内容，只要组件能够在render前，将children转化为React能够理解的内容即可。\n\n## 注释\n\nrender函数内的注释需要写在花括号中，实例如下：\n\n```JSX\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    {/*注释...*/}\n     </div>,\n    document.getElementById('example')\n);\n```\n\n## JSX 陷阱\n\n+ style属性\n{% raw %}\n  在React中写行内样式时，要使用`style={{}}`的方式，属性值不能是字符串而必须为对象，需要注意的是属性名同样需要驼峰命名法。即`margin-top`要写成`marginTop`。\n{% endraw %}\n  > 骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName 等，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。\n\n  ```JSX\n  React.render(\n      <div style={{color:'red'}}>\n          xxxxx\n      </div>,\n      document.body\n  );\n  ```\n\n+ HTML转义\n\n  React默认会进行HTML的转义，避免XSS攻击\n\n  ```JSX\n  var content='<strong>content</strong>';\n  React.render(\n      <div>{content}</div>,\n      document.body\n  );\n  //结果页面直接输出内容了\"<strong>content</strong>\"\n  ```\n\n+ 自定义HTML属性\n\n  如果往原生 HTML 元素里传入 HTML 规范里不存在的属性，React 不会显示它们。如果需要使用自定义属性，要加 `data-` 前缀。 \n\n  ```JSX\n  <div data-custom-attribute=\"foo\" />\n  ```\n\n+ 组件类只能包含一个顶层标签\n\n  ```JSX\n  //var myDivElement =<h1>你好</h1><h1>hello</h1>;\n  //上述写法是会报错的，要写成只有一个顶层标签：\n  var myDivElement =<div><h1>你好</h1><h1>hello</h1></div>;\n  ```\n+ Boolean 属性\n\n  省略一个属性的值会导致JSX把它当做 true。要传值 false必须使用属性表达式。这常出现于使用HTML表单元素，含有属性如disabled, required, checked 和 readOnly。\n\n  ```JSX\n  // 在JSX中，对于禁用按钮这二者是相同的。\n  <input type=\"button\" disabled />;\n  <input type=\"button\" disabled={true} />;\n\n  // 在JSX中，对于不禁用按钮这二者是相同的。\n  <input type=\"button\" />;\n  <input type=\"button\" disabled={false} />;\n  ```\n\n## React组件\n\n### 基础用法\n\n使用JSX来将代码封装成React组件，然后像插入普通 HTML 标签一样，在其他地方插入这个组件。使用React.createClass用于生成一个组件。\n\n```JSX\nvar MyComponent=React.createClass({\n  render: function() {\n   return <h1>Hello world!</h1>;\n }\n});\nReactDOM.render(\n <MyComponent />,\n document.getElementById('example')\n);\n```\n\n上面代码中，变量 MyComponent就是一个组件类。模板插入 <MyComponent /> 时，会自动生成 MyComponent 的一个实例（下文的\"组件\"都指组件类的实例）。\n\n** 所有组件类都必须有自己的 render 方法，用于输出组件。 **\n\n### HTML 标签 vs. React 组件\n\nReact 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。\n\n  + 渲染HTML标签，声明变量采用首字母小写\n\n  ```JSX\n  //要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。\n  var myDivElement = <div className=\"foo\" />;\n  React.render(myDivElement, document.getElementById('example'));\n  ```\n\n  + 渲染React组件，声明变量采用首字母大写\n\n  ```JSX\n  //要渲染 React 组件，只需创建一个大写字母开头的本地变量。\n  var MyComponent = React.createClass({/*...*/});\n  var myElement = <MyComponent  />;\n  React.render(myElement, document.getElementById('example'));\n  ```\n\n### 动态组件\n\n```JSX\nvar MyComponent=React.createClass({\n  getInitialState: function() {\n       return {clickNum: 0};\n  },\n  handleClick:function(){\n    var num=this.state.clickNum;\n    num++;\n    this.setState({clickNum:num});\n  },\n  render: function() {\n   return (\n      <div>\n        <h1 onClick={this.handleClick}>Hello {this.props.name}!</h1>\n        <h2 style={{color:'red'}}>点击{this.props.name}次数：{this.state.clickNum}</h2>\n      </div>\n    );\n }\n});\nReactDOM.render(\n  <div>\n     <MyComponent name=\"张三\" />\n     <hr/>\n     <MyComponent name=\"李四\" />\n  </div>,\n document.getElementById('example')\n);\n```\n\n上面代码中定义的MyComponent组件包含属性，状态和事件，是一个简单的比较完整的组件。\n\n+ 使用props通过父组件进行传递值\n+ 使用state定义组件自己的状态\n+ 组件支持的大部分的DOM操作事件\n\n### 属性props的注意要点\n\n+ class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。\n+this.props.children 不要children作为把对象的属性名。因为this.props.children获取的该标签下的所有子标签。this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 this.props.children 的时候要小心。官方建议使用React.Children.map来遍历子节点，而不用担心数据类型。\n\n### 状态state的注意要点\n\n+ 组件免不了要与用户互动，React 将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。\n+ getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。\n\n由于 this.props 和 this.state 的简单的区分方法：\n\n**this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。**","source":"_posts/JSX-Syntax.md","raw":"---\ntitle: JSX-Syntax\ndate: 2017-03-04 19:26:35\ntags:\n\t- React\n\t- JSX\n  - JavaScript\n---\n\n# JSX 语法\n\nJSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n\n<!-- more -->\n\n## Hello World\n\n首先是官网的例子helloworld，其中`<h1>Hello, world!</h1>`就是使用到了JSX语法。HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Hello React!</title>\n  <script src=\"vendor-js/react.js\"></script>\n  <script src=\"vendor-js/react-dom.js\"></script>\n  <script src=\"vendor-js/babel-core/browser.min.js\"></script>\n</head>\n<body>\n  <div id=\"example\"></div>\n  <script type=\"text/babel\">\n    ReactDOM.render(\n      <h1>Hello, world!</h1>,\n      document.getElementById('example')\n    );\n  </script>\n</body>\n</html>\n```\n\n在上述JSX语法中要注意的地方：\n\n+ `<script>` 标签的 type 属性为 `text/babel`，这是React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是在页面中直接使用 JSX 的地方，都要加上 `type=\"text/babel\"`。\n+ 一共用了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能， browser.min.js的作用是将 JSX 语法转为 JavaScript 语法。\n+ ReactDOM.render 是 React 的最基本方法，将模板转为HTML语言，并插入指定的 DOM 节点。\n+ 将 JSX 语法转为 JavaScript 语法，这一步很消耗时间。现在前端项目，都会使用前端工程化，不会直接在html页面中直接写js代码，写好的js代码都会使用工具进行编译压缩等。这样的话，JSX也会通过编译直接转化成js语法，让浏览器直接使用。\n\n## JSX的特点\n\n+ 类XML语法容易接受，结构清晰\n+ 增强JS语义\n+ 抽象程度高，屏蔽DOM操作，跨平台\n+ 代码模块化\n\n## JSX基本语法规则\n\nJSX本身就和XML语法类似，可以定义属性以及子元素。唯一特殊的是可以用大括号来加入JavaScript表达式，即：\n\n**遇到 HTML 标签（以 < 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。**\n\n```JSX\nvar arr = [\n <h1>Hello world!</h1>,\n <h2>React is awesome</h2>,\n];\nReactDOM.render(\n <div>{arr}</div>,\n document.getElementById('example')\n);\n```\n\n## JavaScript表达式\n\n### 基础语法\n\n用一对大括号 { } 包起来的JavaScript表达式可以作为标签的子结点（children），也可以是属性值\n\n```JSX\n// 以下语句等价\n<MyComponent>foo</MyComponent>\n<MyComponent>{'foo'}</MyComponent>\n\n// JavaScript 表达式作为属性值\nReact.render(\n    <div className={2 > 1 ? 'class-a' : 'class-b'}>content</div>,\n    document.body\n);\n```\n\n### 条件判断的写法\n\n因为 JSX 只是函数调用和对象创建的语法糖，在 { } 中不能 if-else 语句，不过可以采用三元操作表达式\n\n```JSX\nvar HelloMessage = React.createClass({ \n  render: function() { \n    return <div>Hello {this.props.name ？ this.props.name : \"World\"}</div>; \n  }\n});\nReactDOM.render(<HelloMessage name=\"xiaowang\" />, document.body);\n```\n\n可以使用比较运算符“ && ” 和 “ || ”来替代“ if ”\n\n  + “&&” ：如果左边的值为真，才返回右边的表达式，不过要注意&&之前的需要是一个boolean值\n\n  ```JSX\n  <div>\n    {showHeader && <Header />}\n    <Content />\n  </div>\n  ```\n\n  + “||” ：如果左边的值为真，则直接返回左边的值，否则返回右边的值\n\n  ```JSX\n  var HelloMessage = React.createClass({ \n    render: function() { \n      return <div>Hello {this.props.name || \"World\"}</div>; \n    }\n  });\n  ```\n\n## Children in JSX\n\n在JSX表达式中包括开标签和闭标签，这俩个标签之间的内容被定义为一个特殊的prop，即props.children\n\n### String Literals as Children\n\n开标签和闭标签的内容或者props.children的值可以是一个string，这与HTML的语法相同\n\n```JSX\n<MyComponent>Hello world!</MyComponent>\n<div>This is valid HTML &amp; JSX at the same time.</div>\n```\n\n### JSX elements as the Children\n\nChildren也可以是一个JSX element，以下是一个“纯组件”的例子\n\n```JSX\n<MyContainer>\n  <MyFirstComponent />\n  <MySecondComponent />\n</MyContainer>\n```\n\n### JavaScript Expressions as Children\n\nchildren也可以是JavaScript表达式，需要用{}包起来，以下是渲染一个任意行数的HTML list的例子\n\n```JSX\nfunction Item(props) {\n  return <li>{props.message}</li>;\n}\n\nfunction TodoList() {\n  const todos = ['finish doc', 'submit pr', 'nag dan to review'];\n  return (\n    <ul>\n      {todos.map((message) => <Item key={message} message={message} />)}\n    </ul>\n  );\n}\n```\n\n### Functions as Children\n\n一般情况下，在JSX中的插入的JavaScript表达式会最终表现为string、React element或者这些内容形成的list。但是props.children实际上可以传递任何数据，不需要一定是React可以render的内容。例如，可以自定义一个组件，其children是一个函数，最终函数的callback作为props.children\n\n```JSX\n// Calls the children callback numTimes to produce a repeated component\nfunction Repeat(props) {\n  let items = [];\n  for (let i = 0; i < props.numTimes; i++) {\n    items.push(props.children(i));\n  }\n  return <div>{items}</div>;\n}\n\nfunction ListOfTenThings() {\n  return (\n    <Repeat numTimes={10}>\n      {(index) => <div key={index}>This is item {index} in the list</div>}\n    </Repeat>\n  );\n}\n```\n所以说Children传给组件的可以是任意内容，只要组件能够在render前，将children转化为React能够理解的内容即可。\n\n## 注释\n\nrender函数内的注释需要写在花括号中，实例如下：\n\n```JSX\nReactDOM.render(\n    <div>\n    <h1>菜鸟教程</h1>\n    {/*注释...*/}\n     </div>,\n    document.getElementById('example')\n);\n```\n\n## JSX 陷阱\n\n+ style属性\n{% raw %}\n  在React中写行内样式时，要使用`style={{}}`的方式，属性值不能是字符串而必须为对象，需要注意的是属性名同样需要驼峰命名法。即`margin-top`要写成`marginTop`。\n{% endraw %}\n  > 骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName 等，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。\n\n  ```JSX\n  React.render(\n      <div style={{color:'red'}}>\n          xxxxx\n      </div>,\n      document.body\n  );\n  ```\n\n+ HTML转义\n\n  React默认会进行HTML的转义，避免XSS攻击\n\n  ```JSX\n  var content='<strong>content</strong>';\n  React.render(\n      <div>{content}</div>,\n      document.body\n  );\n  //结果页面直接输出内容了\"<strong>content</strong>\"\n  ```\n\n+ 自定义HTML属性\n\n  如果往原生 HTML 元素里传入 HTML 规范里不存在的属性，React 不会显示它们。如果需要使用自定义属性，要加 `data-` 前缀。 \n\n  ```JSX\n  <div data-custom-attribute=\"foo\" />\n  ```\n\n+ 组件类只能包含一个顶层标签\n\n  ```JSX\n  //var myDivElement =<h1>你好</h1><h1>hello</h1>;\n  //上述写法是会报错的，要写成只有一个顶层标签：\n  var myDivElement =<div><h1>你好</h1><h1>hello</h1></div>;\n  ```\n+ Boolean 属性\n\n  省略一个属性的值会导致JSX把它当做 true。要传值 false必须使用属性表达式。这常出现于使用HTML表单元素，含有属性如disabled, required, checked 和 readOnly。\n\n  ```JSX\n  // 在JSX中，对于禁用按钮这二者是相同的。\n  <input type=\"button\" disabled />;\n  <input type=\"button\" disabled={true} />;\n\n  // 在JSX中，对于不禁用按钮这二者是相同的。\n  <input type=\"button\" />;\n  <input type=\"button\" disabled={false} />;\n  ```\n\n## React组件\n\n### 基础用法\n\n使用JSX来将代码封装成React组件，然后像插入普通 HTML 标签一样，在其他地方插入这个组件。使用React.createClass用于生成一个组件。\n\n```JSX\nvar MyComponent=React.createClass({\n  render: function() {\n   return <h1>Hello world!</h1>;\n }\n});\nReactDOM.render(\n <MyComponent />,\n document.getElementById('example')\n);\n```\n\n上面代码中，变量 MyComponent就是一个组件类。模板插入 <MyComponent /> 时，会自动生成 MyComponent 的一个实例（下文的\"组件\"都指组件类的实例）。\n\n** 所有组件类都必须有自己的 render 方法，用于输出组件。 **\n\n### HTML 标签 vs. React 组件\n\nReact 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。\n\n  + 渲染HTML标签，声明变量采用首字母小写\n\n  ```JSX\n  //要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。\n  var myDivElement = <div className=\"foo\" />;\n  React.render(myDivElement, document.getElementById('example'));\n  ```\n\n  + 渲染React组件，声明变量采用首字母大写\n\n  ```JSX\n  //要渲染 React 组件，只需创建一个大写字母开头的本地变量。\n  var MyComponent = React.createClass({/*...*/});\n  var myElement = <MyComponent  />;\n  React.render(myElement, document.getElementById('example'));\n  ```\n\n### 动态组件\n\n```JSX\nvar MyComponent=React.createClass({\n  getInitialState: function() {\n       return {clickNum: 0};\n  },\n  handleClick:function(){\n    var num=this.state.clickNum;\n    num++;\n    this.setState({clickNum:num});\n  },\n  render: function() {\n   return (\n      <div>\n        <h1 onClick={this.handleClick}>Hello {this.props.name}!</h1>\n        <h2 style={{color:'red'}}>点击{this.props.name}次数：{this.state.clickNum}</h2>\n      </div>\n    );\n }\n});\nReactDOM.render(\n  <div>\n     <MyComponent name=\"张三\" />\n     <hr/>\n     <MyComponent name=\"李四\" />\n  </div>,\n document.getElementById('example')\n);\n```\n\n上面代码中定义的MyComponent组件包含属性，状态和事件，是一个简单的比较完整的组件。\n\n+ 使用props通过父组件进行传递值\n+ 使用state定义组件自己的状态\n+ 组件支持的大部分的DOM操作事件\n\n### 属性props的注意要点\n\n+ class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。\n+this.props.children 不要children作为把对象的属性名。因为this.props.children获取的该标签下的所有子标签。this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 this.props.children 的时候要小心。官方建议使用React.Children.map来遍历子节点，而不用担心数据类型。\n\n### 状态state的注意要点\n\n+ 组件免不了要与用户互动，React 将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。\n+ getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。\n\n由于 this.props 和 this.state 的简单的区分方法：\n\n**this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。**","slug":"JSX-Syntax","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkp3000777hxm36o552n","content":"<h1 id=\"JSX-语法\"><a href=\"#JSX-语法\" class=\"headerlink\" title=\"JSX 语法\"></a>JSX 语法</h1><p>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。</p>\n<a id=\"more\"></a>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p>首先是官网的例子helloworld，其中<code>&lt;h1&gt;Hello, world!&lt;/h1&gt;</code>就是使用到了JSX语法。HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"vendor-js/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"vendor-js/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"vendor-js/babel-core/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>,</div><div class=\"line\">      document.getElementById('example')</div><div class=\"line\">    );</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在上述JSX语法中要注意的地方：</p>\n<ul>\n<li><code>&lt;script&gt;</code> 标签的 type 属性为 <code>text/babel</code>，这是React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是在页面中直接使用 JSX 的地方，都要加上 <code>type=&quot;text/babel&quot;</code>。</li>\n<li>一共用了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能， browser.min.js的作用是将 JSX 语法转为 JavaScript 语法。</li>\n<li>ReactDOM.render 是 React 的最基本方法，将模板转为HTML语言，并插入指定的 DOM 节点。</li>\n<li>将 JSX 语法转为 JavaScript 语法，这一步很消耗时间。现在前端项目，都会使用前端工程化，不会直接在html页面中直接写js代码，写好的js代码都会使用工具进行编译压缩等。这样的话，JSX也会通过编译直接转化成js语法，让浏览器直接使用。</li>\n</ul>\n<h2 id=\"JSX的特点\"><a href=\"#JSX的特点\" class=\"headerlink\" title=\"JSX的特点\"></a>JSX的特点</h2><ul>\n<li>类XML语法容易接受，结构清晰</li>\n<li>增强JS语义</li>\n<li>抽象程度高，屏蔽DOM操作，跨平台</li>\n<li>代码模块化</li>\n</ul>\n<h2 id=\"JSX基本语法规则\"><a href=\"#JSX基本语法规则\" class=\"headerlink\" title=\"JSX基本语法规则\"></a>JSX基本语法规则</h2><p>JSX本身就和XML语法类似，可以定义属性以及子元素。唯一特殊的是可以用大括号来加入JavaScript表达式，即：</p>\n<p><strong>遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [</div><div class=\"line\"> &lt;h1&gt;Hello world!&lt;/h1&gt;,</div><div class=\"line\"> &lt;h2&gt;React is awesome&lt;/h2&gt;,</div><div class=\"line\">];</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"> &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</div><div class=\"line\"> document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"JavaScript表达式\"><a href=\"#JavaScript表达式\" class=\"headerlink\" title=\"JavaScript表达式\"></a>JavaScript表达式</h2><h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><p>用一对大括号 { } 包起来的JavaScript表达式可以作为标签的子结点（children），也可以是属性值</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 以下语句等价</div><div class=\"line\">&lt;MyComponent&gt;foo&lt;/MyComponent&gt;</div><div class=\"line\">&lt;MyComponent&gt;&#123;'foo'&#125;&lt;/MyComponent&gt;</div><div class=\"line\"></div><div class=\"line\">// JavaScript 表达式作为属性值</div><div class=\"line\">React.render(</div><div class=\"line\">    &lt;div className=&#123;2 &gt; 1 ? 'class-a' : 'class-b'&#125;&gt;content&lt;/div&gt;,</div><div class=\"line\">    document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"条件判断的写法\"><a href=\"#条件判断的写法\" class=\"headerlink\" title=\"条件判断的写法\"></a>条件判断的写法</h3><p>因为 JSX 只是函数调用和对象创建的语法糖，在 { } 中不能 if-else 语句，不过可以采用三元操作表达式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123; </div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name ？ this.props.name : \"World\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloMessage</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xiaowang\"</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure>\n<p>可以使用比较运算符“ &amp;&amp; ” 和 “ || ”来替代“ if ”</p>\n<ul>\n<li><p>“&amp;&amp;” ：如果左边的值为真，才返回右边的表达式，不过要注意&amp;&amp;之前的需要是一个boolean值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  &#123;showHeader &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span>&#125;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Content</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>“||” ：如果左边的值为真，则直接返回左边的值，否则返回右边的值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123; </div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name || \"World\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Children-in-JSX\"><a href=\"#Children-in-JSX\" class=\"headerlink\" title=\"Children in JSX\"></a>Children in JSX</h2><p>在JSX表达式中包括开标签和闭标签，这俩个标签之间的内容被定义为一个特殊的prop，即props.children</p>\n<h3 id=\"String-Literals-as-Children\"><a href=\"#String-Literals-as-Children\" class=\"headerlink\" title=\"String Literals as Children\"></a>String Literals as Children</h3><p>开标签和闭标签的内容或者props.children的值可以是一个string，这与HTML的语法相同</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;MyComponent&gt;Hello world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span></div><div class=\"line\">&lt;div&gt;This is valid HTML &amp;amp; JSX at the same time.&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"JSX-elements-as-the-Children\"><a href=\"#JSX-elements-as-the-Children\" class=\"headerlink\" title=\"JSX elements as the Children\"></a>JSX elements as the Children</h3><p>Children也可以是一个JSX element，以下是一个“纯组件”的例子</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;MyContainer&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyFirstComponent</span> /&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">MySecondComponent</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyContainer</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"JavaScript-Expressions-as-Children\"><a href=\"#JavaScript-Expressions-as-Children\" class=\"headerlink\" title=\"JavaScript Expressions as Children\"></a>JavaScript Expressions as Children</h3><p>children也可以是JavaScript表达式，需要用{}包起来，以下是渲染一个任意行数的HTML list的例子</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Item</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;props.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TodoList</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> todos = [<span class=\"string\">'finish doc'</span>, <span class=\"string\">'submit pr'</span>, <span class=\"string\">'nag dan to review'</span>];</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">      &#123;todos.map((message) =&gt; <span class=\"tag\">&lt;<span class=\"name\">Item</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;message&#125;</span> <span class=\"attr\">message</span>=<span class=\"string\">&#123;message&#125;</span> /&gt;</span>)&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Functions-as-Children\"><a href=\"#Functions-as-Children\" class=\"headerlink\" title=\"Functions as Children\"></a>Functions as Children</h3><p>一般情况下，在JSX中的插入的JavaScript表达式会最终表现为string、React element或者这些内容形成的list。但是props.children实际上可以传递任何数据，不需要一定是React可以render的内容。例如，可以自定义一个组件，其children是一个函数，最终函数的callback作为props.children</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Calls the children callback numTimes to produce a repeated component</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Repeat</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> items = [];</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; props.numTimes; i++) &#123;</div><div class=\"line\">    items.push(props.children(i));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;items&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListOfTenThings</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Repeat</span> <span class=\"attr\">numTimes</span>=<span class=\"string\">&#123;10&#125;</span>&gt;</span></span></div><div class=\"line\">      &#123;(index) =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>This is item &#123;index&#125; in the list<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Repeat</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以说Children传给组件的可以是任意内容，只要组件能够在render前，将children转化为React能够理解的内容即可。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>render函数内的注释需要写在花括号中，实例如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    &#123;/*注释...*/&#125;</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"JSX-陷阱\"><a href=\"#JSX-陷阱\" class=\"headerlink\" title=\"JSX 陷阱\"></a>JSX 陷阱</h2><ul>\n<li><p>style属性</p>\n\n  在React中写行内样式时，要使用`style={{}}`的方式，属性值不能是字符串而必须为对象，需要注意的是属性名同样需要驼峰命名法。即`margin-top`要写成`marginTop`。\n\n<blockquote>\n<p>骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName 等，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span></span></div><div class=\"line\">        xxxxx</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n</li>\n<li><p>HTML转义</p>\n<p>React默认会进行HTML的转义，避免XSS攻击</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content=<span class=\"string\">'&lt;strong&gt;content&lt;/strong&gt;'</span>;</div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.body</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">//结果页面直接输出内容了\"&lt;strong&gt;content&lt;/strong&gt;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义HTML属性</p>\n<p>如果往原生 HTML 元素里传入 HTML 规范里不存在的属性，React 不会显示它们。如果需要使用自定义属性，要加 <code>data-</code> 前缀。 </p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div data-custom-attribute=<span class=\"string\">\"foo\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>组件类只能包含一个顶层标签</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//var myDivElement =&lt;h1&gt;你好&lt;/h1&gt;&lt;h1&gt;hello&lt;/h1&gt;;</span></div><div class=\"line\"><span class=\"comment\">//上述写法是会报错的，要写成只有一个顶层标签：</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDivElement =<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Boolean 属性</p>\n<p>省略一个属性的值会导致JSX把它当做 true。要传值 false必须使用属性表达式。这常出现于使用HTML表单元素，含有属性如disabled, required, checked 和 readOnly。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在JSX中，对于禁用按钮这二者是相同的。</span></div><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> disabled /&gt;;</div><div class=\"line\">&lt;input type=\"button\" disabled=&#123;true&#125; /&gt;;</div><div class=\"line\"></div><div class=\"line\">// 在JSX中，对于不禁用按钮这二者是相同的。</div><div class=\"line\">&lt;input type=\"button\" /&gt;;</div><div class=\"line\">&lt;input type=\"button\" disabled=&#123;false&#125; /&gt;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"React组件\"><a href=\"#React组件\" class=\"headerlink\" title=\"React组件\"></a>React组件</h2><h3 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h3><p>使用JSX来将代码封装成React组件，然后像插入普通 HTML 标签一样，在其他地方插入这个组件。使用React.createClass用于生成一个组件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent=React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span>,</span></div><div class=\"line\"> document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>上面代码中，变量 MyComponent就是一个组件类。模板插入 <mycomponent> 时，会自动生成 MyComponent 的一个实例（下文的”组件”都指组件类的实例）。</mycomponent></p>\n<p><strong> 所有组件类都必须有自己的 render 方法，用于输出组件。 </strong></p>\n<h3 id=\"HTML-标签-vs-React-组件\"><a href=\"#HTML-标签-vs-React-组件\" class=\"headerlink\" title=\"HTML 标签 vs. React 组件\"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。</p>\n<ul>\n<li><p>渲染HTML标签，声明变量采用首字母小写</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDivElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"foo\"</span> /&gt;</span>;</span></div><div class=\"line\">React.render(myDivElement, document.getElementById('example'));</div></pre></td></tr></table></figure>\n</li>\n<li><p>渲染React组件，声明变量采用首字母大写</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要渲染 React 组件，只需创建一个大写字母开头的本地变量。</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass(&#123;<span class=\"comment\">/*...*/</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> myElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>  /&gt;</span>;</span></div><div class=\"line\">React.render(myElement, document.getElementById('example'));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent=React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clickNum</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">handleClick</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"keyword\">this</span>.state.clickNum;</div><div class=\"line\">    num++;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clickNum</span>:num&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Hello &#123;this.props.name&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span>点击&#123;this.props.name&#125;次数：&#123;this.state.clickNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">     &lt;MyComponent name=\"张三\" /&gt;</div><div class=\"line\">     &lt;hr/&gt;</div><div class=\"line\">     &lt;MyComponent name=\"李四\" /&gt;</div><div class=\"line\">  &lt;/div&gt;,</div><div class=\"line\"> document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>上面代码中定义的MyComponent组件包含属性，状态和事件，是一个简单的比较完整的组件。</p>\n<ul>\n<li>使用props通过父组件进行传递值</li>\n<li>使用state定义组件自己的状态</li>\n<li>组件支持的大部分的DOM操作事件</li>\n</ul>\n<h3 id=\"属性props的注意要点\"><a href=\"#属性props的注意要点\" class=\"headerlink\" title=\"属性props的注意要点\"></a>属性props的注意要点</h3><ul>\n<li>class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。<br>+this.props.children 不要children作为把对象的属性名。因为this.props.children获取的该标签下的所有子标签。this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 this.props.children 的时候要小心。官方建议使用React.Children.map来遍历子节点，而不用担心数据类型。</li>\n</ul>\n<h3 id=\"状态state的注意要点\"><a href=\"#状态state的注意要点\" class=\"headerlink\" title=\"状态state的注意要点\"></a>状态state的注意要点</h3><ul>\n<li>组件免不了要与用户互动，React 将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。</li>\n<li>getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。</li>\n</ul>\n<p>由于 this.props 和 this.state 的简单的区分方法：</p>\n<p><strong>this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。</strong></p>\n","excerpt":"<h1 id=\"JSX-语法\"><a href=\"#JSX-语法\" class=\"headerlink\" title=\"JSX 语法\"></a>JSX 语法</h1><p>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。</p>","more":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p>首先是官网的例子helloworld，其中<code>&lt;h1&gt;Hello, world!&lt;/h1&gt;</code>就是使用到了JSX语法。HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"vendor-js/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"vendor-js/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"vendor-js/babel-core/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>,</div><div class=\"line\">      document.getElementById('example')</div><div class=\"line\">    );</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在上述JSX语法中要注意的地方：</p>\n<ul>\n<li><code>&lt;script&gt;</code> 标签的 type 属性为 <code>text/babel</code>，这是React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是在页面中直接使用 JSX 的地方，都要加上 <code>type=&quot;text/babel&quot;</code>。</li>\n<li>一共用了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能， browser.min.js的作用是将 JSX 语法转为 JavaScript 语法。</li>\n<li>ReactDOM.render 是 React 的最基本方法，将模板转为HTML语言，并插入指定的 DOM 节点。</li>\n<li>将 JSX 语法转为 JavaScript 语法，这一步很消耗时间。现在前端项目，都会使用前端工程化，不会直接在html页面中直接写js代码，写好的js代码都会使用工具进行编译压缩等。这样的话，JSX也会通过编译直接转化成js语法，让浏览器直接使用。</li>\n</ul>\n<h2 id=\"JSX的特点\"><a href=\"#JSX的特点\" class=\"headerlink\" title=\"JSX的特点\"></a>JSX的特点</h2><ul>\n<li>类XML语法容易接受，结构清晰</li>\n<li>增强JS语义</li>\n<li>抽象程度高，屏蔽DOM操作，跨平台</li>\n<li>代码模块化</li>\n</ul>\n<h2 id=\"JSX基本语法规则\"><a href=\"#JSX基本语法规则\" class=\"headerlink\" title=\"JSX基本语法规则\"></a>JSX基本语法规则</h2><p>JSX本身就和XML语法类似，可以定义属性以及子元素。唯一特殊的是可以用大括号来加入JavaScript表达式，即：</p>\n<p><strong>遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [</div><div class=\"line\"> &lt;h1&gt;Hello world!&lt;/h1&gt;,</div><div class=\"line\"> &lt;h2&gt;React is awesome&lt;/h2&gt;,</div><div class=\"line\">];</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"> &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</div><div class=\"line\"> document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"JavaScript表达式\"><a href=\"#JavaScript表达式\" class=\"headerlink\" title=\"JavaScript表达式\"></a>JavaScript表达式</h2><h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><p>用一对大括号 { } 包起来的JavaScript表达式可以作为标签的子结点（children），也可以是属性值</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 以下语句等价</div><div class=\"line\">&lt;MyComponent&gt;foo&lt;/MyComponent&gt;</div><div class=\"line\">&lt;MyComponent&gt;&#123;'foo'&#125;&lt;/MyComponent&gt;</div><div class=\"line\"></div><div class=\"line\">// JavaScript 表达式作为属性值</div><div class=\"line\">React.render(</div><div class=\"line\">    &lt;div className=&#123;2 &gt; 1 ? 'class-a' : 'class-b'&#125;&gt;content&lt;/div&gt;,</div><div class=\"line\">    document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"条件判断的写法\"><a href=\"#条件判断的写法\" class=\"headerlink\" title=\"条件判断的写法\"></a>条件判断的写法</h3><p>因为 JSX 只是函数调用和对象创建的语法糖，在 { } 中不能 if-else 语句，不过可以采用三元操作表达式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123; </div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name ？ this.props.name : \"World\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloMessage</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xiaowang\"</span> /&gt;</span>, document.body);</span></div></pre></td></tr></table></figure>\n<p>可以使用比较运算符“ &amp;&amp; ” 和 “ || ”来替代“ if ”</p>\n<ul>\n<li><p>“&amp;&amp;” ：如果左边的值为真，才返回右边的表达式，不过要注意&amp;&amp;之前的需要是一个boolean值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  &#123;showHeader &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span>&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Content</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>“||” ：如果左边的值为真，则直接返回左边的值，否则返回右边的值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloMessage = React.createClass(&#123; </div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;this.props.name || \"World\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>; </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Children-in-JSX\"><a href=\"#Children-in-JSX\" class=\"headerlink\" title=\"Children in JSX\"></a>Children in JSX</h2><p>在JSX表达式中包括开标签和闭标签，这俩个标签之间的内容被定义为一个特殊的prop，即props.children</p>\n<h3 id=\"String-Literals-as-Children\"><a href=\"#String-Literals-as-Children\" class=\"headerlink\" title=\"String Literals as Children\"></a>String Literals as Children</h3><p>开标签和闭标签的内容或者props.children的值可以是一个string，这与HTML的语法相同</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;MyComponent&gt;Hello world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span></div><div class=\"line\">&lt;div&gt;This is valid HTML &amp;amp; JSX at the same time.&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"JSX-elements-as-the-Children\"><a href=\"#JSX-elements-as-the-Children\" class=\"headerlink\" title=\"JSX elements as the Children\"></a>JSX elements as the Children</h3><p>Children也可以是一个JSX element，以下是一个“纯组件”的例子</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;MyContainer&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyFirstComponent</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">MySecondComponent</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyContainer</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"JavaScript-Expressions-as-Children\"><a href=\"#JavaScript-Expressions-as-Children\" class=\"headerlink\" title=\"JavaScript Expressions as Children\"></a>JavaScript Expressions as Children</h3><p>children也可以是JavaScript表达式，需要用{}包起来，以下是渲染一个任意行数的HTML list的例子</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Item</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;props.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TodoList</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> todos = [<span class=\"string\">'finish doc'</span>, <span class=\"string\">'submit pr'</span>, <span class=\"string\">'nag dan to review'</span>];</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      &#123;todos.map((message) =&gt; <span class=\"tag\">&lt;<span class=\"name\">Item</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;message&#125;</span> <span class=\"attr\">message</span>=<span class=\"string\">&#123;message&#125;</span> /&gt;</span>)&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Functions-as-Children\"><a href=\"#Functions-as-Children\" class=\"headerlink\" title=\"Functions as Children\"></a>Functions as Children</h3><p>一般情况下，在JSX中的插入的JavaScript表达式会最终表现为string、React element或者这些内容形成的list。但是props.children实际上可以传递任何数据，不需要一定是React可以render的内容。例如，可以自定义一个组件，其children是一个函数，最终函数的callback作为props.children</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Calls the children callback numTimes to produce a repeated component</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Repeat</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> items = [];</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; props.numTimes; i++) &#123;</div><div class=\"line\">    items.push(props.children(i));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;items&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListOfTenThings</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Repeat</span> <span class=\"attr\">numTimes</span>=<span class=\"string\">&#123;10&#125;</span>&gt;</span></div><div class=\"line\">      &#123;(index) =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>This is item &#123;index&#125; in the list<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Repeat</span>&gt;</span></span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以说Children传给组件的可以是任意内容，只要组件能够在render前，将children转化为React能够理解的内容即可。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>render函数内的注释需要写在花括号中，实例如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    &#123;/*注释...*/&#125;</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"JSX-陷阱\"><a href=\"#JSX-陷阱\" class=\"headerlink\" title=\"JSX 陷阱\"></a>JSX 陷阱</h2><ul>\n<li><p>style属性</p>\n\n  在React中写行内样式时，要使用`style={{}}`的方式，属性值不能是字符串而必须为对象，需要注意的是属性名同样需要驼峰命名法。即`margin-top`要写成`marginTop`。\n\n<blockquote>\n<p>骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName 等，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span></div><div class=\"line\">        xxxxx</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n</li>\n<li><p>HTML转义</p>\n<p>React默认会进行HTML的转义，避免XSS攻击</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content=<span class=\"string\">'&lt;strong&gt;content&lt;/strong&gt;'</span>;</div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.body</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">//结果页面直接输出内容了\"&lt;strong&gt;content&lt;/strong&gt;\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义HTML属性</p>\n<p>如果往原生 HTML 元素里传入 HTML 规范里不存在的属性，React 不会显示它们。如果需要使用自定义属性，要加 <code>data-</code> 前缀。 </p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div data-custom-attribute=<span class=\"string\">\"foo\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>组件类只能包含一个顶层标签</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//var myDivElement =&lt;h1&gt;你好&lt;/h1&gt;&lt;h1&gt;hello&lt;/h1&gt;;</span></div><div class=\"line\"><span class=\"comment\">//上述写法是会报错的，要写成只有一个顶层标签：</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDivElement =<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Boolean 属性</p>\n<p>省略一个属性的值会导致JSX把它当做 true。要传值 false必须使用属性表达式。这常出现于使用HTML表单元素，含有属性如disabled, required, checked 和 readOnly。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在JSX中，对于禁用按钮这二者是相同的。</span></div><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> disabled /&gt;;</div><div class=\"line\">&lt;input type=\"button\" disabled=&#123;true&#125; /&gt;;</div><div class=\"line\"></div><div class=\"line\">// 在JSX中，对于不禁用按钮这二者是相同的。</div><div class=\"line\">&lt;input type=\"button\" /&gt;;</div><div class=\"line\">&lt;input type=\"button\" disabled=&#123;false&#125; /&gt;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"React组件\"><a href=\"#React组件\" class=\"headerlink\" title=\"React组件\"></a>React组件</h2><h3 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h3><p>使用JSX来将代码封装成React组件，然后像插入普通 HTML 标签一样，在其他地方插入这个组件。使用React.createClass用于生成一个组件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent=React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span>,</div><div class=\"line\"> document.getElementById('example')</div><div class=\"line\">);</span></div></pre></td></tr></table></figure>\n<p>上面代码中，变量 MyComponent就是一个组件类。模板插入 <MyComponent /> 时，会自动生成 MyComponent 的一个实例（下文的”组件”都指组件类的实例）。</p>\n<p><strong> 所有组件类都必须有自己的 render 方法，用于输出组件。 </strong></p>\n<h3 id=\"HTML-标签-vs-React-组件\"><a href=\"#HTML-标签-vs-React-组件\" class=\"headerlink\" title=\"HTML 标签 vs. React 组件\"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。</p>\n<ul>\n<li><p>渲染HTML标签，声明变量采用首字母小写</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDivElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"foo\"</span> /&gt;</span>;</div><div class=\"line\">React.render(myDivElement, document.getElementById('example'));</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>渲染React组件，声明变量采用首字母大写</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要渲染 React 组件，只需创建一个大写字母开头的本地变量。</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass(&#123;<span class=\"comment\">/*...*/</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> myElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>  /&gt;</span>;</div><div class=\"line\">React.render(myElement, document.getElementById('example'));</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent=React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clickNum</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">handleClick</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num=<span class=\"keyword\">this</span>.state.clickNum;</div><div class=\"line\">    num++;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clickNum</span>:num&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Hello &#123;this.props.name&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span>点击&#123;this.props.name&#125;次数：&#123;this.state.clickNum&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">     &lt;MyComponent name=\"张三\" /&gt;</div><div class=\"line\">     &lt;hr/&gt;</div><div class=\"line\">     &lt;MyComponent name=\"李四\" /&gt;</div><div class=\"line\">  &lt;/div&gt;,</div><div class=\"line\"> document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>上面代码中定义的MyComponent组件包含属性，状态和事件，是一个简单的比较完整的组件。</p>\n<ul>\n<li>使用props通过父组件进行传递值</li>\n<li>使用state定义组件自己的状态</li>\n<li>组件支持的大部分的DOM操作事件</li>\n</ul>\n<h3 id=\"属性props的注意要点\"><a href=\"#属性props的注意要点\" class=\"headerlink\" title=\"属性props的注意要点\"></a>属性props的注意要点</h3><ul>\n<li>class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。<br>+this.props.children 不要children作为把对象的属性名。因为this.props.children获取的该标签下的所有子标签。this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 this.props.children 的时候要小心。官方建议使用React.Children.map来遍历子节点，而不用担心数据类型。</li>\n</ul>\n<h3 id=\"状态state的注意要点\"><a href=\"#状态state的注意要点\" class=\"headerlink\" title=\"状态state的注意要点\"></a>状态state的注意要点</h3><ul>\n<li>组件免不了要与用户互动，React 将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。</li>\n<li>getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。</li>\n</ul>\n<p>由于 this.props 和 this.state 的简单的区分方法：</p>\n<p><strong>this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。</strong></p>"},{"title":"Javascript-note","date":"2017-02-22T13:57:57.000Z","_content":"\n# 学习javascript的笔记\n\n主要学习了\n\n[JavaScript教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)\n\n<!-- more -->\n\n## 字符串\n\n多行字符串\n\n`这是一个\n多行\n字符串`;\n\n`toUpperCase()`,`toLowerCase()` 把一个字符串全部变为大写或小写\n\n```javascript\nvar s = 'Hello';\ns.toUpperCase(); // 返回'HELLO'\ns.toLowerCase(); // 返回'hello'\n```\n\n`indexOf()`搜索指定字符串出现的位置\n\n```javascript\nvar s = 'hello, world';\ns.indexOf('world'); // 返回7\ns.indexOf('World'); // 没有找到指定的子串，返回-1\n```\n\n`substring()`返回指定索引区间的子串\n\n```javascript\nvar s = 'hello, world'\ns.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'\ns.substring(7); // 从索引7开始到结束，返回'world'\n```\n\n## 数组\n\n通过`Array.length`获取数组长度，给length赋一个新的值或索引赋值时索引超过了范围，会导致Array大小的变化\n\n```javascript\nvar arr = [1, 2, 3.14];\narr.length; // 3\narr.length = 4;\narr; // arr变为[1, 2, 3.14, undefined]\narr[5] = 'x';\narr; // arr变为[1, 2, 3, undefined, undefined, 'x']\n```\n\n通过`indexOf()`来搜索Array中一个指定的元素的位置\n\n```javascript\nvar arr = [10, 20, '30', 'xyz'];\narr.indexOf(10); // 元素10的索引为0\narr.indexOf(30); // 元素30没有找到，返回-1\n```\n\n通过`slice()`截取Array的部分元素，然后返回一个新的Array\n\n```javascript\nvar arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\narr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']\narr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']\n```\n`push()`向Array的末尾添加若干元素，`pop()`则把Array的最后一个元素删除掉,`unshift()`往Array的头部添加若干元素，`shift()`则把Array的第一个元素删掉\n\n```javascript\nvar arr = [1, 2];\narr.push('A', 'B'); // 返回Array新的长度: 4\narr; // [1, 2, 'A', 'B']\narr.pop(); // pop()返回'B'\narr; // [1, 2, 'A']\narr.unshift('A', 'B'); // 返回Array新的长度: 5\narr; // ['A', 'B', 1, 2, 'A']\narr.shift(); // 'A'\narr; // ['B', 1, 2, 'A']\narr = [];\narr.pop(); // 空数组继续pop不会报错，而是返回undefined\narr.shift(); // 空数组继续shift不会报错，而是返回undefined\n```\n\n`sort()`, `reverse()`可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认把所有元素先转换为String，再根据ASCII码进行排序\n\n```javascript\nvar arr = ['B', 'C', 'A', 'b'];\narr.sort();\narr; // ['A', 'B', 'C', 'b']\narr.reverse(); \narr; //['b', C', 'B', 'A']\n```\n\n`splice()`方法可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：\n\n```javascript\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\n// 从索引2开始删除3个元素,然后再添加两个元素:\narr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n// 只删除,不添加:\narr.splice(2, 2); // ['Google', 'Facebook']\narr; // ['Microsoft', 'Apple', 'Oracle']\n// 只添加,不删除:\narr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n```\n\n`concat()`方法把当前的Array和另一个Array连接起来，并返回一个新的Array：\n\n```javascript\nvar arr = ['A', 'B', 'C'];\narr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]\narr; // ['A', 'B', 'C']\n```\n\n`join()`方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：\n\n```javascript\nvar arr = ['A', 'B', 'C', 1, 2, 3];\narr.join('-'); // 'A-B-C-1-2-3'\narr.join(''); // 'ABC123'\n```\n\n如果数组的某个元素又是一个Array，则可以形成多维数组\n\n```javascript\nvar arr = [[1, 2, 3], [400, 500, 600], '-'];\narr[1][1]; //500\n```\n\n## 对象\n\nJavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。访问属性是通过`.`操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来\n\n```javascript\nvar xiaoming = {\n\tname: '小明',\n\tbirth: 1990,\n\tschool: 'No.1 Middle School',\n\theight: 1.70,\n\tweight: 65,\n\tscore: null\n};\nxiaohong['middle-school']; // 'No.1 Middle School'\nxiaohong['name']; // '小红'\nxiaohong.name; // '小红'\nxiaoming.age; // undefined\n```\n要检测xiaoming是否拥有某一属性，可以用`in`操作符。因为`toString`定义在object对象中，所以xiaoming继承了`toString`属性；可以用`hasOwnProperty()`方法判断一个属性是否是xiaoming自身拥有的，而不是继承得到的。\n\n```javascript\nvar xiaoming = {\n\tname: '小明'\n};\n'toString' in xiaoming; // true\nxiaoming.hasOwnProperty('name'); // true\nxiaoming.hasOwnProperty('toString'); // false\n```\n\n## 条件判断\n\n使用`if () { ... } else { ... }`来进行条件判断，`else if`通常连写在一起，以增加可读性。\n\n```javascript\nvar age = 3;\nif (age >= 18) {\n\tconsole.log('adult');\n} else if (age >= 6) {\n\tconsole.log('teenager');\n} else {\n\tconsole.log('kid');\n}\n```\n\n## 循环\n\nfor循环最常用的地方是利用索引来遍历数组\n\n```javascript\nvar arr = ['Apple', 'Google', 'Microsoft'];\nvar i, x;\nfor (i=0; i<arr.length; i++) {\n\tx = arr[i];\n\tconsole.log(x);\n}\n```\n\nfor循环的3个条件都是可以省略的，但必须使用`break`语句退出循环，否则就是死循环\n\n```javascript\nvar x = 0;\nfor (;;) { // 将无限循环下去\n\tif (x > 100) {\n        break; // 通过if判断来退出循环\n    }\n    x ++;\n}\n```\n\n`for ... in`循环可以把一个对象的所有属性依次循环出来\n\n```javascript\nvar o = {\n\tname: 'Jack',\n\tage: 20,\n\tcity: 'Beijing'\n};\nfor (var key in o) {\t\n    console.log(key); // 'name', 'age', 'city'\n}\n```\n\n`for ... in`循环可以直接循环出Array的索引，但得到索引的是String而不是Number\n\n```javascript\nvar a = ['A', 'B', 'C', 1, 2, 3];\nfor (var i in a) {\n\tconsole.log(i)\n\tconsole.log(a[i]); \n}\n```\n\nwhile循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环\n\n\n```javascript\nvar x = 0;\nvar n = 99;\nwhile (n > 0) {\n\tx = x + n;\n\tn = n - 2;\n}\nx; // 2500\n```\n\n`do { ... } while()`循环，它和while循环的唯一区别在于前者是在每次循环完成的时候判断条件，所以至少会执行一次循环\n\n```javascript\nvar n = 0;\ndo {\n\tn = n + 1;\n} while (n < 100);\nn; // 100\n```\n\n## Map和Set\n\n`Map`是一组键值对的结构，具有极快的查找速度，`Map`具有以下方法：\n\n```javascript\nvar M = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n```\n`Set`是一组`key`的集合，不能重复，重复元素在`Set`中自动被过滤\n\n```javascript\nvar s = new Set([1, 2, 3, 3, '3']);\ns; // Set {1, 2, 3, \"3\"}\ns.add(4); // Set {1, 2, 3, \"3\", 4}\ns.delete(2); // Set {1, 3, \"3\", 4}\ns.size; //4\ns.has(3); // true\n```\n\n## iterable\n\n`for ... of`循环来遍历`Array`、`Map`和`Set`\n\n```javascript\nvar a = ['A', 'B', 'C'];\nvar s = new Set(['A', 'B', 'C']);\nvar m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);\nfor (var x of a) { // 遍历Array\n\tconsole.log(x);\n}\nfor (var x of s) { // 遍历Set\n\tconsole.log(x);\n}\nfor (var x of m) { // 遍历Map\n\tconsole.log(x[0] + '<=>' + x[1]);\n}\n```\n\n`iterable`内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数，以下是Array的例子\n\n```javascript\nvar a = ['A', 'B', 'C'];\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    console.log(\"element: \" + element + \"; index: \" + index + \"; array: \" + array);\n});\n```\n\n`Set`与`Array`类似，但`Set`没有索引，因此回调函数的前两个参数都是元素本身\n\n```javascript\nvar s = new Set(['A', 'B', 'C']);\ns.forEach(function (element, sameElement, set) {\n\tconsole.log(\"element: \" + element + \"; sameElement: \" + sameElement + \"; set: \" + set);\n});\n```\n\n`Map`的回调函数参数依次为`value`、`key`和`map`本身\n\n```javascript\nvar m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);\nm.forEach(function (value, key, map) {\n\tconsole.log(\"value: \" + value + \"; key: \" + key + \"; map: \" + map);\n});\n```\n\n## 函数定义和调用\n\n```javascript\n// 一般定义\nfunction abs(x) {\n\treturn x>0 ? x : -x;\n}\n// 匿名函数定义\nvar abs = function (x) {\n\treturn x>0 ? x : -x;\n};\n```\n\n利用`arguments`获取所有传入参数\n\n```javascript\nfunction abs() {\n\tif (arguments.length === 0) {\n\t\treturn 0;\n\t}\n\tif (typeof x !== 'number') {\n\t\tthrow 'Not a number';\n\t}\n\tvar x = arguments[0];\n\treturn x >= 0 ? x : -x;\n}\n```\n\n使用`rest`来获取任意个参数，需写在最后面，前面加`...`\n\n```javascript\nfunction foo(a, b, ...rest) {\n\tconsole.log('a = ' + a);\n\tconsole.log('b = ' + b);\n\tconsole.log(rest);\n}\n// sum()函数，接收任意个参数并返回它们的和\nfunction sum(x, ...rest) {\n\tlet tmp = 0;\n\tif(x) tmp += x;\n\tfor(let i of rest){\n\t\ttmp += i;\n\t}\n\treturn tmp;\n}\n\n```\n\n##　变量作用域\n\n`var`定义变量，该变量的作用域为整个函数体。不在任何函数内定义的变量就具有全局作用域，被绑定到全局对象window的一个属性\n\n```javascript\n'use strict';\nvar course = 'Learn JavaScript';\nconsole.log(course); // 'Learn JavaScript'\nconsole.log(window.course); // 'Learn JavaScript'\nfunction foo() {\n\tconsole.log('you foo');\n}\nfoo(); // 直接调用foo()\nwindow.foo(); // 通过window.foo()调用\n```\n\nES6引入了新的关键字`let`，用`let`替代`var`可以申明一个块级作用域(for循环等)的变量\n\n```javascript\nfunction foo() {\n\tvar sum = 0;\n\tfor (let i=0; i<100; i++) {\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n```\n\nES6标准引入了新的具有块级作用域的关键字`const`来定义常量\n\n```javascript\nconst PI = 3.14;\nPI = 3; // 某些浏览器不报错，但是无效果！\nPI; // 3.14\n```\n\n## 方法\n\n在一个对象中绑定函数，称为这个对象的方法，在一个方法内部，`this`是一个特殊变量，它始终指向当前对象\n\n```javascript\nvar xiaoming = {\n\tname: '小明',\n\tbirth: 1990,\n\tage: function () {\n\t\tvar y = new Date().getFullYear();\n\t\treturn y - this.birth;\n\t}\n};\nxiaoming.age(); //2017年则是27\n```\n\n`apply()`可以指定函数的`this`的指向\n\n```javascript\nfunction getAge() {\n\tvar y = new Date().getFullYear();\n\treturn y - this.birth;\n}\nvar xiaoming = {\n\tname: '小明',\n\tbirth: 1990,\n\tage: getAge\n};\nxiaoming.age(); // 25\ngetAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空\n```\n\n`call()`方法与`apply()`类似\n\n+ apply()把参数打包成Array再传入；\n\n+ call()把参数按顺序传入。\n\n```javascript\nMath.max.apply(null, [3, 5, 4]); // 5\nMath.max.call(null, 3, 5, 4); // 5\n```\n\n利用`apply()`动态改变函数的行为，如通过用我们自己的函数替换掉默认的parseInt()的方法统计代码一共调用了多少次parseInt()\n\n```javascript\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\nwindow.parseInt = function () {\n\tcount += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n\n// 测试:\nparseInt('10');\nparseInt('20');\nfor(let x=0;x<10;x++){\n\tparseInt('30');\n}\ncount; // 12\n```\n\n## 高阶函数\n\n`map()`方法将array内的每一个元素一次处理\n\n```javascript\nfunction pow(x) {\n\treturn x * x;\n}\n\nvar arr = [1, 2, 3];\narr.map(pow); // [1, 4, 9]\narr.map(String);//[\"1\",\"2\",\"3\"]\n```\n`reduce()`方法把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算\n\n```javascript\n[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)\n// 求和\nvar arr = [1, 3, 5, 7, 9];\narr.reduce(function (x, y) {\n\treturn x + y;\n}); // 25\n//将字符串转化为Number的函数\nfunction string2int(s) {\n\treturn s.split(\"\").map(function(x){return x-0}).reduce(function(x,y){return x*10+y});\n}\nstring2int(\"23434\");//23434\n```\n\n`filter()`方法把传入的函数依次作用于array的每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素\n\n```javascript\n\n// 删掉Array中的空字符串\nvar arr = ['A', '', 'B', null, undefined, 'C', '  '];\nvar r = arr.filter(function (s) {\n    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法\n});\narr; // ['A', 'B', 'C']\n\n// 回调函数\nvar arr = ['A', 'B', 'C'];\nvar r = arr.filter(function (element, index, self) {\n    console.log(element); // 依次打印'A', 'B', 'C'\n    console.log(index); // 依次打印0, 1, 2\n    console.log(self); // self就是变量arr\n    return true;\n});\n\n// 去除array中的重复元素\nvar\nr,\narr = ['1', '1', '2', '3', '2', '4', '5', '1'];\nr = arr.filter(function (element, index, self) {\n\treturn self.indexOf(element) === index;\n});//[\"1\", \"2\", \"3\", \"4\", \"5\"]\n\n```\n\n`sort()`方法默认把所有元素先转换为String再以ASCII排序，直接使用对数字排序会有大Bug，可通过自定义方式解决问题。\n`sort()`方法会直接对Array进行修改，它返回的结果仍是当前Array\n\n```javascript\n// 升序排列\nvar arr = [10, 20, 1, 2];\na2 = arr.sort(function (x, y) {\n\tif (x < y) {\n\t\treturn -1;\n\t}\n\tif (x > y) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}); // [1, 2, 10, 20]\n\na2 = arr; // true\n```\n\n## 闭包\n\n闭包就是能够读取其他函数内部变量的函数，由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁\n\n```javascript\nfunction f1(){\n\tvar n=999;\n\tnAdd=function(){n+=1};\n\tfunction f2(){\n\t\tconsole.log(n);\n\t}\n\treturn f2;\n}\nvar result=f1();\nresult(); // 999\nnAdd();\nresult(); // 1000\n// 函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除\n```\n\n## 箭头函数\n\nES6标准新增了一种新的函数：Arrow Function（箭头函数）\n\n```javascript\nx => x * x\n// 相当于\nfunction (x) {\n\treturn x * x;\n}\n```\n\n箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj\n\n```javascript\nvar obj = {\n\tbirth: 1990,\n\tgetAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 25\n```\n## generator\n\ngenerator（生成器）是ES6标准引入的新的数据类型，使用function*定义。一个generator看上去像一个函数，但可以返回多次\n\n```javascript\n//斐波那契数列\nfunction* fib(min,max) {\n\tvar\n\t\tt,\n\t\ta = 0,\n\t\tb = 1,\n\t\tn = 1;\n\twhile (n <= max) {\n\t\tif(n >= min){ yield a; }\n\t\tt = a + b;\n\t\ta = b;\n\t\tb = t;\n\t\tn ++;\n\t}\n\treturn a;\n}\nfor (let x of fib(4,5)) {\n    console.log(x); // 依次输出2, 3\n}\n```\n\n## 对象\n\n类型转换和判断需要注意的问题：\n\n+ 用`parseInt()`或`parseFloat()`来转换任意类型到`number`；\n\n+ 用`String()`来转换任意类型到`string`，或者直接调用某个对象的`toString()`方法；\n\n+ 通常不必把任意类型转换为`boolean`再判断，因为可以直接写`if (myVar) {...}`；\n\n+ `typeof`操作符可以判断出`number`、`boolean`、`string`、`function`和`undefined`；\n\n+ 判断`Array`要使用`Array.isArray(arr)`；\n\n+ 判断`null`请使用`myVar === null`；\n\n+ 判断某个全局变量是否存在用`typeof window.myVar === 'undefined'`；\n\n+ 函数内部判断某个变量是否存在用`typeof myVar === 'undefined'`。\n\n```javascript\n//number的toString()要特殊处理\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n```\n## Date 对象\n\n在JavaScript中，Date对象用来表示日期和时间，使用`Date()`获取系统时间；\n\n```javascript\nvar now = new Date();\nnow; // Mon Feb 27 2017 22:24:10 GMT+0800 (中国标准时间)\nnow.getFullYear(); // 2017, 年份\nnow.getMonth(); // 1, 月份，注意月份范围是0~11，1表示二月\nnow.getDate(); // 27, 表示27号\nnow.getDay(); // 1, 表示星期一\nnow.getHours(); // 22, 24小时制\nnow.getMinutes(); // 24, 分钟\nnow.getSeconds(); // 10, 秒\nnow.getMilliseconds(); // 264, 毫秒数\nnow.getTime(); // 1488205450264, 以number形式表示的时间戳\n\nvar d = new Date(1970, 0, 1, 7, 59, 59, 999);\nd; // Thu Jan 01 1970 07:59:59 GMT+0800 (中国标准时间)\nd.getTime(); -1;\n```\n\n## RegExp\n\n正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的\n\n```javascript\n// 匹配正常Email地址的表达式\nvar MailCheck = /^[0-9a-zA-Z\\_\\.]+@[0-9a-zA-Z\\_]+\\.[0-9a-zA-Z\\_]+/;\nMailCheck.exec('juncaixinchi111#gmail.com'); // null\nMailCheck.exec('juncaixinchi111@gmail.com'); // ['juncaixinchi111@gmail.com']\n```\n\n## JSON\n\nJSON是JavaScript Object Notation的缩写，它是一种数据交换格式\n\n使用`JSON.stringify()`把对象序列化成JSON格式的字符串：\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    age: 14,\n    gender: true,\n    height: 1.65,\n    grade: null,\n    'middle-school': '\\\"W3C\\\" Middle School',\n    skills: ['JavaScript', 'Java', 'Python', 'Lisp']\n};\nJSON.stringify(xiaoming); // '{\"name\":\"小明\",\"age\":14,\"gender\":true,\"height\":1.65,\"grade\":null,\"middle-school\":\"\\\"W3C\\\" Middle School\",\"skills\":[\"JavaScript\",\"Java\",\"Python\",\"Lisp\"]}'\n```\n\n按缩进输出：\n\n```javascript\nJSON.stringify(xiaoming, null, '  ');\n// 结果\n{\n  \"name\": \"小明\",\n  \"age\": 14,\n  \"gender\": true,\n  \"height\": 1.65,\n  \"grade\": null,\n  \"middle-school\": \"\\\"W3C\\\" Middle School\",\n  \"skills\": [\n    \"JavaScript\",\n    \"Java\",\n    \"Python\",\n    \"Lisp\"\n  ]\n}\n```\n\n给对象定义一个`toJSON()`的方法，直接返回JSON应该序列化的数据\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    age: 14,\n    gender: true,\n    height: 1.65,\n    grade: null,\n    'middle-school': '\\\"W3C\\\" Middle School',\n    skills: ['JavaScript', 'Java', 'Python', 'Lisp'],\n    toJSON: function () {\n        return { // 只输出name和age，并且改变了key：\n            'Name': this.name,\n            'Age': this.age\n        };\n    }\n};\n\nJSON.stringify(xiaoming); // '{\"Name\":\"小明\",\"Age\":14}'\n```\n\n使用`JSON.parse()`反序列化\n\n```javascript\nJSON.parse('{\"name\":\"小明\",\"age\":14}'); // Object {name: '小明', age: 14}\n// 接收一个函数，用来转换解析出的属性\nJSON.parse('{\"name\":\"小明\",\"age\":14}', function (key, value) {\n    // 把number * 2:\n    if (key === 'name') {\n        return value + '同学';\n    }\n    return value;\n}); // Object {name: '小明同学', age: 14}\n```","source":"_posts/Javascript-note.md","raw":"---\ntitle: Javascript-note\ndate: 2017-02-22 21:57:57\ntags: \n\t- JavaScript\n\t- ES6\n---\n\n# 学习javascript的笔记\n\n主要学习了\n\n[JavaScript教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)\n\n<!-- more -->\n\n## 字符串\n\n多行字符串\n\n`这是一个\n多行\n字符串`;\n\n`toUpperCase()`,`toLowerCase()` 把一个字符串全部变为大写或小写\n\n```javascript\nvar s = 'Hello';\ns.toUpperCase(); // 返回'HELLO'\ns.toLowerCase(); // 返回'hello'\n```\n\n`indexOf()`搜索指定字符串出现的位置\n\n```javascript\nvar s = 'hello, world';\ns.indexOf('world'); // 返回7\ns.indexOf('World'); // 没有找到指定的子串，返回-1\n```\n\n`substring()`返回指定索引区间的子串\n\n```javascript\nvar s = 'hello, world'\ns.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'\ns.substring(7); // 从索引7开始到结束，返回'world'\n```\n\n## 数组\n\n通过`Array.length`获取数组长度，给length赋一个新的值或索引赋值时索引超过了范围，会导致Array大小的变化\n\n```javascript\nvar arr = [1, 2, 3.14];\narr.length; // 3\narr.length = 4;\narr; // arr变为[1, 2, 3.14, undefined]\narr[5] = 'x';\narr; // arr变为[1, 2, 3, undefined, undefined, 'x']\n```\n\n通过`indexOf()`来搜索Array中一个指定的元素的位置\n\n```javascript\nvar arr = [10, 20, '30', 'xyz'];\narr.indexOf(10); // 元素10的索引为0\narr.indexOf(30); // 元素30没有找到，返回-1\n```\n\n通过`slice()`截取Array的部分元素，然后返回一个新的Array\n\n```javascript\nvar arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\narr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']\narr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']\n```\n`push()`向Array的末尾添加若干元素，`pop()`则把Array的最后一个元素删除掉,`unshift()`往Array的头部添加若干元素，`shift()`则把Array的第一个元素删掉\n\n```javascript\nvar arr = [1, 2];\narr.push('A', 'B'); // 返回Array新的长度: 4\narr; // [1, 2, 'A', 'B']\narr.pop(); // pop()返回'B'\narr; // [1, 2, 'A']\narr.unshift('A', 'B'); // 返回Array新的长度: 5\narr; // ['A', 'B', 1, 2, 'A']\narr.shift(); // 'A'\narr; // ['B', 1, 2, 'A']\narr = [];\narr.pop(); // 空数组继续pop不会报错，而是返回undefined\narr.shift(); // 空数组继续shift不会报错，而是返回undefined\n```\n\n`sort()`, `reverse()`可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认把所有元素先转换为String，再根据ASCII码进行排序\n\n```javascript\nvar arr = ['B', 'C', 'A', 'b'];\narr.sort();\narr; // ['A', 'B', 'C', 'b']\narr.reverse(); \narr; //['b', C', 'B', 'A']\n```\n\n`splice()`方法可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：\n\n```javascript\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\n// 从索引2开始删除3个元素,然后再添加两个元素:\narr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n// 只删除,不添加:\narr.splice(2, 2); // ['Google', 'Facebook']\narr; // ['Microsoft', 'Apple', 'Oracle']\n// 只添加,不删除:\narr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n```\n\n`concat()`方法把当前的Array和另一个Array连接起来，并返回一个新的Array：\n\n```javascript\nvar arr = ['A', 'B', 'C'];\narr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]\narr; // ['A', 'B', 'C']\n```\n\n`join()`方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：\n\n```javascript\nvar arr = ['A', 'B', 'C', 1, 2, 3];\narr.join('-'); // 'A-B-C-1-2-3'\narr.join(''); // 'ABC123'\n```\n\n如果数组的某个元素又是一个Array，则可以形成多维数组\n\n```javascript\nvar arr = [[1, 2, 3], [400, 500, 600], '-'];\narr[1][1]; //500\n```\n\n## 对象\n\nJavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。访问属性是通过`.`操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来\n\n```javascript\nvar xiaoming = {\n\tname: '小明',\n\tbirth: 1990,\n\tschool: 'No.1 Middle School',\n\theight: 1.70,\n\tweight: 65,\n\tscore: null\n};\nxiaohong['middle-school']; // 'No.1 Middle School'\nxiaohong['name']; // '小红'\nxiaohong.name; // '小红'\nxiaoming.age; // undefined\n```\n要检测xiaoming是否拥有某一属性，可以用`in`操作符。因为`toString`定义在object对象中，所以xiaoming继承了`toString`属性；可以用`hasOwnProperty()`方法判断一个属性是否是xiaoming自身拥有的，而不是继承得到的。\n\n```javascript\nvar xiaoming = {\n\tname: '小明'\n};\n'toString' in xiaoming; // true\nxiaoming.hasOwnProperty('name'); // true\nxiaoming.hasOwnProperty('toString'); // false\n```\n\n## 条件判断\n\n使用`if () { ... } else { ... }`来进行条件判断，`else if`通常连写在一起，以增加可读性。\n\n```javascript\nvar age = 3;\nif (age >= 18) {\n\tconsole.log('adult');\n} else if (age >= 6) {\n\tconsole.log('teenager');\n} else {\n\tconsole.log('kid');\n}\n```\n\n## 循环\n\nfor循环最常用的地方是利用索引来遍历数组\n\n```javascript\nvar arr = ['Apple', 'Google', 'Microsoft'];\nvar i, x;\nfor (i=0; i<arr.length; i++) {\n\tx = arr[i];\n\tconsole.log(x);\n}\n```\n\nfor循环的3个条件都是可以省略的，但必须使用`break`语句退出循环，否则就是死循环\n\n```javascript\nvar x = 0;\nfor (;;) { // 将无限循环下去\n\tif (x > 100) {\n        break; // 通过if判断来退出循环\n    }\n    x ++;\n}\n```\n\n`for ... in`循环可以把一个对象的所有属性依次循环出来\n\n```javascript\nvar o = {\n\tname: 'Jack',\n\tage: 20,\n\tcity: 'Beijing'\n};\nfor (var key in o) {\t\n    console.log(key); // 'name', 'age', 'city'\n}\n```\n\n`for ... in`循环可以直接循环出Array的索引，但得到索引的是String而不是Number\n\n```javascript\nvar a = ['A', 'B', 'C', 1, 2, 3];\nfor (var i in a) {\n\tconsole.log(i)\n\tconsole.log(a[i]); \n}\n```\n\nwhile循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环\n\n\n```javascript\nvar x = 0;\nvar n = 99;\nwhile (n > 0) {\n\tx = x + n;\n\tn = n - 2;\n}\nx; // 2500\n```\n\n`do { ... } while()`循环，它和while循环的唯一区别在于前者是在每次循环完成的时候判断条件，所以至少会执行一次循环\n\n```javascript\nvar n = 0;\ndo {\n\tn = n + 1;\n} while (n < 100);\nn; // 100\n```\n\n## Map和Set\n\n`Map`是一组键值对的结构，具有极快的查找速度，`Map`具有以下方法：\n\n```javascript\nvar M = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);\nvar m = new Map(); // 空Map\nm.set('Adam', 67); // 添加新的key-value\nm.set('Bob', 59);\nm.has('Adam'); // 是否存在key 'Adam': true\nm.get('Adam'); // 67\nm.delete('Adam'); // 删除key 'Adam'\nm.get('Adam'); // undefined\n```\n`Set`是一组`key`的集合，不能重复，重复元素在`Set`中自动被过滤\n\n```javascript\nvar s = new Set([1, 2, 3, 3, '3']);\ns; // Set {1, 2, 3, \"3\"}\ns.add(4); // Set {1, 2, 3, \"3\", 4}\ns.delete(2); // Set {1, 3, \"3\", 4}\ns.size; //4\ns.has(3); // true\n```\n\n## iterable\n\n`for ... of`循环来遍历`Array`、`Map`和`Set`\n\n```javascript\nvar a = ['A', 'B', 'C'];\nvar s = new Set(['A', 'B', 'C']);\nvar m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);\nfor (var x of a) { // 遍历Array\n\tconsole.log(x);\n}\nfor (var x of s) { // 遍历Set\n\tconsole.log(x);\n}\nfor (var x of m) { // 遍历Map\n\tconsole.log(x[0] + '<=>' + x[1]);\n}\n```\n\n`iterable`内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数，以下是Array的例子\n\n```javascript\nvar a = ['A', 'B', 'C'];\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    console.log(\"element: \" + element + \"; index: \" + index + \"; array: \" + array);\n});\n```\n\n`Set`与`Array`类似，但`Set`没有索引，因此回调函数的前两个参数都是元素本身\n\n```javascript\nvar s = new Set(['A', 'B', 'C']);\ns.forEach(function (element, sameElement, set) {\n\tconsole.log(\"element: \" + element + \"; sameElement: \" + sameElement + \"; set: \" + set);\n});\n```\n\n`Map`的回调函数参数依次为`value`、`key`和`map`本身\n\n```javascript\nvar m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);\nm.forEach(function (value, key, map) {\n\tconsole.log(\"value: \" + value + \"; key: \" + key + \"; map: \" + map);\n});\n```\n\n## 函数定义和调用\n\n```javascript\n// 一般定义\nfunction abs(x) {\n\treturn x>0 ? x : -x;\n}\n// 匿名函数定义\nvar abs = function (x) {\n\treturn x>0 ? x : -x;\n};\n```\n\n利用`arguments`获取所有传入参数\n\n```javascript\nfunction abs() {\n\tif (arguments.length === 0) {\n\t\treturn 0;\n\t}\n\tif (typeof x !== 'number') {\n\t\tthrow 'Not a number';\n\t}\n\tvar x = arguments[0];\n\treturn x >= 0 ? x : -x;\n}\n```\n\n使用`rest`来获取任意个参数，需写在最后面，前面加`...`\n\n```javascript\nfunction foo(a, b, ...rest) {\n\tconsole.log('a = ' + a);\n\tconsole.log('b = ' + b);\n\tconsole.log(rest);\n}\n// sum()函数，接收任意个参数并返回它们的和\nfunction sum(x, ...rest) {\n\tlet tmp = 0;\n\tif(x) tmp += x;\n\tfor(let i of rest){\n\t\ttmp += i;\n\t}\n\treturn tmp;\n}\n\n```\n\n##　变量作用域\n\n`var`定义变量，该变量的作用域为整个函数体。不在任何函数内定义的变量就具有全局作用域，被绑定到全局对象window的一个属性\n\n```javascript\n'use strict';\nvar course = 'Learn JavaScript';\nconsole.log(course); // 'Learn JavaScript'\nconsole.log(window.course); // 'Learn JavaScript'\nfunction foo() {\n\tconsole.log('you foo');\n}\nfoo(); // 直接调用foo()\nwindow.foo(); // 通过window.foo()调用\n```\n\nES6引入了新的关键字`let`，用`let`替代`var`可以申明一个块级作用域(for循环等)的变量\n\n```javascript\nfunction foo() {\n\tvar sum = 0;\n\tfor (let i=0; i<100; i++) {\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n```\n\nES6标准引入了新的具有块级作用域的关键字`const`来定义常量\n\n```javascript\nconst PI = 3.14;\nPI = 3; // 某些浏览器不报错，但是无效果！\nPI; // 3.14\n```\n\n## 方法\n\n在一个对象中绑定函数，称为这个对象的方法，在一个方法内部，`this`是一个特殊变量，它始终指向当前对象\n\n```javascript\nvar xiaoming = {\n\tname: '小明',\n\tbirth: 1990,\n\tage: function () {\n\t\tvar y = new Date().getFullYear();\n\t\treturn y - this.birth;\n\t}\n};\nxiaoming.age(); //2017年则是27\n```\n\n`apply()`可以指定函数的`this`的指向\n\n```javascript\nfunction getAge() {\n\tvar y = new Date().getFullYear();\n\treturn y - this.birth;\n}\nvar xiaoming = {\n\tname: '小明',\n\tbirth: 1990,\n\tage: getAge\n};\nxiaoming.age(); // 25\ngetAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空\n```\n\n`call()`方法与`apply()`类似\n\n+ apply()把参数打包成Array再传入；\n\n+ call()把参数按顺序传入。\n\n```javascript\nMath.max.apply(null, [3, 5, 4]); // 5\nMath.max.call(null, 3, 5, 4); // 5\n```\n\n利用`apply()`动态改变函数的行为，如通过用我们自己的函数替换掉默认的parseInt()的方法统计代码一共调用了多少次parseInt()\n\n```javascript\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\nwindow.parseInt = function () {\n\tcount += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n\n// 测试:\nparseInt('10');\nparseInt('20');\nfor(let x=0;x<10;x++){\n\tparseInt('30');\n}\ncount; // 12\n```\n\n## 高阶函数\n\n`map()`方法将array内的每一个元素一次处理\n\n```javascript\nfunction pow(x) {\n\treturn x * x;\n}\n\nvar arr = [1, 2, 3];\narr.map(pow); // [1, 4, 9]\narr.map(String);//[\"1\",\"2\",\"3\"]\n```\n`reduce()`方法把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算\n\n```javascript\n[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)\n// 求和\nvar arr = [1, 3, 5, 7, 9];\narr.reduce(function (x, y) {\n\treturn x + y;\n}); // 25\n//将字符串转化为Number的函数\nfunction string2int(s) {\n\treturn s.split(\"\").map(function(x){return x-0}).reduce(function(x,y){return x*10+y});\n}\nstring2int(\"23434\");//23434\n```\n\n`filter()`方法把传入的函数依次作用于array的每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素\n\n```javascript\n\n// 删掉Array中的空字符串\nvar arr = ['A', '', 'B', null, undefined, 'C', '  '];\nvar r = arr.filter(function (s) {\n    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法\n});\narr; // ['A', 'B', 'C']\n\n// 回调函数\nvar arr = ['A', 'B', 'C'];\nvar r = arr.filter(function (element, index, self) {\n    console.log(element); // 依次打印'A', 'B', 'C'\n    console.log(index); // 依次打印0, 1, 2\n    console.log(self); // self就是变量arr\n    return true;\n});\n\n// 去除array中的重复元素\nvar\nr,\narr = ['1', '1', '2', '3', '2', '4', '5', '1'];\nr = arr.filter(function (element, index, self) {\n\treturn self.indexOf(element) === index;\n});//[\"1\", \"2\", \"3\", \"4\", \"5\"]\n\n```\n\n`sort()`方法默认把所有元素先转换为String再以ASCII排序，直接使用对数字排序会有大Bug，可通过自定义方式解决问题。\n`sort()`方法会直接对Array进行修改，它返回的结果仍是当前Array\n\n```javascript\n// 升序排列\nvar arr = [10, 20, 1, 2];\na2 = arr.sort(function (x, y) {\n\tif (x < y) {\n\t\treturn -1;\n\t}\n\tif (x > y) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}); // [1, 2, 10, 20]\n\na2 = arr; // true\n```\n\n## 闭包\n\n闭包就是能够读取其他函数内部变量的函数，由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁\n\n```javascript\nfunction f1(){\n\tvar n=999;\n\tnAdd=function(){n+=1};\n\tfunction f2(){\n\t\tconsole.log(n);\n\t}\n\treturn f2;\n}\nvar result=f1();\nresult(); // 999\nnAdd();\nresult(); // 1000\n// 函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除\n```\n\n## 箭头函数\n\nES6标准新增了一种新的函数：Arrow Function（箭头函数）\n\n```javascript\nx => x * x\n// 相当于\nfunction (x) {\n\treturn x * x;\n}\n```\n\n箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj\n\n```javascript\nvar obj = {\n\tbirth: 1990,\n\tgetAge: function () {\n        var b = this.birth; // 1990\n        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象\n        return fn();\n    }\n};\nobj.getAge(); // 25\n```\n## generator\n\ngenerator（生成器）是ES6标准引入的新的数据类型，使用function*定义。一个generator看上去像一个函数，但可以返回多次\n\n```javascript\n//斐波那契数列\nfunction* fib(min,max) {\n\tvar\n\t\tt,\n\t\ta = 0,\n\t\tb = 1,\n\t\tn = 1;\n\twhile (n <= max) {\n\t\tif(n >= min){ yield a; }\n\t\tt = a + b;\n\t\ta = b;\n\t\tb = t;\n\t\tn ++;\n\t}\n\treturn a;\n}\nfor (let x of fib(4,5)) {\n    console.log(x); // 依次输出2, 3\n}\n```\n\n## 对象\n\n类型转换和判断需要注意的问题：\n\n+ 用`parseInt()`或`parseFloat()`来转换任意类型到`number`；\n\n+ 用`String()`来转换任意类型到`string`，或者直接调用某个对象的`toString()`方法；\n\n+ 通常不必把任意类型转换为`boolean`再判断，因为可以直接写`if (myVar) {...}`；\n\n+ `typeof`操作符可以判断出`number`、`boolean`、`string`、`function`和`undefined`；\n\n+ 判断`Array`要使用`Array.isArray(arr)`；\n\n+ 判断`null`请使用`myVar === null`；\n\n+ 判断某个全局变量是否存在用`typeof window.myVar === 'undefined'`；\n\n+ 函数内部判断某个变量是否存在用`typeof myVar === 'undefined'`。\n\n```javascript\n//number的toString()要特殊处理\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n```\n## Date 对象\n\n在JavaScript中，Date对象用来表示日期和时间，使用`Date()`获取系统时间；\n\n```javascript\nvar now = new Date();\nnow; // Mon Feb 27 2017 22:24:10 GMT+0800 (中国标准时间)\nnow.getFullYear(); // 2017, 年份\nnow.getMonth(); // 1, 月份，注意月份范围是0~11，1表示二月\nnow.getDate(); // 27, 表示27号\nnow.getDay(); // 1, 表示星期一\nnow.getHours(); // 22, 24小时制\nnow.getMinutes(); // 24, 分钟\nnow.getSeconds(); // 10, 秒\nnow.getMilliseconds(); // 264, 毫秒数\nnow.getTime(); // 1488205450264, 以number形式表示的时间戳\n\nvar d = new Date(1970, 0, 1, 7, 59, 59, 999);\nd; // Thu Jan 01 1970 07:59:59 GMT+0800 (中国标准时间)\nd.getTime(); -1;\n```\n\n## RegExp\n\n正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的\n\n```javascript\n// 匹配正常Email地址的表达式\nvar MailCheck = /^[0-9a-zA-Z\\_\\.]+@[0-9a-zA-Z\\_]+\\.[0-9a-zA-Z\\_]+/;\nMailCheck.exec('juncaixinchi111#gmail.com'); // null\nMailCheck.exec('juncaixinchi111@gmail.com'); // ['juncaixinchi111@gmail.com']\n```\n\n## JSON\n\nJSON是JavaScript Object Notation的缩写，它是一种数据交换格式\n\n使用`JSON.stringify()`把对象序列化成JSON格式的字符串：\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    age: 14,\n    gender: true,\n    height: 1.65,\n    grade: null,\n    'middle-school': '\\\"W3C\\\" Middle School',\n    skills: ['JavaScript', 'Java', 'Python', 'Lisp']\n};\nJSON.stringify(xiaoming); // '{\"name\":\"小明\",\"age\":14,\"gender\":true,\"height\":1.65,\"grade\":null,\"middle-school\":\"\\\"W3C\\\" Middle School\",\"skills\":[\"JavaScript\",\"Java\",\"Python\",\"Lisp\"]}'\n```\n\n按缩进输出：\n\n```javascript\nJSON.stringify(xiaoming, null, '  ');\n// 结果\n{\n  \"name\": \"小明\",\n  \"age\": 14,\n  \"gender\": true,\n  \"height\": 1.65,\n  \"grade\": null,\n  \"middle-school\": \"\\\"W3C\\\" Middle School\",\n  \"skills\": [\n    \"JavaScript\",\n    \"Java\",\n    \"Python\",\n    \"Lisp\"\n  ]\n}\n```\n\n给对象定义一个`toJSON()`的方法，直接返回JSON应该序列化的数据\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    age: 14,\n    gender: true,\n    height: 1.65,\n    grade: null,\n    'middle-school': '\\\"W3C\\\" Middle School',\n    skills: ['JavaScript', 'Java', 'Python', 'Lisp'],\n    toJSON: function () {\n        return { // 只输出name和age，并且改变了key：\n            'Name': this.name,\n            'Age': this.age\n        };\n    }\n};\n\nJSON.stringify(xiaoming); // '{\"Name\":\"小明\",\"Age\":14}'\n```\n\n使用`JSON.parse()`反序列化\n\n```javascript\nJSON.parse('{\"name\":\"小明\",\"age\":14}'); // Object {name: '小明', age: 14}\n// 接收一个函数，用来转换解析出的属性\nJSON.parse('{\"name\":\"小明\",\"age\":14}', function (key, value) {\n    // 把number * 2:\n    if (key === 'name') {\n        return value + '同学';\n    }\n    return value;\n}); // Object {name: '小明同学', age: 14}\n```","slug":"Javascript-note","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkp5000a77hxmcvn2q7w","content":"<h1 id=\"学习javascript的笔记\"><a href=\"#学习javascript的笔记\" class=\"headerlink\" title=\"学习javascript的笔记\"></a>学习javascript的笔记</h1><p>主要学习了</p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\" target=\"_blank\" rel=\"external\">JavaScript教程</a></p>\n<a id=\"more\"></a>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>多行字符串</p>\n<p><code>这是一个\n多行\n字符串</code>;</p>\n<p><code>toUpperCase()</code>,<code>toLowerCase()</code> 把一个字符串全部变为大写或小写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello'</span>;</div><div class=\"line\">s.toUpperCase(); <span class=\"comment\">// 返回'HELLO'</span></div><div class=\"line\">s.toLowerCase(); <span class=\"comment\">// 返回'hello'</span></div></pre></td></tr></table></figure>\n<p><code>indexOf()</code>搜索指定字符串出现的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello, world'</span>;</div><div class=\"line\">s.indexOf(<span class=\"string\">'world'</span>); <span class=\"comment\">// 返回7</span></div><div class=\"line\">s.indexOf(<span class=\"string\">'World'</span>); <span class=\"comment\">// 没有找到指定的子串，返回-1</span></div></pre></td></tr></table></figure>\n<p><code>substring()</code>返回指定索引区间的子串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello, world'</span></div><div class=\"line\">s.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// 从索引0开始到5（不包括5），返回'hello'</span></div><div class=\"line\">s.substring(<span class=\"number\">7</span>); <span class=\"comment\">// 从索引7开始到结束，返回'world'</span></div></pre></td></tr></table></figure>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>通过<code>Array.length</code>获取数组长度，给length赋一个新的值或索引赋值时索引超过了范围，会导致Array大小的变化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3.14</span>];</div><div class=\"line\">arr.length; <span class=\"comment\">// 3</span></div><div class=\"line\">arr.length = <span class=\"number\">4</span>;</div><div class=\"line\">arr; <span class=\"comment\">// arr变为[1, 2, 3.14, undefined]</span></div><div class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"string\">'x'</span>;</div><div class=\"line\">arr; <span class=\"comment\">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></div></pre></td></tr></table></figure>\n<p>通过<code>indexOf()</code>来搜索Array中一个指定的元素的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"string\">'30'</span>, <span class=\"string\">'xyz'</span>];</div><div class=\"line\">arr.indexOf(<span class=\"number\">10</span>); <span class=\"comment\">// 元素10的索引为0</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">30</span>); <span class=\"comment\">// 元素30没有找到，返回-1</span></div></pre></td></tr></table></figure>\n<p>通过<code>slice()</code>截取Array的部分元素，然后返回一个新的Array</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>); <span class=\"comment\">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></div></pre></td></tr></table></figure>\n<p><code>push()</code>向Array的末尾添加若干元素，<code>pop()</code>则把Array的最后一个元素删除掉,<code>unshift()</code>往Array的头部添加若干元素，<code>shift()</code>则把Array的第一个元素删掉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">arr.push(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>); <span class=\"comment\">// 返回Array新的长度: 4</span></div><div class=\"line\">arr; <span class=\"comment\">// [1, 2, 'A', 'B']</span></div><div class=\"line\">arr.pop(); <span class=\"comment\">// pop()返回'B'</span></div><div class=\"line\">arr; <span class=\"comment\">// [1, 2, 'A']</span></div><div class=\"line\">arr.unshift(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>); <span class=\"comment\">// 返回Array新的长度: 5</span></div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 1, 2, 'A']</span></div><div class=\"line\">arr.shift(); <span class=\"comment\">// 'A'</span></div><div class=\"line\">arr; <span class=\"comment\">// ['B', 1, 2, 'A']</span></div><div class=\"line\">arr = [];</div><div class=\"line\">arr.pop(); <span class=\"comment\">// 空数组继续pop不会报错，而是返回undefined</span></div><div class=\"line\">arr.shift(); <span class=\"comment\">// 空数组继续shift不会报错，而是返回undefined</span></div></pre></td></tr></table></figure>\n<p><code>sort()</code>, <code>reverse()</code>可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认把所有元素先转换为String，再根据ASCII码进行排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'b'</span>];</div><div class=\"line\">arr.sort();</div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 'C', 'b']</span></div><div class=\"line\">arr.reverse(); </div><div class=\"line\">arr; <span class=\"comment\">//['b', C', 'B', 'A']</span></div></pre></td></tr></table></figure>\n<p><code>splice()</code>方法可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Microsoft'</span>, <span class=\"string\">'Apple'</span>, <span class=\"string\">'Yahoo'</span>, <span class=\"string\">'AOL'</span>, <span class=\"string\">'Excite'</span>, <span class=\"string\">'Oracle'</span>];</div><div class=\"line\"><span class=\"comment\">// 从索引2开始删除3个元素,然后再添加两个元素:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只删除,不添加:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>); <span class=\"comment\">// ['Google', 'Facebook']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只添加,不删除:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回[],因为没有删除任何元素</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div></pre></td></tr></table></figure>\n<p><code>concat()</code>方法把当前的Array和另一个Array连接起来，并返回一个新的Array：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">arr.concat(<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// ['A', 'B', 'C', 1, 2, 3, 4]</span></div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 'C']</span></div></pre></td></tr></table></figure>\n<p><code>join()</code>方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">arr.join(<span class=\"string\">'-'</span>); <span class=\"comment\">// 'A-B-C-1-2-3'</span></div><div class=\"line\">arr.join(<span class=\"string\">''</span>); <span class=\"comment\">// 'ABC123'</span></div></pre></td></tr></table></figure>\n<p>如果数组的某个元素又是一个Array，则可以形成多维数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">400</span>, <span class=\"number\">500</span>, <span class=\"number\">600</span>], <span class=\"string\">'-'</span>];</div><div class=\"line\">arr[<span class=\"number\">1</span>][<span class=\"number\">1</span>]; <span class=\"comment\">//500</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">school</span>: <span class=\"string\">'No.1 Middle School'</span>,</div><div class=\"line\">\t<span class=\"attr\">height</span>: <span class=\"number\">1.70</span>,</div><div class=\"line\">\t<span class=\"attr\">weight</span>: <span class=\"number\">65</span>,</div><div class=\"line\">\t<span class=\"attr\">score</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div><div class=\"line\">xiaohong[<span class=\"string\">'middle-school'</span>]; <span class=\"comment\">// 'No.1 Middle School'</span></div><div class=\"line\">xiaohong[<span class=\"string\">'name'</span>]; <span class=\"comment\">// '小红'</span></div><div class=\"line\">xiaohong.name; <span class=\"comment\">// '小红'</span></div><div class=\"line\">xiaoming.age; <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>要检测xiaoming是否拥有某一属性，可以用<code>in</code>操作符。因为<code>toString</code>定义在object对象中，所以xiaoming继承了<code>toString</code>属性；可以用<code>hasOwnProperty()</code>方法判断一个属性是否是xiaoming自身拥有的，而不是继承得到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> xiaoming; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming.hasOwnProperty(<span class=\"string\">'toString'</span>); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><p>使用<code>if () { ... } else { ... }</code>来进行条件判断，<code>else if</code>通常连写在一起，以增加可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'adult'</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">6</span>) &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'teenager'</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'kid'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>for循环最常用的地方是利用索引来遍历数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Apple'</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Microsoft'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> i, x;</div><div class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</div><div class=\"line\">\tx = arr[i];</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>for循环的3个条件都是可以省略的，但必须使用<code>break</code>语句退出循环，否则就是死循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (;;) &#123; <span class=\"comment\">// 将无限循环下去</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 通过if判断来退出循环</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    x ++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>for ... in</code>循环可以把一个对象的所有属性依次循环出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'Jack'</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">\t<span class=\"attr\">city</span>: <span class=\"string\">'Beijing'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> o) &#123;\t</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 'name', 'age', 'city'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>for ... in</code>循环可以直接循环出Array的索引，但得到索引的是String而不是Number</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(a[i]); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">99</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\tx = x + n;</div><div class=\"line\">\tn = n - <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">x; <span class=\"comment\">// 2500</span></div></pre></td></tr></table></figure>\n<p><code>do { ... } while()</code>循环，它和while循环的唯一区别在于前者是在每次循环完成的时候判断条件，所以至少会执行一次循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\tn = n + <span class=\"number\">1</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (n &lt; <span class=\"number\">100</span>);</div><div class=\"line\">n; <span class=\"comment\">// 100</span></div></pre></td></tr></table></figure>\n<h2 id=\"Map和Set\"><a href=\"#Map和Set\" class=\"headerlink\" title=\"Map和Set\"></a>Map和Set</h2><p><code>Map</code>是一组键值对的结构，具有极快的查找速度，<code>Map</code>具有以下方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> M = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'Michael'</span>, <span class=\"number\">95</span>], [<span class=\"string\">'Bob'</span>, <span class=\"number\">75</span>], [<span class=\"string\">'Tracy'</span>, <span class=\"number\">85</span>]]);</div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(); <span class=\"comment\">// 空Map</span></div><div class=\"line\">m.set(<span class=\"string\">'Adam'</span>, <span class=\"number\">67</span>); <span class=\"comment\">// 添加新的key-value</span></div><div class=\"line\">m.set(<span class=\"string\">'Bob'</span>, <span class=\"number\">59</span>);</div><div class=\"line\">m.has(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 是否存在key 'Adam': true</span></div><div class=\"line\">m.get(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 67</span></div><div class=\"line\">m.delete(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 删除key 'Adam'</span></div><div class=\"line\">m.get(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p><code>Set</code>是一组<code>key</code>的集合，不能重复，重复元素在<code>Set</code>中自动被过滤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"string\">'3'</span>]);</div><div class=\"line\">s; <span class=\"comment\">// Set &#123;1, 2, 3, \"3\"&#125;</span></div><div class=\"line\">s.add(<span class=\"number\">4</span>); <span class=\"comment\">// Set &#123;1, 2, 3, \"3\", 4&#125;</span></div><div class=\"line\">s.delete(<span class=\"number\">2</span>); <span class=\"comment\">// Set &#123;1, 3, \"3\", 4&#125;</span></div><div class=\"line\">s.size; <span class=\"comment\">//4</span></div><div class=\"line\">s.has(<span class=\"number\">3</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h2 id=\"iterable\"><a href=\"#iterable\" class=\"headerlink\" title=\"iterable\"></a>iterable</h2><p><code>for ... of</code>循环来遍历<code>Array</code>、<code>Map</code>和<code>Set</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'x'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'y'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'z'</span>]]);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> a) &#123; <span class=\"comment\">// 遍历Array</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> s) &#123; <span class=\"comment\">// 遍历Set</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> m) &#123; <span class=\"comment\">// 遍历Map</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>] + <span class=\"string\">'&lt;=&gt;'</span> + x[<span class=\"number\">1</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>iterable</code>内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数，以下是Array的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// element: 指向当前元素的值</span></div><div class=\"line\">    <span class=\"comment\">// index: 指向当前索引</span></div><div class=\"line\">    <span class=\"comment\">// array: 指向Array对象本身</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"element: \"</span> + element + <span class=\"string\">\"; index: \"</span> + index + <span class=\"string\">\"; array: \"</span> + array);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]);</div><div class=\"line\">s.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, sameElement, set</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"element: \"</span> + element + <span class=\"string\">\"; sameElement: \"</span> + sameElement + <span class=\"string\">\"; set: \"</span> + set);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'x'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'y'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'z'</span>]]);</div><div class=\"line\">m.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key, map</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"value: \"</span> + value + <span class=\"string\">\"; key: \"</span> + key + <span class=\"string\">\"; map: \"</span> + map);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"函数定义和调用\"><a href=\"#函数定义和调用\" class=\"headerlink\" title=\"函数定义和调用\"></a>函数定义和调用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般定义</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abs</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? x : -x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 匿名函数定义</span></div><div class=\"line\"><span class=\"keyword\">var</span> abs = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? x : -x;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>利用<code>arguments</code>获取所有传入参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abs</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x !== <span class=\"string\">'number'</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">'Not a number'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</div><div class=\"line\">\t<span class=\"keyword\">return</span> x &gt;= <span class=\"number\">0</span> ? x : -x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用<code>rest</code>来获取任意个参数，需写在最后面，前面加<code>...</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, ...rest</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a = '</span> + a);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'b = '</span> + b);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(rest);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// sum()函数，接收任意个参数并返回它们的和</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, ...rest</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x) tmp += x;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> rest)&#123;</div><div class=\"line\">\t\ttmp += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##　变量作用域</p>\n<p><code>var</code>定义变量，该变量的作用域为整个函数体。不在任何函数内定义的变量就具有全局作用域，被绑定到全局对象window的一个属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> course = <span class=\"string\">'Learn JavaScript'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(course); <span class=\"comment\">// 'Learn JavaScript'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.course); <span class=\"comment\">// 'Learn JavaScript'</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'you foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// 直接调用foo()</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo(); <span class=\"comment\">// 通过window.foo()调用</span></div></pre></td></tr></table></figure>\n<p>ES6引入了新的关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明一个块级作用域(for循环等)的变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\tsum += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES6标准引入了新的具有块级作用域的关键字<code>const</code>来定义常量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14</span>;</div><div class=\"line\">PI = <span class=\"number\">3</span>; <span class=\"comment\">// 某些浏览器不报错，但是无效果！</span></div><div class=\"line\">PI; <span class=\"comment\">// 3.14</span></div></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>在一个对象中绑定函数，称为这个对象的方法，在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">xiaoming.age(); <span class=\"comment\">//2017年则是27</span></div></pre></td></tr></table></figure>\n<p><code>apply()</code>可以指定函数的<code>this</code>的指向</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">\t<span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>: getAge</div><div class=\"line\">&#125;;</div><div class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></div><div class=\"line\">getAge.apply(xiaoming, []); <span class=\"comment\">// 25, this指向xiaoming, 参数为空</span></div></pre></td></tr></table></figure>\n<p><code>call()</code>方法与<code>apply()</code>类似</p>\n<ul>\n<li><p>apply()把参数打包成Array再传入；</p>\n</li>\n<li><p>call()把参数按顺序传入。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"literal\">null</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>利用<code>apply()</code>动态改变函数的行为，如通过用我们自己的函数替换掉默认的parseInt()的方法统计代码一共调用了多少次parseInt()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> oldParseInt = <span class=\"built_in\">parseInt</span>; <span class=\"comment\">// 保存原函数</span></div><div class=\"line\"><span class=\"built_in\">window</span>.parseInt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tcount += <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> oldParseInt.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 调用原函数</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试:</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>);</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'20'</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> x=<span class=\"number\">0</span>;x&lt;<span class=\"number\">10</span>;x++)&#123;</div><div class=\"line\">\t<span class=\"built_in\">parseInt</span>(<span class=\"string\">'30'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">count; <span class=\"comment\">// 12</span></div></pre></td></tr></table></figure>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p><code>map()</code>方法将array内的每一个元素一次处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">arr.map(pow); <span class=\"comment\">// [1, 4, 9]</span></div><div class=\"line\">arr.map(<span class=\"built_in\">String</span>);<span class=\"comment\">//[\"1\",\"2\",\"3\"]</span></div></pre></td></tr></table></figure>\n<p><code>reduce()</code>方法把一个函数作用在这个Array的[x1, x2, x3…]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</div><div class=\"line\"><span class=\"comment\">// 求和</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;); <span class=\"comment\">// 25</span></div><div class=\"line\"><span class=\"comment\">//将字符串转化为Number的函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">string2int</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.split(<span class=\"string\">\"\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"keyword\">return</span> x<span class=\"number\">-0</span>&#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x*<span class=\"number\">10</span>+y&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">string2int(<span class=\"string\">\"23434\"</span>);<span class=\"comment\">//23434</span></div></pre></td></tr></table></figure>\n<p><code>filter()</code>方法把传入的函数依次作用于array的每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删掉Array中的空字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s &amp;&amp; s.trim(); <span class=\"comment\">// 注意：IE9以下的版本没有trim()方法</span></div><div class=\"line\">&#125;);</div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 'C']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 回调函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element); <span class=\"comment\">// 依次打印'A', 'B', 'C'</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 依次打印0, 1, 2</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(self); <span class=\"comment\">// self就是变量arr</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去除array中的重复元素</span></div><div class=\"line\"><span class=\"keyword\">var</span></div><div class=\"line\">r,</div><div class=\"line\">arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'1'</span>];</div><div class=\"line\">r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> self.indexOf(element) === index;</div><div class=\"line\">&#125;);<span class=\"comment\">//[\"1\", \"2\", \"3\", \"4\", \"5\"]</span></div></pre></td></tr></table></figure>\n<p><code>sort()</code>方法默认把所有元素先转换为String再以ASCII排序，直接使用对数字排序会有大Bug，可通过自定义方式解决问题。<br><code>sort()</code>方法会直接对Array进行修改，它返回的结果仍是当前Array</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 升序排列</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">a2 = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x &lt; y) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x &gt; y) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;); <span class=\"comment\">// [1, 2, 10, 20]</span></div><div class=\"line\"></div><div class=\"line\">a2 = arr; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">\tnAdd=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;n+=<span class=\"number\">1</span>&#125;;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> f2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> result=f1();</div><div class=\"line\">result(); <span class=\"comment\">// 999</span></div><div class=\"line\">nAdd();</div><div class=\"line\">result(); <span class=\"comment\">// 1000</span></div><div class=\"line\"><span class=\"comment\">// 函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除</span></div></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">x =&gt; x * x</div><div class=\"line\"><span class=\"comment\">// 相当于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this指向obj对象</span></div><div class=\"line\">        <span class=\"keyword\">return</span> fn();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.getAge(); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<h2 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h2><p>generator（生成器）是ES6标准引入的新的数据类型，使用function*定义。一个generator看上去像一个函数，但可以返回多次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//斐波那契数列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fib</span>(<span class=\"params\">min,max</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span></div><div class=\"line\">\t\tt,</div><div class=\"line\">\t\ta = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tb = <span class=\"number\">1</span>,</div><div class=\"line\">\t\tn = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n &lt;= max) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(n &gt;= min)&#123; <span class=\"keyword\">yield</span> a; &#125;</div><div class=\"line\">\t\tt = a + b;</div><div class=\"line\">\t\ta = b;</div><div class=\"line\">\t\tb = t;</div><div class=\"line\">\t\tn ++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> fib(<span class=\"number\">4</span>,<span class=\"number\">5</span>)) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 依次输出2, 3</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对象-1\"><a href=\"#对象-1\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>类型转换和判断需要注意的问题：</p>\n<ul>\n<li><p>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</p>\n</li>\n<li><p>用<code>String()</code>来转换任意类型到<code>string</code>，或者直接调用某个对象的<code>toString()</code>方法；</p>\n</li>\n<li><p>通常不必把任意类型转换为<code>boolean</code>再判断，因为可以直接写<code>if (myVar) {...}</code>；</p>\n</li>\n<li><p><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</p>\n</li>\n<li><p>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</p>\n</li>\n<li><p>判断<code>null</code>请使用<code>myVar === null</code>；</p>\n</li>\n<li><p>判断某个全局变量是否存在用<code>typeof window.myVar === &#39;undefined&#39;</code>；</p>\n</li>\n<li><p>函数内部判断某个变量是否存在用<code>typeof myVar === &#39;undefined&#39;</code>。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//number的toString()要特殊处理</span></div><div class=\"line\"><span class=\"number\">123.</span>.toString(); <span class=\"comment\">// '123', 注意是两个点！</span></div><div class=\"line\">(<span class=\"number\">123</span>).toString(); <span class=\"comment\">// '123'</span></div></pre></td></tr></table></figure>\n<h2 id=\"Date-对象\"><a href=\"#Date-对象\" class=\"headerlink\" title=\"Date 对象\"></a>Date 对象</h2><p>在JavaScript中，Date对象用来表示日期和时间，使用<code>Date()</code>获取系统时间；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">now; <span class=\"comment\">// Mon Feb 27 2017 22:24:10 GMT+0800 (中国标准时间)</span></div><div class=\"line\">now.getFullYear(); <span class=\"comment\">// 2017, 年份</span></div><div class=\"line\">now.getMonth(); <span class=\"comment\">// 1, 月份，注意月份范围是0~11，1表示二月</span></div><div class=\"line\">now.getDate(); <span class=\"comment\">// 27, 表示27号</span></div><div class=\"line\">now.getDay(); <span class=\"comment\">// 1, 表示星期一</span></div><div class=\"line\">now.getHours(); <span class=\"comment\">// 22, 24小时制</span></div><div class=\"line\">now.getMinutes(); <span class=\"comment\">// 24, 分钟</span></div><div class=\"line\">now.getSeconds(); <span class=\"comment\">// 10, 秒</span></div><div class=\"line\">now.getMilliseconds(); <span class=\"comment\">// 264, 毫秒数</span></div><div class=\"line\">now.getTime(); <span class=\"comment\">// 1488205450264, 以number形式表示的时间戳</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1970</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999</span>);</div><div class=\"line\">d; <span class=\"comment\">// Thu Jan 01 1970 07:59:59 GMT+0800 (中国标准时间)</span></div><div class=\"line\">d.getTime(); <span class=\"number\">-1</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h2><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 匹配正常Email地址的表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> MailCheck = <span class=\"regexp\">/^[0-9a-zA-Z\\_\\.]+@[0-9a-zA-Z\\_]+\\.[0-9a-zA-Z\\_]+/</span>;</div><div class=\"line\">MailCheck.exec(<span class=\"string\">'juncaixinchi111#gmail.com'</span>); <span class=\"comment\">// null</span></div><div class=\"line\">MailCheck.exec(<span class=\"string\">'juncaixinchi111@gmail.com'</span>); <span class=\"comment\">// ['juncaixinchi111@gmail.com']</span></div></pre></td></tr></table></figure>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON是JavaScript Object Notation的缩写，它是一种数据交换格式</p>\n<p>使用<code>JSON.stringify()</code>把对象序列化成JSON格式的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">14</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.65</span>,</div><div class=\"line\">    <span class=\"attr\">grade</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"string\">'middle-school'</span>: <span class=\"string\">'\\\"W3C\\\" Middle School'</span>,</div><div class=\"line\">    <span class=\"attr\">skills</span>: [<span class=\"string\">'JavaScript'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'Lisp'</span>]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(xiaoming); <span class=\"comment\">// '&#123;\"name\":\"小明\",\"age\":14,\"gender\":true,\"height\":1.65,\"grade\":null,\"middle-school\":\"\\\"W3C\\\" Middle School\",\"skills\":[\"JavaScript\",\"Java\",\"Python\",\"Lisp\"]&#125;'</span></div></pre></td></tr></table></figure>\n<p>按缩进输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(xiaoming, <span class=\"literal\">null</span>, <span class=\"string\">'  '</span>);</div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"小明\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">14</span>,</div><div class=\"line\">  <span class=\"string\">\"gender\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"string\">\"height\"</span>: <span class=\"number\">1.65</span>,</div><div class=\"line\">  <span class=\"string\">\"grade\"</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"string\">\"middle-school\"</span>: <span class=\"string\">\"\\\"W3C\\\" Middle School\"</span>,</div><div class=\"line\">  <span class=\"string\">\"skills\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"JavaScript\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Java\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Python\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Lisp\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>给对象定义一个<code>toJSON()</code>的方法，直接返回JSON应该序列化的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">14</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.65</span>,</div><div class=\"line\">    <span class=\"attr\">grade</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"string\">'middle-school'</span>: <span class=\"string\">'\\\"W3C\\\" Middle School'</span>,</div><div class=\"line\">    <span class=\"attr\">skills</span>: [<span class=\"string\">'JavaScript'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'Lisp'</span>],</div><div class=\"line\">    <span class=\"attr\">toJSON</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// 只输出name和age，并且改变了key：</span></div><div class=\"line\">            <span class=\"string\">'Name'</span>: <span class=\"keyword\">this</span>.name,</div><div class=\"line\">            <span class=\"string\">'Age'</span>: <span class=\"keyword\">this</span>.age</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(xiaoming); <span class=\"comment\">// '&#123;\"Name\":\"小明\",\"Age\":14&#125;'</span></div></pre></td></tr></table></figure>\n<p>使用<code>JSON.parse()</code>反序列化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"小明\",\"age\":14&#125;'</span>); <span class=\"comment\">// Object &#123;name: '小明', age: 14&#125;</span></div><div class=\"line\"><span class=\"comment\">// 接收一个函数，用来转换解析出的属性</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"小明\",\"age\":14&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 把number * 2:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'name'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value + <span class=\"string\">'同学'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;); <span class=\"comment\">// Object &#123;name: '小明同学', age: 14&#125;</span></div></pre></td></tr></table></figure>","excerpt":"<h1 id=\"学习javascript的笔记\"><a href=\"#学习javascript的笔记\" class=\"headerlink\" title=\"学习javascript的笔记\"></a>学习javascript的笔记</h1><p>主要学习了</p>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\">JavaScript教程</a></p>","more":"<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>多行字符串</p>\n<p><code>这是一个\n多行\n字符串</code>;</p>\n<p><code>toUpperCase()</code>,<code>toLowerCase()</code> 把一个字符串全部变为大写或小写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello'</span>;</div><div class=\"line\">s.toUpperCase(); <span class=\"comment\">// 返回'HELLO'</span></div><div class=\"line\">s.toLowerCase(); <span class=\"comment\">// 返回'hello'</span></div></pre></td></tr></table></figure>\n<p><code>indexOf()</code>搜索指定字符串出现的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello, world'</span>;</div><div class=\"line\">s.indexOf(<span class=\"string\">'world'</span>); <span class=\"comment\">// 返回7</span></div><div class=\"line\">s.indexOf(<span class=\"string\">'World'</span>); <span class=\"comment\">// 没有找到指定的子串，返回-1</span></div></pre></td></tr></table></figure>\n<p><code>substring()</code>返回指定索引区间的子串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello, world'</span></div><div class=\"line\">s.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// 从索引0开始到5（不包括5），返回'hello'</span></div><div class=\"line\">s.substring(<span class=\"number\">7</span>); <span class=\"comment\">// 从索引7开始到结束，返回'world'</span></div></pre></td></tr></table></figure>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>通过<code>Array.length</code>获取数组长度，给length赋一个新的值或索引赋值时索引超过了范围，会导致Array大小的变化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3.14</span>];</div><div class=\"line\">arr.length; <span class=\"comment\">// 3</span></div><div class=\"line\">arr.length = <span class=\"number\">4</span>;</div><div class=\"line\">arr; <span class=\"comment\">// arr变为[1, 2, 3.14, undefined]</span></div><div class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"string\">'x'</span>;</div><div class=\"line\">arr; <span class=\"comment\">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></div></pre></td></tr></table></figure>\n<p>通过<code>indexOf()</code>来搜索Array中一个指定的元素的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"string\">'30'</span>, <span class=\"string\">'xyz'</span>];</div><div class=\"line\">arr.indexOf(<span class=\"number\">10</span>); <span class=\"comment\">// 元素10的索引为0</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">30</span>); <span class=\"comment\">// 元素30没有找到，返回-1</span></div></pre></td></tr></table></figure>\n<p>通过<code>slice()</code>截取Array的部分元素，然后返回一个新的Array</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>); <span class=\"comment\">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></div></pre></td></tr></table></figure>\n<p><code>push()</code>向Array的末尾添加若干元素，<code>pop()</code>则把Array的最后一个元素删除掉,<code>unshift()</code>往Array的头部添加若干元素，<code>shift()</code>则把Array的第一个元素删掉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">arr.push(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>); <span class=\"comment\">// 返回Array新的长度: 4</span></div><div class=\"line\">arr; <span class=\"comment\">// [1, 2, 'A', 'B']</span></div><div class=\"line\">arr.pop(); <span class=\"comment\">// pop()返回'B'</span></div><div class=\"line\">arr; <span class=\"comment\">// [1, 2, 'A']</span></div><div class=\"line\">arr.unshift(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>); <span class=\"comment\">// 返回Array新的长度: 5</span></div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 1, 2, 'A']</span></div><div class=\"line\">arr.shift(); <span class=\"comment\">// 'A'</span></div><div class=\"line\">arr; <span class=\"comment\">// ['B', 1, 2, 'A']</span></div><div class=\"line\">arr = [];</div><div class=\"line\">arr.pop(); <span class=\"comment\">// 空数组继续pop不会报错，而是返回undefined</span></div><div class=\"line\">arr.shift(); <span class=\"comment\">// 空数组继续shift不会报错，而是返回undefined</span></div></pre></td></tr></table></figure>\n<p><code>sort()</code>, <code>reverse()</code>可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认把所有元素先转换为String，再根据ASCII码进行排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'b'</span>];</div><div class=\"line\">arr.sort();</div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 'C', 'b']</span></div><div class=\"line\">arr.reverse(); </div><div class=\"line\">arr; <span class=\"comment\">//['b', C', 'B', 'A']</span></div></pre></td></tr></table></figure>\n<p><code>splice()</code>方法可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Microsoft'</span>, <span class=\"string\">'Apple'</span>, <span class=\"string\">'Yahoo'</span>, <span class=\"string\">'AOL'</span>, <span class=\"string\">'Excite'</span>, <span class=\"string\">'Oracle'</span>];</div><div class=\"line\"><span class=\"comment\">// 从索引2开始删除3个元素,然后再添加两个元素:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只删除,不添加:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>); <span class=\"comment\">// ['Google', 'Facebook']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只添加,不删除:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回[],因为没有删除任何元素</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div></pre></td></tr></table></figure>\n<p><code>concat()</code>方法把当前的Array和另一个Array连接起来，并返回一个新的Array：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">arr.concat(<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// ['A', 'B', 'C', 1, 2, 3, 4]</span></div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 'C']</span></div></pre></td></tr></table></figure>\n<p><code>join()</code>方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">arr.join(<span class=\"string\">'-'</span>); <span class=\"comment\">// 'A-B-C-1-2-3'</span></div><div class=\"line\">arr.join(<span class=\"string\">''</span>); <span class=\"comment\">// 'ABC123'</span></div></pre></td></tr></table></figure>\n<p>如果数组的某个元素又是一个Array，则可以形成多维数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">400</span>, <span class=\"number\">500</span>, <span class=\"number\">600</span>], <span class=\"string\">'-'</span>];</div><div class=\"line\">arr[<span class=\"number\">1</span>][<span class=\"number\">1</span>]; <span class=\"comment\">//500</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">school</span>: <span class=\"string\">'No.1 Middle School'</span>,</div><div class=\"line\">\t<span class=\"attr\">height</span>: <span class=\"number\">1.70</span>,</div><div class=\"line\">\t<span class=\"attr\">weight</span>: <span class=\"number\">65</span>,</div><div class=\"line\">\t<span class=\"attr\">score</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div><div class=\"line\">xiaohong[<span class=\"string\">'middle-school'</span>]; <span class=\"comment\">// 'No.1 Middle School'</span></div><div class=\"line\">xiaohong[<span class=\"string\">'name'</span>]; <span class=\"comment\">// '小红'</span></div><div class=\"line\">xiaohong.name; <span class=\"comment\">// '小红'</span></div><div class=\"line\">xiaoming.age; <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>要检测xiaoming是否拥有某一属性，可以用<code>in</code>操作符。因为<code>toString</code>定义在object对象中，所以xiaoming继承了<code>toString</code>属性；可以用<code>hasOwnProperty()</code>方法判断一个属性是否是xiaoming自身拥有的，而不是继承得到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> xiaoming; <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">// true</span></div><div class=\"line\">xiaoming.hasOwnProperty(<span class=\"string\">'toString'</span>); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><p>使用<code>if () { ... } else { ... }</code>来进行条件判断，<code>else if</code>通常连写在一起，以增加可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'adult'</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">6</span>) &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'teenager'</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'kid'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>for循环最常用的地方是利用索引来遍历数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Apple'</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Microsoft'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> i, x;</div><div class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</div><div class=\"line\">\tx = arr[i];</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>for循环的3个条件都是可以省略的，但必须使用<code>break</code>语句退出循环，否则就是死循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (;;) &#123; <span class=\"comment\">// 将无限循环下去</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>; <span class=\"comment\">// 通过if判断来退出循环</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    x ++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>for ... in</code>循环可以把一个对象的所有属性依次循环出来</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'Jack'</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">\t<span class=\"attr\">city</span>: <span class=\"string\">'Beijing'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> o) &#123;\t</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// 'name', 'age', 'city'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>for ... in</code>循环可以直接循环出Array的索引，但得到索引的是String而不是Number</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(a[i]); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">99</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\tx = x + n;</div><div class=\"line\">\tn = n - <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">x; <span class=\"comment\">// 2500</span></div></pre></td></tr></table></figure>\n<p><code>do { ... } while()</code>循环，它和while循环的唯一区别在于前者是在每次循环完成的时候判断条件，所以至少会执行一次循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\tn = n + <span class=\"number\">1</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (n &lt; <span class=\"number\">100</span>);</div><div class=\"line\">n; <span class=\"comment\">// 100</span></div></pre></td></tr></table></figure>\n<h2 id=\"Map和Set\"><a href=\"#Map和Set\" class=\"headerlink\" title=\"Map和Set\"></a>Map和Set</h2><p><code>Map</code>是一组键值对的结构，具有极快的查找速度，<code>Map</code>具有以下方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> M = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'Michael'</span>, <span class=\"number\">95</span>], [<span class=\"string\">'Bob'</span>, <span class=\"number\">75</span>], [<span class=\"string\">'Tracy'</span>, <span class=\"number\">85</span>]]);</div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(); <span class=\"comment\">// 空Map</span></div><div class=\"line\">m.set(<span class=\"string\">'Adam'</span>, <span class=\"number\">67</span>); <span class=\"comment\">// 添加新的key-value</span></div><div class=\"line\">m.set(<span class=\"string\">'Bob'</span>, <span class=\"number\">59</span>);</div><div class=\"line\">m.has(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 是否存在key 'Adam': true</span></div><div class=\"line\">m.get(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 67</span></div><div class=\"line\">m.delete(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 删除key 'Adam'</span></div><div class=\"line\">m.get(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p><code>Set</code>是一组<code>key</code>的集合，不能重复，重复元素在<code>Set</code>中自动被过滤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"string\">'3'</span>]);</div><div class=\"line\">s; <span class=\"comment\">// Set &#123;1, 2, 3, \"3\"&#125;</span></div><div class=\"line\">s.add(<span class=\"number\">4</span>); <span class=\"comment\">// Set &#123;1, 2, 3, \"3\", 4&#125;</span></div><div class=\"line\">s.delete(<span class=\"number\">2</span>); <span class=\"comment\">// Set &#123;1, 3, \"3\", 4&#125;</span></div><div class=\"line\">s.size; <span class=\"comment\">//4</span></div><div class=\"line\">s.has(<span class=\"number\">3</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h2 id=\"iterable\"><a href=\"#iterable\" class=\"headerlink\" title=\"iterable\"></a>iterable</h2><p><code>for ... of</code>循环来遍历<code>Array</code>、<code>Map</code>和<code>Set</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'x'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'y'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'z'</span>]]);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> a) &#123; <span class=\"comment\">// 遍历Array</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> s) &#123; <span class=\"comment\">// 遍历Set</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> m) &#123; <span class=\"comment\">// 遍历Map</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>] + <span class=\"string\">'&lt;=&gt;'</span> + x[<span class=\"number\">1</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>iterable</code>内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数，以下是Array的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// element: 指向当前元素的值</span></div><div class=\"line\">    <span class=\"comment\">// index: 指向当前索引</span></div><div class=\"line\">    <span class=\"comment\">// array: 指向Array对象本身</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"element: \"</span> + element + <span class=\"string\">\"; index: \"</span> + index + <span class=\"string\">\"; array: \"</span> + array);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]);</div><div class=\"line\">s.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, sameElement, set</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"element: \"</span> + element + <span class=\"string\">\"; sameElement: \"</span> + sameElement + <span class=\"string\">\"; set: \"</span> + set);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'x'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'y'</span>], [<span class=\"number\">3</span>, <span class=\"string\">'z'</span>]]);</div><div class=\"line\">m.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key, map</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"value: \"</span> + value + <span class=\"string\">\"; key: \"</span> + key + <span class=\"string\">\"; map: \"</span> + map);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"函数定义和调用\"><a href=\"#函数定义和调用\" class=\"headerlink\" title=\"函数定义和调用\"></a>函数定义和调用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般定义</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abs</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? x : -x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 匿名函数定义</span></div><div class=\"line\"><span class=\"keyword\">var</span> abs = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x&gt;<span class=\"number\">0</span> ? x : -x;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>利用<code>arguments</code>获取所有传入参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abs</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x !== <span class=\"string\">'number'</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"string\">'Not a number'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</div><div class=\"line\">\t<span class=\"keyword\">return</span> x &gt;= <span class=\"number\">0</span> ? x : -x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用<code>rest</code>来获取任意个参数，需写在最后面，前面加<code>...</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, ...rest</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a = '</span> + a);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'b = '</span> + b);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(rest);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// sum()函数，接收任意个参数并返回它们的和</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, ...rest</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">let</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x) tmp += x;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> rest)&#123;</div><div class=\"line\">\t\ttmp += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##　变量作用域</p>\n<p><code>var</code>定义变量，该变量的作用域为整个函数体。不在任何函数内定义的变量就具有全局作用域，被绑定到全局对象window的一个属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> course = <span class=\"string\">'Learn JavaScript'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(course); <span class=\"comment\">// 'Learn JavaScript'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.course); <span class=\"comment\">// 'Learn JavaScript'</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'you foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// 直接调用foo()</span></div><div class=\"line\"><span class=\"built_in\">window</span>.foo(); <span class=\"comment\">// 通过window.foo()调用</span></div></pre></td></tr></table></figure>\n<p>ES6引入了新的关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明一个块级作用域(for循环等)的变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\tsum += i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES6标准引入了新的具有块级作用域的关键字<code>const</code>来定义常量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14</span>;</div><div class=\"line\">PI = <span class=\"number\">3</span>; <span class=\"comment\">// 某些浏览器不报错，但是无效果！</span></div><div class=\"line\">PI; <span class=\"comment\">// 3.14</span></div></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>在一个对象中绑定函数，称为这个对象的方法，在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">xiaoming.age(); <span class=\"comment\">//2017年则是27</span></div></pre></td></tr></table></figure>\n<p><code>apply()</code>可以指定函数的<code>this</code>的指向</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</div><div class=\"line\">\t<span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">age</span>: getAge</div><div class=\"line\">&#125;;</div><div class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></div><div class=\"line\">getAge.apply(xiaoming, []); <span class=\"comment\">// 25, this指向xiaoming, 参数为空</span></div></pre></td></tr></table></figure>\n<p><code>call()</code>方法与<code>apply()</code>类似</p>\n<ul>\n<li><p>apply()把参数打包成Array再传入；</p>\n</li>\n<li><p>call()把参数按顺序传入。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>]); <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"literal\">null</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>利用<code>apply()</code>动态改变函数的行为，如通过用我们自己的函数替换掉默认的parseInt()的方法统计代码一共调用了多少次parseInt()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> oldParseInt = <span class=\"built_in\">parseInt</span>; <span class=\"comment\">// 保存原函数</span></div><div class=\"line\"><span class=\"built_in\">window</span>.parseInt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tcount += <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> oldParseInt.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 调用原函数</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试:</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>);</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'20'</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> x=<span class=\"number\">0</span>;x&lt;<span class=\"number\">10</span>;x++)&#123;</div><div class=\"line\">\t<span class=\"built_in\">parseInt</span>(<span class=\"string\">'30'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">count; <span class=\"comment\">// 12</span></div></pre></td></tr></table></figure>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p><code>map()</code>方法将array内的每一个元素一次处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">arr.map(pow); <span class=\"comment\">// [1, 4, 9]</span></div><div class=\"line\">arr.map(<span class=\"built_in\">String</span>);<span class=\"comment\">//[\"1\",\"2\",\"3\"]</span></div></pre></td></tr></table></figure>\n<p><code>reduce()</code>方法把一个函数作用在这个Array的[x1, x2, x3…]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</div><div class=\"line\"><span class=\"comment\">// 求和</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;); <span class=\"comment\">// 25</span></div><div class=\"line\"><span class=\"comment\">//将字符串转化为Number的函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">string2int</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.split(<span class=\"string\">\"\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"keyword\">return</span> x<span class=\"number\">-0</span>&#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;<span class=\"keyword\">return</span> x*<span class=\"number\">10</span>+y&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">string2int(<span class=\"string\">\"23434\"</span>);<span class=\"comment\">//23434</span></div></pre></td></tr></table></figure>\n<p><code>filter()</code>方法把传入的函数依次作用于array的每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删掉Array中的空字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s &amp;&amp; s.trim(); <span class=\"comment\">// 注意：IE9以下的版本没有trim()方法</span></div><div class=\"line\">&#125;);</div><div class=\"line\">arr; <span class=\"comment\">// ['A', 'B', 'C']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 回调函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element); <span class=\"comment\">// 依次打印'A', 'B', 'C'</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(index); <span class=\"comment\">// 依次打印0, 1, 2</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(self); <span class=\"comment\">// self就是变量arr</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去除array中的重复元素</span></div><div class=\"line\"><span class=\"keyword\">var</span></div><div class=\"line\">r,</div><div class=\"line\">arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'1'</span>];</div><div class=\"line\">r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, self</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> self.indexOf(element) === index;</div><div class=\"line\">&#125;);<span class=\"comment\">//[\"1\", \"2\", \"3\", \"4\", \"5\"]</span></div></pre></td></tr></table></figure>\n<p><code>sort()</code>方法默认把所有元素先转换为String再以ASCII排序，直接使用对数字排序会有大Bug，可通过自定义方式解决问题。<br><code>sort()</code>方法会直接对Array进行修改，它返回的结果仍是当前Array</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 升序排列</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">a2 = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x &lt; y) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (x &gt; y) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;); <span class=\"comment\">// [1, 2, 10, 20]</span></div><div class=\"line\"></div><div class=\"line\">a2 = arr; <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">\tnAdd=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;n+=<span class=\"number\">1</span>&#125;;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> f2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> result=f1();</div><div class=\"line\">result(); <span class=\"comment\">// 999</span></div><div class=\"line\">nAdd();</div><div class=\"line\">result(); <span class=\"comment\">// 1000</span></div><div class=\"line\"><span class=\"comment\">// 函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除</span></div></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">x =&gt; x * x</div><div class=\"line\"><span class=\"comment\">// 相当于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t<span class=\"attr\">birth</span>: <span class=\"number\">1990</span>,</div><div class=\"line\">\t<span class=\"attr\">getAge</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// 1990</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() - <span class=\"keyword\">this</span>.birth; <span class=\"comment\">// this指向obj对象</span></div><div class=\"line\">        <span class=\"keyword\">return</span> fn();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.getAge(); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<h2 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h2><p>generator（生成器）是ES6标准引入的新的数据类型，使用function*定义。一个generator看上去像一个函数，但可以返回多次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//斐波那契数列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fib</span>(<span class=\"params\">min,max</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span></div><div class=\"line\">\t\tt,</div><div class=\"line\">\t\ta = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tb = <span class=\"number\">1</span>,</div><div class=\"line\">\t\tn = <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (n &lt;= max) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(n &gt;= min)&#123; <span class=\"keyword\">yield</span> a; &#125;</div><div class=\"line\">\t\tt = a + b;</div><div class=\"line\">\t\ta = b;</div><div class=\"line\">\t\tb = t;</div><div class=\"line\">\t\tn ++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> fib(<span class=\"number\">4</span>,<span class=\"number\">5</span>)) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 依次输出2, 3</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对象-1\"><a href=\"#对象-1\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>类型转换和判断需要注意的问题：</p>\n<ul>\n<li><p>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</p>\n</li>\n<li><p>用<code>String()</code>来转换任意类型到<code>string</code>，或者直接调用某个对象的<code>toString()</code>方法；</p>\n</li>\n<li><p>通常不必把任意类型转换为<code>boolean</code>再判断，因为可以直接写<code>if (myVar) {...}</code>；</p>\n</li>\n<li><p><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</p>\n</li>\n<li><p>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</p>\n</li>\n<li><p>判断<code>null</code>请使用<code>myVar === null</code>；</p>\n</li>\n<li><p>判断某个全局变量是否存在用<code>typeof window.myVar === &#39;undefined&#39;</code>；</p>\n</li>\n<li><p>函数内部判断某个变量是否存在用<code>typeof myVar === &#39;undefined&#39;</code>。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//number的toString()要特殊处理</span></div><div class=\"line\"><span class=\"number\">123.</span>.toString(); <span class=\"comment\">// '123', 注意是两个点！</span></div><div class=\"line\">(<span class=\"number\">123</span>).toString(); <span class=\"comment\">// '123'</span></div></pre></td></tr></table></figure>\n<h2 id=\"Date-对象\"><a href=\"#Date-对象\" class=\"headerlink\" title=\"Date 对象\"></a>Date 对象</h2><p>在JavaScript中，Date对象用来表示日期和时间，使用<code>Date()</code>获取系统时间；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">now; <span class=\"comment\">// Mon Feb 27 2017 22:24:10 GMT+0800 (中国标准时间)</span></div><div class=\"line\">now.getFullYear(); <span class=\"comment\">// 2017, 年份</span></div><div class=\"line\">now.getMonth(); <span class=\"comment\">// 1, 月份，注意月份范围是0~11，1表示二月</span></div><div class=\"line\">now.getDate(); <span class=\"comment\">// 27, 表示27号</span></div><div class=\"line\">now.getDay(); <span class=\"comment\">// 1, 表示星期一</span></div><div class=\"line\">now.getHours(); <span class=\"comment\">// 22, 24小时制</span></div><div class=\"line\">now.getMinutes(); <span class=\"comment\">// 24, 分钟</span></div><div class=\"line\">now.getSeconds(); <span class=\"comment\">// 10, 秒</span></div><div class=\"line\">now.getMilliseconds(); <span class=\"comment\">// 264, 毫秒数</span></div><div class=\"line\">now.getTime(); <span class=\"comment\">// 1488205450264, 以number形式表示的时间戳</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1970</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999</span>);</div><div class=\"line\">d; <span class=\"comment\">// Thu Jan 01 1970 07:59:59 GMT+0800 (中国标准时间)</span></div><div class=\"line\">d.getTime(); <span class=\"number\">-1</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h2><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 匹配正常Email地址的表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> MailCheck = <span class=\"regexp\">/^[0-9a-zA-Z\\_\\.]+@[0-9a-zA-Z\\_]+\\.[0-9a-zA-Z\\_]+/</span>;</div><div class=\"line\">MailCheck.exec(<span class=\"string\">'juncaixinchi111#gmail.com'</span>); <span class=\"comment\">// null</span></div><div class=\"line\">MailCheck.exec(<span class=\"string\">'juncaixinchi111@gmail.com'</span>); <span class=\"comment\">// ['juncaixinchi111@gmail.com']</span></div></pre></td></tr></table></figure>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON是JavaScript Object Notation的缩写，它是一种数据交换格式</p>\n<p>使用<code>JSON.stringify()</code>把对象序列化成JSON格式的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">14</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.65</span>,</div><div class=\"line\">    <span class=\"attr\">grade</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"string\">'middle-school'</span>: <span class=\"string\">'\\\"W3C\\\" Middle School'</span>,</div><div class=\"line\">    <span class=\"attr\">skills</span>: [<span class=\"string\">'JavaScript'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'Lisp'</span>]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(xiaoming); <span class=\"comment\">// '&#123;\"name\":\"小明\",\"age\":14,\"gender\":true,\"height\":1.65,\"grade\":null,\"middle-school\":\"\\\"W3C\\\" Middle School\",\"skills\":[\"JavaScript\",\"Java\",\"Python\",\"Lisp\"]&#125;'</span></div></pre></td></tr></table></figure>\n<p>按缩进输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(xiaoming, <span class=\"literal\">null</span>, <span class=\"string\">'  '</span>);</div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"小明\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">14</span>,</div><div class=\"line\">  <span class=\"string\">\"gender\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"string\">\"height\"</span>: <span class=\"number\">1.65</span>,</div><div class=\"line\">  <span class=\"string\">\"grade\"</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"string\">\"middle-school\"</span>: <span class=\"string\">\"\\\"W3C\\\" Middle School\"</span>,</div><div class=\"line\">  <span class=\"string\">\"skills\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"JavaScript\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Java\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Python\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Lisp\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>给对象定义一个<code>toJSON()</code>的方法，直接返回JSON应该序列化的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'小明'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">14</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.65</span>,</div><div class=\"line\">    <span class=\"attr\">grade</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"string\">'middle-school'</span>: <span class=\"string\">'\\\"W3C\\\" Middle School'</span>,</div><div class=\"line\">    <span class=\"attr\">skills</span>: [<span class=\"string\">'JavaScript'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'Lisp'</span>],</div><div class=\"line\">    <span class=\"attr\">toJSON</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// 只输出name和age，并且改变了key：</span></div><div class=\"line\">            <span class=\"string\">'Name'</span>: <span class=\"keyword\">this</span>.name,</div><div class=\"line\">            <span class=\"string\">'Age'</span>: <span class=\"keyword\">this</span>.age</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(xiaoming); <span class=\"comment\">// '&#123;\"Name\":\"小明\",\"Age\":14&#125;'</span></div></pre></td></tr></table></figure>\n<p>使用<code>JSON.parse()</code>反序列化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"小明\",\"age\":14&#125;'</span>); <span class=\"comment\">// Object &#123;name: '小明', age: 14&#125;</span></div><div class=\"line\"><span class=\"comment\">// 接收一个函数，用来转换解析出的属性</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"小明\",\"age\":14&#125;'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 把number * 2:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">'name'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value + <span class=\"string\">'同学'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;); <span class=\"comment\">// Object &#123;name: '小明同学', age: 14&#125;</span></div></pre></td></tr></table></figure>"},{"title":"Lifting-State-Up","date":"2017-03-10T13:25:41.000Z","_content":"\n很多情况下，几个组件之间需要共享state。此时就可以利用提升共同state至附组件的方法来处理，参见：[Lifting State Up](https://facebook.github.io/react/docs/lifting-state-up.html)\n\n<!-- more -->\n\n简单而言就是通过在子组件中使用this.props.state代替this.state，将state托管至父组件，进而共享state。其中原来子组件的this.setState要用this.props.setState或者间接的function代替（如下例子中的handleChange），不过其中要注意使用bind(this)方法。\n\n以下是一个具体的例子：\n\n父组件Calculator.jsx\n\n```jsx\nimport React from 'react'\nimport TemperatureInput from './TemperatureInput'\n\n\nconst BoilingVerdict = (props) => {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>\n  }\n  return <p>The water would not boil.</p>\n}\n\nconst toCelsius = fahrenheit => (fahrenheit - 32) * 5 / 9\n\nconst toFahrenheit = celsius => (celsius * 9 / 5) + 32\n\nconst tryConvert = (value, convert) => {\n  const input = parseFloat(value)\n  if (Number.isNaN(input)) {\n    return ''\n  }\n  const output = convert(input)\n  const rounded = Math.round(output * 1000) / 1000\n  return rounded.toString()\n}\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this)\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this)\n    this.state = { value: '', scale: 'c' }\n  }\n\n  handleCelsiusChange(value) {\n    this.setState({ scale: 'c', value })\n  }\n\n  handleFahrenheitChange(value) {\n    this.setState({ scale: 'f', value })\n  }\n\n  render() {\n    const scale = this.state.scale\n    const value = this.state.value\n    const celsius = scale === 'f' ? tryConvert(value, toCelsius) : value\n    const fahrenheit = scale === 'c' ? tryConvert(value, toFahrenheit) : value\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          value={celsius}\n          onChange={this.handleCelsiusChange}\n        />\n        <TemperatureInput\n          scale=\"f\"\n          value={fahrenheit}\n          onChange={this.handleFahrenheitChange}\n        />\n        <BoilingVerdict\n          celsius={parseFloat(celsius)}\n        />\n      </div>\n    )\n  }\n}\n\n```\n\n子组件TemperatureInput.jsx\n\n```jsx\nimport React from 'react'\n\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n}\n\nexport default class TemperatureInput extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(e) {\n    this.props.onChange(e.target.value)\n  }\n\n  render() {\n    const value = this.props.value\n    const scale = this.props.scale\n    return (\n      <fieldset>\n        <legend>Enter value in {scaleNames[scale]}:</legend>\n        <input\n          value={value}\n          onChange={this.handleChange}\n        />\n      </fieldset>\n    )\n  }\n}\n```\n\n\n代码可见[Github](https://github.com/juncaixinchi/React-DE/tree/master/src/calculator)","source":"_posts/Lifting-State-Up.md","raw":"---\ntitle: Lifting-State-Up\ndate: 2017-03-10 21:25:41\ntags: \n\t- React\n\t- JavaScript\n\t- state\n---\n\n很多情况下，几个组件之间需要共享state。此时就可以利用提升共同state至附组件的方法来处理，参见：[Lifting State Up](https://facebook.github.io/react/docs/lifting-state-up.html)\n\n<!-- more -->\n\n简单而言就是通过在子组件中使用this.props.state代替this.state，将state托管至父组件，进而共享state。其中原来子组件的this.setState要用this.props.setState或者间接的function代替（如下例子中的handleChange），不过其中要注意使用bind(this)方法。\n\n以下是一个具体的例子：\n\n父组件Calculator.jsx\n\n```jsx\nimport React from 'react'\nimport TemperatureInput from './TemperatureInput'\n\n\nconst BoilingVerdict = (props) => {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>\n  }\n  return <p>The water would not boil.</p>\n}\n\nconst toCelsius = fahrenheit => (fahrenheit - 32) * 5 / 9\n\nconst toFahrenheit = celsius => (celsius * 9 / 5) + 32\n\nconst tryConvert = (value, convert) => {\n  const input = parseFloat(value)\n  if (Number.isNaN(input)) {\n    return ''\n  }\n  const output = convert(input)\n  const rounded = Math.round(output * 1000) / 1000\n  return rounded.toString()\n}\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this)\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this)\n    this.state = { value: '', scale: 'c' }\n  }\n\n  handleCelsiusChange(value) {\n    this.setState({ scale: 'c', value })\n  }\n\n  handleFahrenheitChange(value) {\n    this.setState({ scale: 'f', value })\n  }\n\n  render() {\n    const scale = this.state.scale\n    const value = this.state.value\n    const celsius = scale === 'f' ? tryConvert(value, toCelsius) : value\n    const fahrenheit = scale === 'c' ? tryConvert(value, toFahrenheit) : value\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          value={celsius}\n          onChange={this.handleCelsiusChange}\n        />\n        <TemperatureInput\n          scale=\"f\"\n          value={fahrenheit}\n          onChange={this.handleFahrenheitChange}\n        />\n        <BoilingVerdict\n          celsius={parseFloat(celsius)}\n        />\n      </div>\n    )\n  }\n}\n\n```\n\n子组件TemperatureInput.jsx\n\n```jsx\nimport React from 'react'\n\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n}\n\nexport default class TemperatureInput extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(e) {\n    this.props.onChange(e.target.value)\n  }\n\n  render() {\n    const value = this.props.value\n    const scale = this.props.scale\n    return (\n      <fieldset>\n        <legend>Enter value in {scaleNames[scale]}:</legend>\n        <input\n          value={value}\n          onChange={this.handleChange}\n        />\n      </fieldset>\n    )\n  }\n}\n```\n\n\n代码可见[Github](https://github.com/juncaixinchi/React-DE/tree/master/src/calculator)","slug":"Lifting-State-Up","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkp5000b77hxiwyiy6sk","content":"<p>很多情况下，几个组件之间需要共享state。此时就可以利用提升共同state至附组件的方法来处理，参见：<a href=\"https://facebook.github.io/react/docs/lifting-state-up.html\" target=\"_blank\" rel=\"external\">Lifting State Up</a></p>\n<a id=\"more\"></a>\n<p>简单而言就是通过在子组件中使用this.props.state代替this.state，将state托管至父组件，进而共享state。其中原来子组件的this.setState要用this.props.setState或者间接的function代替（如下例子中的handleChange），不过其中要注意使用bind(this)方法。</p>\n<p>以下是一个具体的例子：</p>\n<p>父组件Calculator.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TemperatureInput <span class=\"keyword\">from</span> <span class=\"string\">'./TemperatureInput'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> BoilingVerdict = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (props.celsius &gt;= <span class=\"number\">100</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would not boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> toCelsius = <span class=\"function\"><span class=\"params\">fahrenheit</span> =&gt;</span> (fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> toFahrenheit = <span class=\"function\"><span class=\"params\">celsius</span> =&gt;</span> (celsius * <span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> tryConvert = <span class=\"function\">(<span class=\"params\">value, convert</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> input = <span class=\"built_in\">parseFloat</span>(value)</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(input)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> output = convert(input)</div><div class=\"line\">  <span class=\"keyword\">const</span> rounded = <span class=\"built_in\">Math</span>.round(output * <span class=\"number\">1000</span>) / <span class=\"number\">1000</span></div><div class=\"line\">  <span class=\"keyword\">return</span> rounded.toString()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleCelsiusChange = <span class=\"keyword\">this</span>.handleCelsiusChange.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleFahrenheitChange = <span class=\"keyword\">this</span>.handleFahrenheitChange.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">value</span>: <span class=\"string\">''</span>, <span class=\"attr\">scale</span>: <span class=\"string\">'c'</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleCelsiusChange(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">scale</span>: <span class=\"string\">'c'</span>, value &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleFahrenheitChange(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">scale</span>: <span class=\"string\">'f'</span>, value &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.state.scale</div><div class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.state.value</div><div class=\"line\">    <span class=\"keyword\">const</span> celsius = scale === <span class=\"string\">'f'</span> ? tryConvert(value, toCelsius) : value</div><div class=\"line\">    <span class=\"keyword\">const</span> fahrenheit = scale === <span class=\"string\">'c'</span> ? tryConvert(value, toFahrenheit) : value</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;TemperatureInput</div><div class=\"line\">          scale=\"c\"</div><div class=\"line\">          value=&#123;celsius&#125;</div><div class=\"line\">          onChange=&#123;this.handleCelsiusChange&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">        &lt;TemperatureInput</div><div class=\"line\">          scale=\"f\"</div><div class=\"line\">          value=&#123;fahrenheit&#125;</div><div class=\"line\">          onChange=&#123;this.handleFahrenheitChange&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">        &lt;BoilingVerdict</div><div class=\"line\">          celsius=&#123;parseFloat(celsius)&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>子组件TemperatureInput.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> scaleNames = &#123;</div><div class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">'Celsius'</span>,</div><div class=\"line\">  <span class=\"attr\">f</span>: <span class=\"string\">'Fahrenheit'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleChange(e) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.onChange(e.target.value)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.props.value</div><div class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.props.scale</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Enter value in &#123;scaleNames[scale]&#125;:<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span></div><div class=\"line\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span></div><div class=\"line\">        /&gt;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码可见<a href=\"https://github.com/juncaixinchi/React-DE/tree/master/src/calculator\" target=\"_blank\" rel=\"external\">Github</a></p>\n","excerpt":"<p>很多情况下，几个组件之间需要共享state。此时就可以利用提升共同state至附组件的方法来处理，参见：<a href=\"https://facebook.github.io/react/docs/lifting-state-up.html\">Lifting State Up</a></p>","more":"<p>简单而言就是通过在子组件中使用this.props.state代替this.state，将state托管至父组件，进而共享state。其中原来子组件的this.setState要用this.props.setState或者间接的function代替（如下例子中的handleChange），不过其中要注意使用bind(this)方法。</p>\n<p>以下是一个具体的例子：</p>\n<p>父组件Calculator.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> TemperatureInput <span class=\"keyword\">from</span> <span class=\"string\">'./TemperatureInput'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> BoilingVerdict = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (props.celsius &gt;= <span class=\"number\">100</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The water would not boil.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> toCelsius = <span class=\"function\"><span class=\"params\">fahrenheit</span> =&gt;</span> (fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> toFahrenheit = <span class=\"function\"><span class=\"params\">celsius</span> =&gt;</span> (celsius * <span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> tryConvert = <span class=\"function\">(<span class=\"params\">value, convert</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> input = <span class=\"built_in\">parseFloat</span>(value)</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(input)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> output = convert(input)</div><div class=\"line\">  <span class=\"keyword\">const</span> rounded = <span class=\"built_in\">Math</span>.round(output * <span class=\"number\">1000</span>) / <span class=\"number\">1000</span></div><div class=\"line\">  <span class=\"keyword\">return</span> rounded.toString()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleCelsiusChange = <span class=\"keyword\">this</span>.handleCelsiusChange.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleFahrenheitChange = <span class=\"keyword\">this</span>.handleFahrenheitChange.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">value</span>: <span class=\"string\">''</span>, <span class=\"attr\">scale</span>: <span class=\"string\">'c'</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleCelsiusChange(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">scale</span>: <span class=\"string\">'c'</span>, value &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleFahrenheitChange(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">scale</span>: <span class=\"string\">'f'</span>, value &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.state.scale</div><div class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.state.value</div><div class=\"line\">    <span class=\"keyword\">const</span> celsius = scale === <span class=\"string\">'f'</span> ? tryConvert(value, toCelsius) : value</div><div class=\"line\">    <span class=\"keyword\">const</span> fahrenheit = scale === <span class=\"string\">'c'</span> ? tryConvert(value, toFahrenheit) : value</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;TemperatureInput</div><div class=\"line\">          scale=\"c\"</div><div class=\"line\">          value=&#123;celsius&#125;</div><div class=\"line\">          onChange=&#123;this.handleCelsiusChange&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">        &lt;TemperatureInput</div><div class=\"line\">          scale=\"f\"</div><div class=\"line\">          value=&#123;fahrenheit&#125;</div><div class=\"line\">          onChange=&#123;this.handleFahrenheitChange&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">        &lt;BoilingVerdict</div><div class=\"line\">          celsius=&#123;parseFloat(celsius)&#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>子组件TemperatureInput.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> scaleNames = &#123;</div><div class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">'Celsius'</span>,</div><div class=\"line\">  <span class=\"attr\">f</span>: <span class=\"string\">'Fahrenheit'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemperatureInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props)</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleChange(e) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.onChange(e.target.value)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.props.value</div><div class=\"line\">    <span class=\"keyword\">const</span> scale = <span class=\"keyword\">this</span>.props.scale</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>Enter value in &#123;scaleNames[scale]&#125;:<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></div><div class=\"line\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span></div><div class=\"line\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span></div><div class=\"line\">        /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>代码可见<a href=\"https://github.com/juncaixinchi/React-DE/tree/master/src/calculator\">Github</a></p>"},{"title":"Markdown note","date":"2017-02-12T08:41:46.000Z","_content":"\nMarkdown语法摘要\n===\n\n### 基本格式\n\n标记+空格+内容\n\n<!-- more -->\n\n### 标题\n\n    # 一级标题 #\n    \n    ## 二级标题\n    \n    ### 三级标题\n\n以此类推，共6级标题，后面的\\#可加可不加\n\n或者\n\n    一级标题  \n    ===\n    \n    二级标题  \n    ---\n\n### 列表\n\n    + 无序列表\n    \n    - 无序列表\n    \n    * 无序列表\n    \n    1. 有序列表\n    \n    2. 有序列表\n### 引用\n\n    > 引用\n\nMarkdownPad2快捷键为ctrl+q\n\n### 图片与链接\n\n链接：\n\n    []()\n    [github](https://github.com)\n\n图片：\n\n    ![]()\n    ![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)\n\n实例效果：\n\n[github](https://github.com) ![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)\n\n或者\n\n    This is [an example][id] reference-style link.\n        \n    [id]: http://example.com/  \"Optional Title Here\"\n\n实例:\n\nThis is [an example][id] reference-style link.\n[id]: http://example.com/  \"Optional Title Here\"\n\n### 文本样式\n    \n    *斜体文本*\n    _斜体文本_\n    \n    **粗体文本**\n    __粗体文本__\n\n注意必须前后包围，且不连空格\n\n样式： *斜体文本*  __粗体文本__\n\n### 代码框\n\n使用 ` 符号\n\n    ` code `\n\nTab和空格\n    \n    Tab或4个空格+code\n\n使用```包裹的方式，可加具体语言类型\n\n    ```javascript\n    code\n    ```\n\n### 分割线\n\n    ***\n    * * *\n    ---\n    ___\n\n三个及以上 * 或 - 或 _ ，其间可有空格。\n\n样式：\n\n***\n\n### 需要转义的字符\n\n    \\   反斜线\n    `   反引号\n    *   星号\n    _   底线\n    {}  花括号\n    []  方括号\n    ()  括弧\n    #   井字号\n    +   加号\n    -   减号\n    .   英文句点\n    !   惊叹号","source":"_posts/Markdown-note.md","raw":"---\ntitle: Markdown note\ndate: 2017-02-12 16:41:46\ntags: \n    - Markdown\n    - Cheat-sheet\n---\n\nMarkdown语法摘要\n===\n\n### 基本格式\n\n标记+空格+内容\n\n<!-- more -->\n\n### 标题\n\n    # 一级标题 #\n    \n    ## 二级标题\n    \n    ### 三级标题\n\n以此类推，共6级标题，后面的\\#可加可不加\n\n或者\n\n    一级标题  \n    ===\n    \n    二级标题  \n    ---\n\n### 列表\n\n    + 无序列表\n    \n    - 无序列表\n    \n    * 无序列表\n    \n    1. 有序列表\n    \n    2. 有序列表\n### 引用\n\n    > 引用\n\nMarkdownPad2快捷键为ctrl+q\n\n### 图片与链接\n\n链接：\n\n    []()\n    [github](https://github.com)\n\n图片：\n\n    ![]()\n    ![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)\n\n实例效果：\n\n[github](https://github.com) ![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)\n\n或者\n\n    This is [an example][id] reference-style link.\n        \n    [id]: http://example.com/  \"Optional Title Here\"\n\n实例:\n\nThis is [an example][id] reference-style link.\n[id]: http://example.com/  \"Optional Title Here\"\n\n### 文本样式\n    \n    *斜体文本*\n    _斜体文本_\n    \n    **粗体文本**\n    __粗体文本__\n\n注意必须前后包围，且不连空格\n\n样式： *斜体文本*  __粗体文本__\n\n### 代码框\n\n使用 ` 符号\n\n    ` code `\n\nTab和空格\n    \n    Tab或4个空格+code\n\n使用```包裹的方式，可加具体语言类型\n\n    ```javascript\n    code\n    ```\n\n### 分割线\n\n    ***\n    * * *\n    ---\n    ___\n\n三个及以上 * 或 - 或 _ ，其间可有空格。\n\n样式：\n\n***\n\n### 需要转义的字符\n\n    \\   反斜线\n    `   反引号\n    *   星号\n    _   底线\n    {}  花括号\n    []  方括号\n    ()  括弧\n    #   井字号\n    +   加号\n    -   减号\n    .   英文句点\n    !   惊叹号","slug":"Markdown-note","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkp6000d77hxb76645pm","content":"<h1 id=\"Markdown语法摘要\"><a href=\"#Markdown语法摘要\" class=\"headerlink\" title=\"Markdown语法摘要\"></a>Markdown语法摘要</h1><h3 id=\"基本格式\"><a href=\"#基本格式\" class=\"headerlink\" title=\"基本格式\"></a>基本格式</h3><p>标记+空格+内容</p>\n<a id=\"more\"></a>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><pre><code># 一级标题 #\n\n## 二级标题\n\n### 三级标题\n</code></pre><p>以此类推，共6级标题，后面的#可加可不加</p>\n<p>或者</p>\n<pre><code>一级标题  \n===\n\n二级标题  \n---\n</code></pre><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><pre><code>+ 无序列表\n\n- 无序列表\n\n* 无序列表\n\n1. 有序列表\n\n2. 有序列表\n</code></pre><h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><pre><code>&gt; 引用\n</code></pre><p>MarkdownPad2快捷键为ctrl+q</p>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p>链接：</p>\n<pre><code>[]()\n[github](https://github.com)\n</code></pre><p>图片：</p>\n<pre><code>![]()\n![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)\n</code></pre><p>实例效果：</p>\n<p><a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a> <img src=\"https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico\" alt=\"icon\"></p>\n<p>或者</p>\n<pre><code>This is [an example][id] reference-style link.\n\n[id]: http://example.com/  &quot;Optional Title Here&quot;\n</code></pre><p>实例:</p>\n<p>This is <a href=\"http://example.com/\" title=\"Optional Title Here\" target=\"_blank\" rel=\"external\">an example</a> reference-style link.</p>\n<h3 id=\"文本样式\"><a href=\"#文本样式\" class=\"headerlink\" title=\"文本样式\"></a>文本样式</h3><pre><code>*斜体文本*\n_斜体文本_\n\n**粗体文本**\n__粗体文本__\n</code></pre><p>注意必须前后包围，且不连空格</p>\n<p>样式： <em>斜体文本</em>  <strong>粗体文本</strong></p>\n<h3 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h3><p>使用 ` 符号</p>\n<pre><code>` code `\n</code></pre><p>Tab和空格</p>\n<pre><code>Tab或4个空格+code\n</code></pre><p>使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```javascript</div><div class=\"line\">code</div></pre></td></tr></table></figure></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><pre><code>***\n* * *\n---\n___\n</code></pre><p>三个及以上 * 或 - 或 _ ，其间可有空格。</p>\n<p>样式：</p>\n<hr>\n<h3 id=\"需要转义的字符\"><a href=\"#需要转义的字符\" class=\"headerlink\" title=\"需要转义的字符\"></a>需要转义的字符</h3><pre><code>\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n</code></pre>","excerpt":"<h1 id=\"Markdown语法摘要\"><a href=\"#Markdown语法摘要\" class=\"headerlink\" title=\"Markdown语法摘要\"></a>Markdown语法摘要</h1><h3 id=\"基本格式\"><a href=\"#基本格式\" class=\"headerlink\" title=\"基本格式\"></a>基本格式</h3><p>标记+空格+内容</p>","more":"<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><pre><code># 一级标题 #\n\n## 二级标题\n\n### 三级标题\n</code></pre><p>以此类推，共6级标题，后面的#可加可不加</p>\n<p>或者</p>\n<pre><code>一级标题  \n===\n\n二级标题  \n---\n</code></pre><h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><pre><code>+ 无序列表\n\n- 无序列表\n\n* 无序列表\n\n1. 有序列表\n\n2. 有序列表\n</code></pre><h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><pre><code>&gt; 引用\n</code></pre><p>MarkdownPad2快捷键为ctrl+q</p>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p>链接：</p>\n<pre><code>[]()\n[github](https://github.com)\n</code></pre><p>图片：</p>\n<pre><code>![]()\n![icon](https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico)\n</code></pre><p>实例效果：</p>\n<p><a href=\"https://github.com\">github</a> <img src=\"https://juncaixinchi.github.io/juncaixinchi.xyz/favicon.ico\" alt=\"icon\"></p>\n<p>或者</p>\n<pre><code>This is [an example][id] reference-style link.\n\n[id]: http://example.com/  &quot;Optional Title Here&quot;\n</code></pre><p>实例:</p>\n<p>This is <a href=\"http://example.com/\" title=\"Optional Title Here\">an example</a> reference-style link.</p>\n<h3 id=\"文本样式\"><a href=\"#文本样式\" class=\"headerlink\" title=\"文本样式\"></a>文本样式</h3><pre><code>*斜体文本*\n_斜体文本_\n\n**粗体文本**\n__粗体文本__\n</code></pre><p>注意必须前后包围，且不连空格</p>\n<p>样式： <em>斜体文本</em>  <strong>粗体文本</strong></p>\n<h3 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h3><p>使用 ` 符号</p>\n<pre><code>` code `\n</code></pre><p>Tab和空格</p>\n<pre><code>Tab或4个空格+code\n</code></pre><p>使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```javascript</div><div class=\"line\">code</div></pre></td></tr></table></figure></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><pre><code>***\n* * *\n---\n___\n</code></pre><p>三个及以上 * 或 - 或 _ ，其间可有空格。</p>\n<p>样式：</p>\n<hr>\n<h3 id=\"需要转义的字符\"><a href=\"#需要转义的字符\" class=\"headerlink\" title=\"需要转义的字符\"></a>需要转义的字符</h3><pre><code>\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n</code></pre>"},{"title":"ECMAScript-6-note","date":"2017-03-02T12:38:44.000Z","_content":"\n\n# 学习ES6的笔记\n\nECMAScript 6.0 是JavaScript语言的下一代标准，已经在2015年6月正式发布\n\n主要学习了阮一峰老师的[ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n\n<!-- more -->\n\n## ES6转码器\n\n+ Babel转码器\n\n\t[Babel](https://babeljs.io/)是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，可通过npm安装。同时Babel提供一个[REPL在线编译器](https://babeljs.io/repl/)，可以在线将ES6代码转为ES5代码\n\n+ Traceur转码器\n\n\t[Traceur转码器](https://github.com/google/traceur-compiler)由Google公司开发，也可以将ES6代码转为ES5代码，也可通过[在线编译器](http://google.github.io/traceur-compiler/demo/repl.html)转换代码\n\n## let和const命令\n\n### 1. let命令\n\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效\n\nfor循环的计数器，就很合适使用let命令\n\n```javascript\nfor (let i = 0; i < 10; i++) {}\nconsole.log(i);\n```\n\nlet不存在变量提升，变量应该在声明语句之后才可以使用，且不允许在相同作用域内，重复声明同一个变量\n\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n\n// 报错\nfunction () {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction () {\n  let a = 10;\n  let a = 1;\n}\n```\n\n在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）\n\n```javascript\nvar tmp = 123;\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\ntypeof x; // ReferenceError\nlet x;\n```\n\n### 2.块级作用域\n\nlet实际上为JavaScript新增了块级作用域，{}内部即为一个块级作用域\n\n```javascript\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n```\n\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了\n\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\nES6 引入了块级作用域，明确允许在块级作用域之中声明函数\n\n```javascript\n'use strict';\nif (true) {\n  function f() {}\n}\n```\n\n浏览器环境并一定完全兼容，故在块级作用域内声明函数时，建议用函数表达式，而不是函数声明语句\n\n```javascript\n// 函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n\n### 3.const命令\n\nconst声明一个只读的常量。一旦声明变量，就必须立即初始化，只在声明所在的块级作用域内有效\n\n```javascript\nconst PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n```\n\n对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心\n\n```javascript\nconst foo = {};\nfoo.prop = 123;\n\nfoo.prop\n// 123\n\nfoo = {}; // TypeError: \"foo\" is read-only\n```\n\n如果真的想将对象冻结，应该使用Object.freeze方法\n\n```javascript\nvar constantize = (obj) => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, value) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n```\n\n### 4.顶层对象的属性\n\n+ var命令和function命令声明的全局变量，依旧是顶层对象的属性\n+ let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性\n\n```javascript\nvar a = 1;\n// 如果在Node的REPL环境，可以写成global.a\n// 或者采用通用方法，写成this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n```\n\n### 5.global 对象\n\nES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。\n\n+ 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。\n+ 浏览器和 Web Worker 里面，self也指向顶层对象，但是Node没有self。\n+ Node 里面，顶层对象是global，但其他环境都不支持。\n\n同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。\n\n+ 全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。\n+ 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n+ 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。\n\n综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。\n\n```javascript\n// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n```\n\n## 变量的解构赋值","source":"_posts/ECMAScript-6-note.md","raw":"---\ntitle: ECMAScript-6-note\ndate: 2017-03-02 20:38:44\ntags:\n\t- JavaScript\n\t- ES6\n---\n\n\n# 学习ES6的笔记\n\nECMAScript 6.0 是JavaScript语言的下一代标准，已经在2015年6月正式发布\n\n主要学习了阮一峰老师的[ECMAScript 6 入门](http://es6.ruanyifeng.com/)\n\n<!-- more -->\n\n## ES6转码器\n\n+ Babel转码器\n\n\t[Babel](https://babeljs.io/)是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，可通过npm安装。同时Babel提供一个[REPL在线编译器](https://babeljs.io/repl/)，可以在线将ES6代码转为ES5代码\n\n+ Traceur转码器\n\n\t[Traceur转码器](https://github.com/google/traceur-compiler)由Google公司开发，也可以将ES6代码转为ES5代码，也可通过[在线编译器](http://google.github.io/traceur-compiler/demo/repl.html)转换代码\n\n## let和const命令\n\n### 1. let命令\n\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效\n\nfor循环的计数器，就很合适使用let命令\n\n```javascript\nfor (let i = 0; i < 10; i++) {}\nconsole.log(i);\n```\n\nlet不存在变量提升，变量应该在声明语句之后才可以使用，且不允许在相同作用域内，重复声明同一个变量\n\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n\n// 报错\nfunction () {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction () {\n  let a = 10;\n  let a = 1;\n}\n```\n\n在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）\n\n```javascript\nvar tmp = 123;\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\ntypeof x; // ReferenceError\nlet x;\n```\n\n### 2.块级作用域\n\nlet实际上为JavaScript新增了块级作用域，{}内部即为一个块级作用域\n\n```javascript\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n```\n\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了\n\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\nES6 引入了块级作用域，明确允许在块级作用域之中声明函数\n\n```javascript\n'use strict';\nif (true) {\n  function f() {}\n}\n```\n\n浏览器环境并一定完全兼容，故在块级作用域内声明函数时，建议用函数表达式，而不是函数声明语句\n\n```javascript\n// 函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n```\n\n### 3.const命令\n\nconst声明一个只读的常量。一旦声明变量，就必须立即初始化，只在声明所在的块级作用域内有效\n\n```javascript\nconst PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n```\n\n对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心\n\n```javascript\nconst foo = {};\nfoo.prop = 123;\n\nfoo.prop\n// 123\n\nfoo = {}; // TypeError: \"foo\" is read-only\n```\n\n如果真的想将对象冻结，应该使用Object.freeze方法\n\n```javascript\nvar constantize = (obj) => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, value) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n```\n\n### 4.顶层对象的属性\n\n+ var命令和function命令声明的全局变量，依旧是顶层对象的属性\n+ let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性\n\n```javascript\nvar a = 1;\n// 如果在Node的REPL环境，可以写成global.a\n// 或者采用通用方法，写成this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n```\n\n### 5.global 对象\n\nES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。\n\n+ 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。\n+ 浏览器和 Web Worker 里面，self也指向顶层对象，但是Node没有self。\n+ Node 里面，顶层对象是global，但其他环境都不支持。\n\n同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。\n\n+ 全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。\n+ 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n+ 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。\n\n综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。\n\n```javascript\n// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n```\n\n## 变量的解构赋值","slug":"ECMAScript-6-note","published":1,"updated":"2017-03-21T03:30:53.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkpb000e77hxrdvs3kh5","content":"<h1 id=\"学习ES6的笔记\"><a href=\"#学习ES6的笔记\" class=\"headerlink\" title=\"学习ES6的笔记\"></a>学习ES6的笔记</h1><p>ECMAScript 6.0 是JavaScript语言的下一代标准，已经在2015年6月正式发布</p>\n<p>主要学习了阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a></p>\n<a id=\"more\"></a>\n<h2 id=\"ES6转码器\"><a href=\"#ES6转码器\" class=\"headerlink\" title=\"ES6转码器\"></a>ES6转码器</h2><ul>\n<li><p>Babel转码器</p>\n<p>  <a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a>是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，可通过npm安装。同时Babel提供一个<a href=\"https://babeljs.io/repl/\" target=\"_blank\" rel=\"external\">REPL在线编译器</a>，可以在线将ES6代码转为ES5代码</p>\n</li>\n<li><p>Traceur转码器</p>\n<p>  <a href=\"https://github.com/google/traceur-compiler\" target=\"_blank\" rel=\"external\">Traceur转码器</a>由Google公司开发，也可以将ES6代码转为ES5代码，也可通过<a href=\"http://google.github.io/traceur-compiler/demo/repl.html\" target=\"_blank\" rel=\"external\">在线编译器</a>转换代码</p>\n</li>\n</ul>\n<h2 id=\"let和const命令\"><a href=\"#let和const命令\" class=\"headerlink\" title=\"let和const命令\"></a>let和const命令</h2><h3 id=\"1-let命令\"><a href=\"#1-let命令\" class=\"headerlink\" title=\"1. let命令\"></a>1. let命令</h3><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效</p>\n<p>for循环的计数器，就很合适使用let命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div></pre></td></tr></table></figure>\n<p>let不存在变量提升，变量应该在声明语句之后才可以使用，且不允许在相同作用域内，重复声明同一个变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> x;</div></pre></td></tr></table></figure>\n<h3 id=\"2-块级作用域\"><a href=\"#2-块级作用域\" class=\"headerlink\" title=\"2.块级作用域\"></a>2.块级作用域</h3><p>let实际上为JavaScript新增了块级作用域，{}内部即为一个块级作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 5</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IIFE 写法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 块级作用域写法</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>浏览器环境并一定完全兼容，故在块级作用域内声明函数时，建议用函数表达式，而不是函数声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 函数表达式</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">'secret'</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-const命令\"><a href=\"#3-const命令\" class=\"headerlink\" title=\"3.const命令\"></a>3.const命令</h3><p>const声明一个只读的常量。一旦声明变量，就必须立即初始化，只在声明所在的块级作用域内有效</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</div><div class=\"line\">PI <span class=\"comment\">// 3.1415</span></div><div class=\"line\"></div><div class=\"line\">PI = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure>\n<p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\"></div><div class=\"line\">foo.prop</div><div class=\"line\"><span class=\"comment\">// 123</span></div><div class=\"line\"></div><div class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></div></pre></td></tr></table></figure>\n<p>如果真的想将对象冻结，应该使用Object.freeze方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> constantize = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(obj);</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach( <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'object'</span> ) &#123;</div><div class=\"line\">      constantize( obj[key] );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"4-顶层对象的属性\"><a href=\"#4-顶层对象的属性\" class=\"headerlink\" title=\"4.顶层对象的属性\"></a>4.顶层对象的属性</h3><ul>\n<li>var命令和function命令声明的全局变量，依旧是顶层对象的属性</li>\n<li>let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">// 如果在Node的REPL环境，可以写成global.a</span></div><div class=\"line\"><span class=\"comment\">// 或者采用通用方法，写成this.a</span></div><div class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.b <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<h3 id=\"5-global-对象\"><a href=\"#5-global-对象\" class=\"headerlink\" title=\"5.global 对象\"></a>5.global 对象</h3><p>ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。</p>\n<ul>\n<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是Node没有self。</li>\n<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>\n</ul>\n<p>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。</p>\n<ul>\n<li>全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。</li>\n<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。</li>\n<li>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。</li>\n</ul>\n<p>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 方法一</span></div><div class=\"line\">(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span></div><div class=\"line\">   ? <span class=\"built_in\">window</span></div><div class=\"line\">   : (<span class=\"keyword\">typeof</span> process === <span class=\"string\">'object'</span> &amp;&amp;</div><div class=\"line\">      <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> === <span class=\"string\">'function'</span> &amp;&amp;</div><div class=\"line\">      <span class=\"keyword\">typeof</span> global === <span class=\"string\">'object'</span>)</div><div class=\"line\">     ? global</div><div class=\"line\">     : <span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方法二</span></div><div class=\"line\"><span class=\"keyword\">var</span> getGlobal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> self; &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>; &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> global; &#125;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'unable to locate global object'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h2>","excerpt":"<h1 id=\"学习ES6的笔记\"><a href=\"#学习ES6的笔记\" class=\"headerlink\" title=\"学习ES6的笔记\"></a>学习ES6的笔记</h1><p>ECMAScript 6.0 是JavaScript语言的下一代标准，已经在2015年6月正式发布</p>\n<p>主要学习了阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6 入门</a></p>","more":"<h2 id=\"ES6转码器\"><a href=\"#ES6转码器\" class=\"headerlink\" title=\"ES6转码器\"></a>ES6转码器</h2><ul>\n<li><p>Babel转码器</p>\n<p>  <a href=\"https://babeljs.io/\">Babel</a>是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，可通过npm安装。同时Babel提供一个<a href=\"https://babeljs.io/repl/\">REPL在线编译器</a>，可以在线将ES6代码转为ES5代码</p>\n</li>\n<li><p>Traceur转码器</p>\n<p>  <a href=\"https://github.com/google/traceur-compiler\">Traceur转码器</a>由Google公司开发，也可以将ES6代码转为ES5代码，也可通过<a href=\"http://google.github.io/traceur-compiler/demo/repl.html\">在线编译器</a>转换代码</p>\n</li>\n</ul>\n<h2 id=\"let和const命令\"><a href=\"#let和const命令\" class=\"headerlink\" title=\"let和const命令\"></a>let和const命令</h2><h3 id=\"1-let命令\"><a href=\"#1-let命令\" class=\"headerlink\" title=\"1. let命令\"></a>1. let命令</h3><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效</p>\n<p>for循环的计数器，就很合适使用let命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div></pre></td></tr></table></figure>\n<p>let不存在变量提升，变量应该在声明语句之后才可以使用，且不允许在相同作用域内，重复声明同一个变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> x;</div></pre></td></tr></table></figure>\n<h3 id=\"2-块级作用域\"><a href=\"#2-块级作用域\" class=\"headerlink\" title=\"2.块级作用域\"></a>2.块级作用域</h3><p>let实际上为JavaScript新增了块级作用域，{}内部即为一个块级作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 5</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IIFE 写法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 块级作用域写法</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>浏览器环境并一定完全兼容，故在块级作用域内声明函数时，建议用函数表达式，而不是函数声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 函数表达式</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"string\">'secret'</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-const命令\"><a href=\"#3-const命令\" class=\"headerlink\" title=\"3.const命令\"></a>3.const命令</h3><p>const声明一个只读的常量。一旦声明变量，就必须立即初始化，只在声明所在的块级作用域内有效</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</div><div class=\"line\">PI <span class=\"comment\">// 3.1415</span></div><div class=\"line\"></div><div class=\"line\">PI = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">// TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure>\n<p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\"></div><div class=\"line\">foo.prop</div><div class=\"line\"><span class=\"comment\">// 123</span></div><div class=\"line\"></div><div class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></div></pre></td></tr></table></figure>\n<p>如果真的想将对象冻结，应该使用Object.freeze方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> constantize = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.freeze(obj);</div><div class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach( <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'object'</span> ) &#123;</div><div class=\"line\">      constantize( obj[key] );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"4-顶层对象的属性\"><a href=\"#4-顶层对象的属性\" class=\"headerlink\" title=\"4.顶层对象的属性\"></a>4.顶层对象的属性</h3><ul>\n<li>var命令和function命令声明的全局变量，依旧是顶层对象的属性</li>\n<li>let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">// 如果在Node的REPL环境，可以写成global.a</span></div><div class=\"line\"><span class=\"comment\">// 或者采用通用方法，写成this.a</span></div><div class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.b <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<h3 id=\"5-global-对象\"><a href=\"#5-global-对象\" class=\"headerlink\" title=\"5.global 对象\"></a>5.global 对象</h3><p>ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。</p>\n<ul>\n<li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li>\n<li>浏览器和 Web Worker 里面，self也指向顶层对象，但是Node没有self。</li>\n<li>Node 里面，顶层对象是global，但其他环境都不支持。</li>\n</ul>\n<p>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。</p>\n<ul>\n<li>全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。</li>\n<li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。</li>\n<li>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。</li>\n</ul>\n<p>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 方法一</span></div><div class=\"line\">(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span></div><div class=\"line\">   ? <span class=\"built_in\">window</span></div><div class=\"line\">   : (<span class=\"keyword\">typeof</span> process === <span class=\"string\">'object'</span> &amp;&amp;</div><div class=\"line\">      <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> === <span class=\"string\">'function'</span> &amp;&amp;</div><div class=\"line\">      <span class=\"keyword\">typeof</span> global === <span class=\"string\">'object'</span>)</div><div class=\"line\">     ? global</div><div class=\"line\">     : <span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方法二</span></div><div class=\"line\"><span class=\"keyword\">var</span> getGlobal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> self; &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>; &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> global; &#125;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'unable to locate global object'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h2>"},{"title":"React-Develop-Environment","date":"2017-03-19T12:43:19.000Z","_content":"\n# 搭建React开发环境\n\n搭建基于React+webpack+Babel+Eslint的react开发环境\n\n<!-- more -->\n\n## Package\n\n利用npm下载所有所需软件包\n\n\tnpm install\n\n按照当前项目 node_modules 目录内的安装包情况生成稳定的版本号描述，参考[npm-shrinkwrap](http://tech.meituan.com/npm-shrinkwrap.html)\n\n\tnpm shrinkwrap\n\n安装的软件包列表，`package.json`\n\n```json\n{\n  \"name\": \"Test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --hot\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.23.1\",\n    \"babel-eslint\": \"^7.1.1\",\n    \"babel-loader\": \"^6.4.0\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n    \"babel-preset-es2015\": \"^6.22.0\",\n    \"babel-preset-react\": \"^6.23.0\",\n    \"babel-preset-react-hmre\": \"^1.1.1\",\n    \"babel-preset-stage-2\": \"^6.22.0\",\n    \"css-loader\": \"^0.27.3\",\n    \"debug\": \"^2.6.3\",\n    \"eslint\": \"^3.17.1\",\n    \"eslint-config-airbnb\": \"^14.1.0\",\n    \"eslint-loader\": \"^1.6.3\",\n    \"eslint-plugin-import\": \"^2.2.0\",\n    \"eslint-plugin-jsx-a11y\": \"^4.0.0\",\n    \"eslint-plugin-react\": \"^6.10.0\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"node-sass\": \"^4.5.0\",\n    \"react-tap-event-plugin\": \"^2.0.1\",\n    \"sass-loader\": \"^6.0.3\",\n    \"style-loader\": \"^0.13.2\",\n    \"webpack\": \"^2.2.1\",\n    \"webpack-dev-server\": \"^2.4.1\"\n  },\n  \"dependencies\": {\n    \"marked\": \"^0.3.6\",\n    \"material-ui\": \"^0.17.0\",\n    \"react\": \"^15.4.2\",\n    \"react-dom\": \"^15.4.2\"\n  }\n}\n```\n\n## Babel\n\nBabel 是一个 JavaScript 转换器，它将 JavaScript 变成 JavaScript（现在是将高版本的 ES6/ES7 转换为 ES5）。\n\nBabel的配置文件，`.babelrc`\n\n```json\n{\n  \"presets\": [\"react\", \"es2015\", \"stage-2\"],\n  \"env\": {\n    \"development\": {\n      \"presets\": [\"react-hmre\"]\n    }\n  },\n  \"plugins\": [\"transform-decorators-legacy\"]\n}\n\n```\n## Webpack\n\nwebpack是一个模块打包器，能够把 React 库、JSX 文件和任何其它 JavaScript 的相关部分打包为一个文件。它还能扩展到 CSS（LESS/SASS）文件和应用程序所用的其它类型的素材。其中webpack-dev提供能够热替换的调试工具\n\nWebpack的配置文件,`webpack.config.js`\n\n```js\nconst path = require('path')\nconst HtmlwebpackPlugin = require('html-webpack-plugin')\n\nconst ROOT_PATH = path.resolve(__dirname)\nconst BUILD_PATH = path.resolve(ROOT_PATH, 'public')\nconst APP_PATH = path.resolve(ROOT_PATH, 'src')\nmodule.exports = {\n  entry: {\n    app: path.resolve(APP_PATH, 'app.jsx')\n  },\n  output: {\n    path: path.resolve(ROOT_PATH, BUILD_PATH),\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        include: [\n          path.resolve(ROOT_PATH, 'src')\n        ],\n        loader: 'babel-loader'\n      },\n      {\n        test: /\\.scss$/,\n        include: [\n          path.resolve(ROOT_PATH, 'src')\n        ],\n        loaders: ['style-loader', 'css-loader', 'sass-loader']\n      }\n\n\n    ]\n  },\n  resolve: {\n    modules: ['node_modules', path.join(ROOT_PATH, 'src')],\n    extensions: ['.js', '.jsx']\n  },\n  devtool: 'eval-source-map',\n  devServer: {\n    contentBase: path.join(ROOT_PATH, 'dist'),\n    compress: true,\n    port: 9000,\n    hot: true,\n    inline: true\n  },\n\n\n  plugins: [\n    new HtmlwebpackPlugin({\n      title: 'React Test App'\n    })\n  ]\n}\n\n```\n\n## Eslint\n\nESLint 是一个插件化的javascript 代码检测工具，它可以用于检查常见的JavaScript 代码错误，也可以进行代码风格检查。这里主要以[airbnb](https://github.com/airbnb/javascript)的指南为准，基本规则见[Eslint Rules](http://eslint.cn/docs/rules/)，React相关规则见[React Rules](https://github.com/JasonBoy/javascript/tree/master/react)\n\n检查file.jsx的代码格式\n\n\teslint file.jsx\n\n检查并修改可自动修正的部分（主要是空格与换行等空白的修复）\n\n\teslint --fix file.jsx\n\nEslint的配置文件，`.eslintrc`\n\n```json\n{\n  \"extends\": \"airbnb\",\n  \"parser\": \"babel-eslint\",\n  \"env\": {\n    \"browser\": true,\n    \"node\": true\n  },\n  \"settings\": {\n    \"ecmascript\": 6,\n    \"jsx\": true\n  },\n  \"plugins\": [\n    \"react\",\n    \"jsx-a11y\",\n    \"import\"\n  ],\n  \"rules\": {\n    \"strict\": \"warn\",\n    \"quotes\": \"warn\",\n    \"camelcase\": \"warn\",\n    \"no-underscore-dangle\": \"warn\",\n    \"no-undef\": \"warn\",\n    \"max-len\": \"warn\",\n    \"no-unused-vars\": \"warn\",\n    \"no-unused-expressions\": \"warn\",\n    \"no-shadow\": \"warn\",\n    \"default-case\": \"warn\",\n    \"no-confusing-arrow\": \"warn\",\n    \"no-useless-constructor\": \"warn\",\n    \"no-nested-ternary\": \"off\",\n    \"no-mixed-operators\": \"off\",\n    \"semi\": [\"warn\", \"never\"],\n    \"comma-dangle\": [\"warn\", \"never\"],\n    \"no-plusplus\": [\"warn\", { \"allowForLoopAfterthoughts\": true }],\n    \"import/no-extraneous-dependencies\": \"warn\",\n    \"import/extensions\": [\"warn\", \"never\"],\n    \"react/no-multi-comp\": \"warn\",\n    \"react/prop-types\": \"off\",\n    \"react/prefer-stateless-function\": [\"warn\", { \"ignorePureComponents\": true }]\n    }\n}\n```\n\nGithub项目链接：[React-DE](https://github.com/juncaixinchi/React-DE)","source":"_posts/React-Develop-Environment.md","raw":"---\ntitle: React-Develop-Environment\ndate: 2017-03-19 20:43:19\ntags:\n\t- React\n---\n\n# 搭建React开发环境\n\n搭建基于React+webpack+Babel+Eslint的react开发环境\n\n<!-- more -->\n\n## Package\n\n利用npm下载所有所需软件包\n\n\tnpm install\n\n按照当前项目 node_modules 目录内的安装包情况生成稳定的版本号描述，参考[npm-shrinkwrap](http://tech.meituan.com/npm-shrinkwrap.html)\n\n\tnpm shrinkwrap\n\n安装的软件包列表，`package.json`\n\n```json\n{\n  \"name\": \"Test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --hot\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.23.1\",\n    \"babel-eslint\": \"^7.1.1\",\n    \"babel-loader\": \"^6.4.0\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n    \"babel-preset-es2015\": \"^6.22.0\",\n    \"babel-preset-react\": \"^6.23.0\",\n    \"babel-preset-react-hmre\": \"^1.1.1\",\n    \"babel-preset-stage-2\": \"^6.22.0\",\n    \"css-loader\": \"^0.27.3\",\n    \"debug\": \"^2.6.3\",\n    \"eslint\": \"^3.17.1\",\n    \"eslint-config-airbnb\": \"^14.1.0\",\n    \"eslint-loader\": \"^1.6.3\",\n    \"eslint-plugin-import\": \"^2.2.0\",\n    \"eslint-plugin-jsx-a11y\": \"^4.0.0\",\n    \"eslint-plugin-react\": \"^6.10.0\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"node-sass\": \"^4.5.0\",\n    \"react-tap-event-plugin\": \"^2.0.1\",\n    \"sass-loader\": \"^6.0.3\",\n    \"style-loader\": \"^0.13.2\",\n    \"webpack\": \"^2.2.1\",\n    \"webpack-dev-server\": \"^2.4.1\"\n  },\n  \"dependencies\": {\n    \"marked\": \"^0.3.6\",\n    \"material-ui\": \"^0.17.0\",\n    \"react\": \"^15.4.2\",\n    \"react-dom\": \"^15.4.2\"\n  }\n}\n```\n\n## Babel\n\nBabel 是一个 JavaScript 转换器，它将 JavaScript 变成 JavaScript（现在是将高版本的 ES6/ES7 转换为 ES5）。\n\nBabel的配置文件，`.babelrc`\n\n```json\n{\n  \"presets\": [\"react\", \"es2015\", \"stage-2\"],\n  \"env\": {\n    \"development\": {\n      \"presets\": [\"react-hmre\"]\n    }\n  },\n  \"plugins\": [\"transform-decorators-legacy\"]\n}\n\n```\n## Webpack\n\nwebpack是一个模块打包器，能够把 React 库、JSX 文件和任何其它 JavaScript 的相关部分打包为一个文件。它还能扩展到 CSS（LESS/SASS）文件和应用程序所用的其它类型的素材。其中webpack-dev提供能够热替换的调试工具\n\nWebpack的配置文件,`webpack.config.js`\n\n```js\nconst path = require('path')\nconst HtmlwebpackPlugin = require('html-webpack-plugin')\n\nconst ROOT_PATH = path.resolve(__dirname)\nconst BUILD_PATH = path.resolve(ROOT_PATH, 'public')\nconst APP_PATH = path.resolve(ROOT_PATH, 'src')\nmodule.exports = {\n  entry: {\n    app: path.resolve(APP_PATH, 'app.jsx')\n  },\n  output: {\n    path: path.resolve(ROOT_PATH, BUILD_PATH),\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        include: [\n          path.resolve(ROOT_PATH, 'src')\n        ],\n        loader: 'babel-loader'\n      },\n      {\n        test: /\\.scss$/,\n        include: [\n          path.resolve(ROOT_PATH, 'src')\n        ],\n        loaders: ['style-loader', 'css-loader', 'sass-loader']\n      }\n\n\n    ]\n  },\n  resolve: {\n    modules: ['node_modules', path.join(ROOT_PATH, 'src')],\n    extensions: ['.js', '.jsx']\n  },\n  devtool: 'eval-source-map',\n  devServer: {\n    contentBase: path.join(ROOT_PATH, 'dist'),\n    compress: true,\n    port: 9000,\n    hot: true,\n    inline: true\n  },\n\n\n  plugins: [\n    new HtmlwebpackPlugin({\n      title: 'React Test App'\n    })\n  ]\n}\n\n```\n\n## Eslint\n\nESLint 是一个插件化的javascript 代码检测工具，它可以用于检查常见的JavaScript 代码错误，也可以进行代码风格检查。这里主要以[airbnb](https://github.com/airbnb/javascript)的指南为准，基本规则见[Eslint Rules](http://eslint.cn/docs/rules/)，React相关规则见[React Rules](https://github.com/JasonBoy/javascript/tree/master/react)\n\n检查file.jsx的代码格式\n\n\teslint file.jsx\n\n检查并修改可自动修正的部分（主要是空格与换行等空白的修复）\n\n\teslint --fix file.jsx\n\nEslint的配置文件，`.eslintrc`\n\n```json\n{\n  \"extends\": \"airbnb\",\n  \"parser\": \"babel-eslint\",\n  \"env\": {\n    \"browser\": true,\n    \"node\": true\n  },\n  \"settings\": {\n    \"ecmascript\": 6,\n    \"jsx\": true\n  },\n  \"plugins\": [\n    \"react\",\n    \"jsx-a11y\",\n    \"import\"\n  ],\n  \"rules\": {\n    \"strict\": \"warn\",\n    \"quotes\": \"warn\",\n    \"camelcase\": \"warn\",\n    \"no-underscore-dangle\": \"warn\",\n    \"no-undef\": \"warn\",\n    \"max-len\": \"warn\",\n    \"no-unused-vars\": \"warn\",\n    \"no-unused-expressions\": \"warn\",\n    \"no-shadow\": \"warn\",\n    \"default-case\": \"warn\",\n    \"no-confusing-arrow\": \"warn\",\n    \"no-useless-constructor\": \"warn\",\n    \"no-nested-ternary\": \"off\",\n    \"no-mixed-operators\": \"off\",\n    \"semi\": [\"warn\", \"never\"],\n    \"comma-dangle\": [\"warn\", \"never\"],\n    \"no-plusplus\": [\"warn\", { \"allowForLoopAfterthoughts\": true }],\n    \"import/no-extraneous-dependencies\": \"warn\",\n    \"import/extensions\": [\"warn\", \"never\"],\n    \"react/no-multi-comp\": \"warn\",\n    \"react/prop-types\": \"off\",\n    \"react/prefer-stateless-function\": [\"warn\", { \"ignorePureComponents\": true }]\n    }\n}\n```\n\nGithub项目链接：[React-DE](https://github.com/juncaixinchi/React-DE)","slug":"React-Develop-Environment","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkpf000g77hxcw4u6snr","content":"<h1 id=\"搭建React开发环境\"><a href=\"#搭建React开发环境\" class=\"headerlink\" title=\"搭建React开发环境\"></a>搭建React开发环境</h1><p>搭建基于React+webpack+Babel+Eslint的react开发环境</p>\n<a id=\"more\"></a>\n<h2 id=\"Package\"><a href=\"#Package\" class=\"headerlink\" title=\"Package\"></a>Package</h2><p>利用npm下载所有所需软件包</p>\n<pre><code>npm install\n</code></pre><p>按照当前项目 node_modules 目录内的安装包情况生成稳定的版本号描述，参考<a href=\"http://tech.meituan.com/npm-shrinkwrap.html\" target=\"_blank\" rel=\"external\">npm-shrinkwrap</a></p>\n<pre><code>npm shrinkwrap\n</code></pre><p>安装的软件包列表，<code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Test\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --hot\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [],</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.23.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-eslint\"</span>: <span class=\"string\">\"^7.1.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.4\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.22.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.23.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-react-hmre\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-stage-2\"</span>: <span class=\"string\">\"^6.22.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.27.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"debug\"</span>: <span class=\"string\">\"^2.6.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^3.17.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^14.1.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-loader\"</span>: <span class=\"string\">\"^1.6.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.2.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^4.0.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^6.10.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.28.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.5.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react-tap-event-plugin\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^6.0.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^2.2.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.4.1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"marked\"</span>: <span class=\"string\">\"^0.3.6\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"material-ui\"</span>: <span class=\"string\">\"^0.17.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^15.4.2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^15.4.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel 是一个 JavaScript 转换器，它将 JavaScript 变成 JavaScript（现在是将高版本的 ES6/ES7 转换为 ES5）。</p>\n<p>Babel的配置文件，<code>.babelrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"stage-2\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"development\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"react-hmre\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-decorators-legacy\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><p>webpack是一个模块打包器，能够把 React 库、JSX 文件和任何其它 JavaScript 的相关部分打包为一个文件。它还能扩展到 CSS（LESS/SASS）文件和应用程序所用的其它类型的素材。其中webpack-dev提供能够热替换的调试工具</p>\n<p>Webpack的配置文件,<code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ROOT_PATH = path.resolve(__dirname)</div><div class=\"line\"><span class=\"keyword\">const</span> BUILD_PATH = path.resolve(ROOT_PATH, <span class=\"string\">'public'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> APP_PATH = path.resolve(ROOT_PATH, <span class=\"string\">'src'</span>)</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">app</span>: path.resolve(APP_PATH, <span class=\"string\">'app.jsx'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: path.resolve(ROOT_PATH, BUILD_PATH),</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">rules</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">        <span class=\"attr\">include</span>: [</div><div class=\"line\">          path.resolve(ROOT_PATH, <span class=\"string\">'src'</span>)</div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>,</div><div class=\"line\">        <span class=\"attr\">include</span>: [</div><div class=\"line\">          path.resolve(ROOT_PATH, <span class=\"string\">'src'</span>)</div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">modules</span>: [<span class=\"string\">'node_modules'</span>, path.join(ROOT_PATH, <span class=\"string\">'src'</span>)],</div><div class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">contentBase</span>: path.join(ROOT_PATH, <span class=\"string\">'dist'</span>),</div><div class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</div><div class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">inline</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'React Test App'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Eslint\"><a href=\"#Eslint\" class=\"headerlink\" title=\"Eslint\"></a>Eslint</h2><p>ESLint 是一个插件化的javascript 代码检测工具，它可以用于检查常见的JavaScript 代码错误，也可以进行代码风格检查。这里主要以<a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">airbnb</a>的指南为准，基本规则见<a href=\"http://eslint.cn/docs/rules/\" target=\"_blank\" rel=\"external\">Eslint Rules</a>，React相关规则见<a href=\"https://github.com/JasonBoy/javascript/tree/master/react\" target=\"_blank\" rel=\"external\">React Rules</a></p>\n<p>检查file.jsx的代码格式</p>\n<pre><code>eslint file.jsx\n</code></pre><p>检查并修改可自动修正的部分（主要是空格与换行等空白的修复）</p>\n<pre><code>eslint --fix file.jsx\n</code></pre><p>Eslint的配置文件，<code>.eslintrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"airbnb\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"babel-eslint\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"settings\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"ecmascript\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">    <span class=\"attr\">\"jsx\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"react\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jsx-a11y\"</span>,</div><div class=\"line\">    <span class=\"string\">\"import\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"strict\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"quotes\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"camelcase\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-underscore-dangle\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-undef\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"max-len\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-unused-vars\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-unused-expressions\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-shadow\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"default-case\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-confusing-arrow\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-useless-constructor\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-nested-ternary\"</span>: <span class=\"string\">\"off\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-mixed-operators\"</span>: <span class=\"string\">\"off\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"semi\"</span>: [<span class=\"string\">\"warn\"</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"comma-dangle\"</span>: [<span class=\"string\">\"warn\"</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"no-plusplus\"</span>: [<span class=\"string\">\"warn\"</span>, &#123; <span class=\"attr\">\"allowForLoopAfterthoughts\"</span>: <span class=\"literal\">true</span> &#125;],</div><div class=\"line\">    <span class=\"attr\">\"import/no-extraneous-dependencies\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"import/extensions\"</span>: [<span class=\"string\">\"warn\"</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"react/no-multi-comp\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react/prop-types\"</span>: <span class=\"string\">\"off\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react/prefer-stateless-function\"</span>: [<span class=\"string\">\"warn\"</span>, &#123; <span class=\"attr\">\"ignorePureComponents\"</span>: <span class=\"literal\">true</span> &#125;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Github项目链接：<a href=\"https://github.com/juncaixinchi/React-DE\" target=\"_blank\" rel=\"external\">React-DE</a></p>\n","excerpt":"<h1 id=\"搭建React开发环境\"><a href=\"#搭建React开发环境\" class=\"headerlink\" title=\"搭建React开发环境\"></a>搭建React开发环境</h1><p>搭建基于React+webpack+Babel+Eslint的react开发环境</p>","more":"<h2 id=\"Package\"><a href=\"#Package\" class=\"headerlink\" title=\"Package\"></a>Package</h2><p>利用npm下载所有所需软件包</p>\n<pre><code>npm install\n</code></pre><p>按照当前项目 node_modules 目录内的安装包情况生成稳定的版本号描述，参考<a href=\"http://tech.meituan.com/npm-shrinkwrap.html\">npm-shrinkwrap</a></p>\n<pre><code>npm shrinkwrap\n</code></pre><p>安装的软件包列表，<code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Test\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --hot\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [],</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.23.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-eslint\"</span>: <span class=\"string\">\"^7.1.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.4\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.22.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.23.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-react-hmre\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"babel-preset-stage-2\"</span>: <span class=\"string\">\"^6.22.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.27.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"debug\"</span>: <span class=\"string\">\"^2.6.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^3.17.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^14.1.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-loader\"</span>: <span class=\"string\">\"^1.6.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.2.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^4.0.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^6.10.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.28.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.5.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react-tap-event-plugin\"</span>: <span class=\"string\">\"^2.0.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^6.0.3\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^2.2.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.4.1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"marked\"</span>: <span class=\"string\">\"^0.3.6\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"material-ui\"</span>: <span class=\"string\">\"^0.17.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^15.4.2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^15.4.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel 是一个 JavaScript 转换器，它将 JavaScript 变成 JavaScript（现在是将高版本的 ES6/ES7 转换为 ES5）。</p>\n<p>Babel的配置文件，<code>.babelrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"stage-2\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"development\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"react-hmre\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-decorators-legacy\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><p>webpack是一个模块打包器，能够把 React 库、JSX 文件和任何其它 JavaScript 的相关部分打包为一个文件。它还能扩展到 CSS（LESS/SASS）文件和应用程序所用的其它类型的素材。其中webpack-dev提供能够热替换的调试工具</p>\n<p>Webpack的配置文件,<code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ROOT_PATH = path.resolve(__dirname)</div><div class=\"line\"><span class=\"keyword\">const</span> BUILD_PATH = path.resolve(ROOT_PATH, <span class=\"string\">'public'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> APP_PATH = path.resolve(ROOT_PATH, <span class=\"string\">'src'</span>)</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">app</span>: path.resolve(APP_PATH, <span class=\"string\">'app.jsx'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: path.resolve(ROOT_PATH, BUILD_PATH),</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">rules</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">        <span class=\"attr\">include</span>: [</div><div class=\"line\">          path.resolve(ROOT_PATH, <span class=\"string\">'src'</span>)</div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>,</div><div class=\"line\">        <span class=\"attr\">include</span>: [</div><div class=\"line\">          path.resolve(ROOT_PATH, <span class=\"string\">'src'</span>)</div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">modules</span>: [<span class=\"string\">'node_modules'</span>, path.join(ROOT_PATH, <span class=\"string\">'src'</span>)],</div><div class=\"line\">    <span class=\"attr\">extensions</span>: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">contentBase</span>: path.join(ROOT_PATH, <span class=\"string\">'dist'</span>),</div><div class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</div><div class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">inline</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'React Test App'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Eslint\"><a href=\"#Eslint\" class=\"headerlink\" title=\"Eslint\"></a>Eslint</h2><p>ESLint 是一个插件化的javascript 代码检测工具，它可以用于检查常见的JavaScript 代码错误，也可以进行代码风格检查。这里主要以<a href=\"https://github.com/airbnb/javascript\">airbnb</a>的指南为准，基本规则见<a href=\"http://eslint.cn/docs/rules/\">Eslint Rules</a>，React相关规则见<a href=\"https://github.com/JasonBoy/javascript/tree/master/react\">React Rules</a></p>\n<p>检查file.jsx的代码格式</p>\n<pre><code>eslint file.jsx\n</code></pre><p>检查并修改可自动修正的部分（主要是空格与换行等空白的修复）</p>\n<pre><code>eslint --fix file.jsx\n</code></pre><p>Eslint的配置文件，<code>.eslintrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"airbnb\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"babel-eslint\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"browser\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"settings\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"ecmascript\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">    <span class=\"attr\">\"jsx\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"react\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jsx-a11y\"</span>,</div><div class=\"line\">    <span class=\"string\">\"import\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"strict\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"quotes\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"camelcase\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-underscore-dangle\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-undef\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"max-len\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-unused-vars\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-unused-expressions\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-shadow\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"default-case\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-confusing-arrow\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-useless-constructor\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-nested-ternary\"</span>: <span class=\"string\">\"off\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"no-mixed-operators\"</span>: <span class=\"string\">\"off\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"semi\"</span>: [<span class=\"string\">\"warn\"</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"comma-dangle\"</span>: [<span class=\"string\">\"warn\"</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"no-plusplus\"</span>: [<span class=\"string\">\"warn\"</span>, &#123; <span class=\"attr\">\"allowForLoopAfterthoughts\"</span>: <span class=\"literal\">true</span> &#125;],</div><div class=\"line\">    <span class=\"attr\">\"import/no-extraneous-dependencies\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"import/extensions\"</span>: [<span class=\"string\">\"warn\"</span>, <span class=\"string\">\"never\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"react/no-multi-comp\"</span>: <span class=\"string\">\"warn\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react/prop-types\"</span>: <span class=\"string\">\"off\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"react/prefer-stateless-function\"</span>: [<span class=\"string\">\"warn\"</span>, &#123; <span class=\"attr\">\"ignorePureComponents\"</span>: <span class=\"literal\">true</span> &#125;]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Github项目链接：<a href=\"https://github.com/juncaixinchi/React-DE\">React-DE</a></p>"},{"title":"Simple-Canvas-Game","date":"2017-02-18T15:10:08.000Z","_content":"\n利用HTML5 Canvas制作小游戏的简单教程，详见 [simple_canvas_game](https://github.com/juncaixinchi/simple_canvas_game)\n\n<!-- more -->\n\n## 1. 创建一个Canvas对象\n\n```javascript\n    // Create the canvas\n    var canvas = document.createElement(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    canvas.width = 512;\n    canvas.height = 480;\n    document.body.appendChild(canvas);\n```\n\n我们首先要做的是创建一个canvas对象。可以用JavaScript或HTML来做，都非常简单。此处我用的是JS。当创建了canvas之后，我们就可以获取它的上下文对象（context）、设置尺寸，并且把它加到当前文档中。\n\n## 2. 载入图片\n\n```javascript\n// Background image\nvar bgReady = false;\nvar bgImage = new Image();\nbgImage.onload = function () {\n    bgReady = true;\n};\nbgImage.src = \"images/background.png\";\n```\n\n游戏需要图像，所以让我们载入一些图片吧。我想尽量简单化，所以只用了Image对象来做，当然，还可以将载入图像的功能封装成一个类或别的任何形式。代码中的bgReady用来标识图片是否已完全载入，只有当图片载入完成后，我们才能使用它，如果在载入完成前就对其进行绘制或渲染，JS将会报一个DOM error的错误。\n\n我们会用到三张图片（背景、英雄、怪物），每张图片都需要这样处理。\n\n## 3. 定义游戏要使用的对象\n\n```javascript\n// Game objects\nvar hero = {\n    speed: 256, // movement in pixels per second\n    x: 0,\n    y: 0\n};\nvar monster = {\n    x: 0,\n    y: 0\n};\nvar monstersCaught = 0;\n```\n\n定义一些变量，稍后会用到。hero对象的speed属性表示英雄的移动速度（像素/秒）；monster对象不会移动，所以仅仅具有一对坐标；monstersCaught表示玩家抓住的怪物数量。\n\n## 4. 处理玩家输入\n\n```javascript\n// Handle keyboard controls\nvar keysDown = {};\naddEventListener(\"keydown\", function (e) {\n     keysDown[e.keyCode] = true;\n}, false);\naddEventListener(\"keyup\", function (e) {\n     delete keysDown[e.keyCode];\n}, false);\n```\n\n现在进行输入的处理。（对具有web开发背景的人来说，这是目前为止第一个具有挑战性的部分）对一般的网页来说，当用户开始输入时，可能需要马上开始播放动画或请求数据。但在这里，我们想让游戏逻辑在一个单独的地方对游戏中发生的事情进行处理。为此我们需要将用户输入保存下来以备稍后处理，而不是立即处理。\n\n我们通过简单地将事件对应的键编码（keyCode）保存在keysDown变量中来实现。如果该变量中具有某个键编码，就表示用户目前正按下这个键。简单吧！\n\n## 5. 新游戏\n\n```javascript\n// Reset the game when the player catches a monster\nvar reset = function () {\n     hero.x = canvas.width / 2;\n     hero.y = canvas.height / 2;\n\n     // Throw the monster somewhere on the screen randomly\n     monster.x = 32 + (Math.random() * (canvas.width - 64));\n     monster.y = 32 + (Math.random() * (canvas.height - 64));\n};\n```\n\n通过调用reset函数来开始新游戏。该函数将英雄（即玩家角色）放到屏幕中间，然后随机选择一个位置来安置怪物。\n\n## 6. 更新对象\n\n```javascript\n// Update game objects\nvar update = function (modifier) {\n    if (38 in keysDown) { // Player holding up\n        hero.y -= hero.speed * modifier;\n    }\n    if (40 in keysDown) { // Player holding down\n        hero.y += hero.speed * modifier;\n    }\n    if (37 in keysDown) { // Player holding left\n        hero.x -= hero.speed * modifier;\n    }\n    if (39 in keysDown) { // Player holding right\n        hero.x += hero.speed * modifier;\n    }\n\n    // Are they touching?\n    if (\n        hero.x <= (monster.x + 32)\n            && monster.x <= (hero.x + 32)\n            && hero.y <= (monster.y + 32)\n            && monster.y <= (hero.y + 32)\n    ) {\n         ++monstersCaught;\n         reset();\n    }\n};\n```\n\n这是update函数，游戏每隔一定时间会调用它一次。它所做的第一件事情是检查用户是否按下了上下左右四个箭头键。如果是，就将我们的英雄向相应的方向移动。\n\nupdate有一个modifier参数，这看起来好像有点奇怪。你会在游戏的主函数即main函数中看到它，不过我在这儿先解释一下。modifier参数是一个从1开始的与时间相关的数。如果间隔刚好为1秒时，它的值就会为1，英雄移动的距离即为256像素（英雄的速度为256像素/秒）；而如果间隔是0.5秒，它的值就为0.5，即英雄移动的距离为其速度的一半，以此类推。通常update函数调用的间隔很短，所以modifier的值很小，但用这种方式能够确保不管代码执行的速度怎么样，英雄的移动速度都是相同的。\n\n我们已经实现了根据用户的输入来移动英雄，但我们还可以在移动英雄时对其进行检查，以确定是否有其他事件发生。例如：英雄是否与怪物发生了碰撞——当英雄与怪物发生碰撞时，我们为玩家进行计分（monstersCaught加1）并重置游戏（调用reset函数）。\n\n## 7. 渲染对象\n\n```javascript\n// Draw everything\nvar render = function () {\n    if (bgReady) {\n         ctx.drawImage(bgImage, 0, 0);\n    }\n\n    if (heroReady) {\n         ctx.drawImage(heroImage, hero.x, hero.y);\n    }\n\n    if (monsterReady) {\n         ctx.drawImage(monsterImage, monster.x, monster.y);\n    }\n\n    // Score\n    ctx.fillStyle = \"rgb(250, 250, 250)\";\n    ctx.font = \"24px Helvetica\";\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n    ctx.fillText(\"Goblins caught: \" + monstersCaught, 32, 32);\n};\n```\n\n当你能够看到你的行动时游戏才会变得更有趣，所以让我们在屏幕上绘制吧。首先我们将背景图片绘制到canvas，然后是英雄和怪物。注意顺序很重要，因为任何位于表层的图片都会将其下面的像素覆盖掉。\n\n接下来是文字，这有些不同，我们调用fillText函数显示玩家的分数。因为不需要复杂的动画或者对文字进行移动，所以只是绘制一下就ok了。\n\n## 8. 游戏主循环\n\n```javascript\n// The main game loop\nvar main = function () {\n    var now = Date.now();\n    var delta = now - then;\n\n    update(delta / 1000);\n    render();\n\n    then = now;\n};\n```\n\n游戏的主循环用来控制游戏流程。首先我们要获得当前的时间，这样我们才能计算时间差（自上次循环以来经过的时间）。然后计算modifier的值并交给update（需要将delta除以1000以将其转换为毫秒）。最后调用render并更新记录的时间。\n\n更多关于游戏循环的内容见“Onslaught! Arena Case Study”。\n\n## 9. 开始游戏吧\n\n```javascript\n// Let's play this game!\nreset();\nvar then = Date.now();\nsetInterval(main, 1); // Execute as fast as possible\n```\n\n快完成了，这是最后一段代码。首先调用reset来开始新游戏。（还记得吗，这会将英雄置中并随机安放怪物）。然后将起始时间保存到变量then中并启动游戏的主循环。\nOK！（但愿）你现在已经理解了在HTML5 Canvas中用JS来开发游戏的基础知识了。建议最好是能够自己亲自试一把！\n","source":"_posts/Simple-Canvas-Game.md","raw":"---\ntitle: Simple-Canvas-Game\ndate: 2017-02-18 23:10:08\ntags:\n\t- Canvas\n\t- Game\n\t- Demo\n---\n\n利用HTML5 Canvas制作小游戏的简单教程，详见 [simple_canvas_game](https://github.com/juncaixinchi/simple_canvas_game)\n\n<!-- more -->\n\n## 1. 创建一个Canvas对象\n\n```javascript\n    // Create the canvas\n    var canvas = document.createElement(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    canvas.width = 512;\n    canvas.height = 480;\n    document.body.appendChild(canvas);\n```\n\n我们首先要做的是创建一个canvas对象。可以用JavaScript或HTML来做，都非常简单。此处我用的是JS。当创建了canvas之后，我们就可以获取它的上下文对象（context）、设置尺寸，并且把它加到当前文档中。\n\n## 2. 载入图片\n\n```javascript\n// Background image\nvar bgReady = false;\nvar bgImage = new Image();\nbgImage.onload = function () {\n    bgReady = true;\n};\nbgImage.src = \"images/background.png\";\n```\n\n游戏需要图像，所以让我们载入一些图片吧。我想尽量简单化，所以只用了Image对象来做，当然，还可以将载入图像的功能封装成一个类或别的任何形式。代码中的bgReady用来标识图片是否已完全载入，只有当图片载入完成后，我们才能使用它，如果在载入完成前就对其进行绘制或渲染，JS将会报一个DOM error的错误。\n\n我们会用到三张图片（背景、英雄、怪物），每张图片都需要这样处理。\n\n## 3. 定义游戏要使用的对象\n\n```javascript\n// Game objects\nvar hero = {\n    speed: 256, // movement in pixels per second\n    x: 0,\n    y: 0\n};\nvar monster = {\n    x: 0,\n    y: 0\n};\nvar monstersCaught = 0;\n```\n\n定义一些变量，稍后会用到。hero对象的speed属性表示英雄的移动速度（像素/秒）；monster对象不会移动，所以仅仅具有一对坐标；monstersCaught表示玩家抓住的怪物数量。\n\n## 4. 处理玩家输入\n\n```javascript\n// Handle keyboard controls\nvar keysDown = {};\naddEventListener(\"keydown\", function (e) {\n     keysDown[e.keyCode] = true;\n}, false);\naddEventListener(\"keyup\", function (e) {\n     delete keysDown[e.keyCode];\n}, false);\n```\n\n现在进行输入的处理。（对具有web开发背景的人来说，这是目前为止第一个具有挑战性的部分）对一般的网页来说，当用户开始输入时，可能需要马上开始播放动画或请求数据。但在这里，我们想让游戏逻辑在一个单独的地方对游戏中发生的事情进行处理。为此我们需要将用户输入保存下来以备稍后处理，而不是立即处理。\n\n我们通过简单地将事件对应的键编码（keyCode）保存在keysDown变量中来实现。如果该变量中具有某个键编码，就表示用户目前正按下这个键。简单吧！\n\n## 5. 新游戏\n\n```javascript\n// Reset the game when the player catches a monster\nvar reset = function () {\n     hero.x = canvas.width / 2;\n     hero.y = canvas.height / 2;\n\n     // Throw the monster somewhere on the screen randomly\n     monster.x = 32 + (Math.random() * (canvas.width - 64));\n     monster.y = 32 + (Math.random() * (canvas.height - 64));\n};\n```\n\n通过调用reset函数来开始新游戏。该函数将英雄（即玩家角色）放到屏幕中间，然后随机选择一个位置来安置怪物。\n\n## 6. 更新对象\n\n```javascript\n// Update game objects\nvar update = function (modifier) {\n    if (38 in keysDown) { // Player holding up\n        hero.y -= hero.speed * modifier;\n    }\n    if (40 in keysDown) { // Player holding down\n        hero.y += hero.speed * modifier;\n    }\n    if (37 in keysDown) { // Player holding left\n        hero.x -= hero.speed * modifier;\n    }\n    if (39 in keysDown) { // Player holding right\n        hero.x += hero.speed * modifier;\n    }\n\n    // Are they touching?\n    if (\n        hero.x <= (monster.x + 32)\n            && monster.x <= (hero.x + 32)\n            && hero.y <= (monster.y + 32)\n            && monster.y <= (hero.y + 32)\n    ) {\n         ++monstersCaught;\n         reset();\n    }\n};\n```\n\n这是update函数，游戏每隔一定时间会调用它一次。它所做的第一件事情是检查用户是否按下了上下左右四个箭头键。如果是，就将我们的英雄向相应的方向移动。\n\nupdate有一个modifier参数，这看起来好像有点奇怪。你会在游戏的主函数即main函数中看到它，不过我在这儿先解释一下。modifier参数是一个从1开始的与时间相关的数。如果间隔刚好为1秒时，它的值就会为1，英雄移动的距离即为256像素（英雄的速度为256像素/秒）；而如果间隔是0.5秒，它的值就为0.5，即英雄移动的距离为其速度的一半，以此类推。通常update函数调用的间隔很短，所以modifier的值很小，但用这种方式能够确保不管代码执行的速度怎么样，英雄的移动速度都是相同的。\n\n我们已经实现了根据用户的输入来移动英雄，但我们还可以在移动英雄时对其进行检查，以确定是否有其他事件发生。例如：英雄是否与怪物发生了碰撞——当英雄与怪物发生碰撞时，我们为玩家进行计分（monstersCaught加1）并重置游戏（调用reset函数）。\n\n## 7. 渲染对象\n\n```javascript\n// Draw everything\nvar render = function () {\n    if (bgReady) {\n         ctx.drawImage(bgImage, 0, 0);\n    }\n\n    if (heroReady) {\n         ctx.drawImage(heroImage, hero.x, hero.y);\n    }\n\n    if (monsterReady) {\n         ctx.drawImage(monsterImage, monster.x, monster.y);\n    }\n\n    // Score\n    ctx.fillStyle = \"rgb(250, 250, 250)\";\n    ctx.font = \"24px Helvetica\";\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n    ctx.fillText(\"Goblins caught: \" + monstersCaught, 32, 32);\n};\n```\n\n当你能够看到你的行动时游戏才会变得更有趣，所以让我们在屏幕上绘制吧。首先我们将背景图片绘制到canvas，然后是英雄和怪物。注意顺序很重要，因为任何位于表层的图片都会将其下面的像素覆盖掉。\n\n接下来是文字，这有些不同，我们调用fillText函数显示玩家的分数。因为不需要复杂的动画或者对文字进行移动，所以只是绘制一下就ok了。\n\n## 8. 游戏主循环\n\n```javascript\n// The main game loop\nvar main = function () {\n    var now = Date.now();\n    var delta = now - then;\n\n    update(delta / 1000);\n    render();\n\n    then = now;\n};\n```\n\n游戏的主循环用来控制游戏流程。首先我们要获得当前的时间，这样我们才能计算时间差（自上次循环以来经过的时间）。然后计算modifier的值并交给update（需要将delta除以1000以将其转换为毫秒）。最后调用render并更新记录的时间。\n\n更多关于游戏循环的内容见“Onslaught! Arena Case Study”。\n\n## 9. 开始游戏吧\n\n```javascript\n// Let's play this game!\nreset();\nvar then = Date.now();\nsetInterval(main, 1); // Execute as fast as possible\n```\n\n快完成了，这是最后一段代码。首先调用reset来开始新游戏。（还记得吗，这会将英雄置中并随机安放怪物）。然后将起始时间保存到变量then中并启动游戏的主循环。\nOK！（但愿）你现在已经理解了在HTML5 Canvas中用JS来开发游戏的基础知识了。建议最好是能够自己亲自试一把！\n","slug":"Simple-Canvas-Game","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkph000h77hxmdw3pto2","content":"<p>利用HTML5 Canvas制作小游戏的简单教程，详见 <a href=\"https://github.com/juncaixinchi/simple_canvas_game\" target=\"_blank\" rel=\"external\">simple_canvas_game</a></p>\n<a id=\"more\"></a>\n<h2 id=\"1-创建一个Canvas对象\"><a href=\"#1-创建一个Canvas对象\" class=\"headerlink\" title=\"1. 创建一个Canvas对象\"></a>1. 创建一个Canvas对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Create the canvas</span></div><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</div><div class=\"line\">canvas.width = <span class=\"number\">512</span>;</div><div class=\"line\">canvas.height = <span class=\"number\">480</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(canvas);</div></pre></td></tr></table></figure>\n<p>我们首先要做的是创建一个canvas对象。可以用JavaScript或HTML来做，都非常简单。此处我用的是JS。当创建了canvas之后，我们就可以获取它的上下文对象（context）、设置尺寸，并且把它加到当前文档中。</p>\n<h2 id=\"2-载入图片\"><a href=\"#2-载入图片\" class=\"headerlink\" title=\"2. 载入图片\"></a>2. 载入图片</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Background image</span></div><div class=\"line\"><span class=\"keyword\">var</span> bgReady = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bgImage = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">bgImage.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    bgReady = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">bgImage.src = <span class=\"string\">\"images/background.png\"</span>;</div></pre></td></tr></table></figure>\n<p>游戏需要图像，所以让我们载入一些图片吧。我想尽量简单化，所以只用了Image对象来做，当然，还可以将载入图像的功能封装成一个类或别的任何形式。代码中的bgReady用来标识图片是否已完全载入，只有当图片载入完成后，我们才能使用它，如果在载入完成前就对其进行绘制或渲染，JS将会报一个DOM error的错误。</p>\n<p>我们会用到三张图片（背景、英雄、怪物），每张图片都需要这样处理。</p>\n<h2 id=\"3-定义游戏要使用的对象\"><a href=\"#3-定义游戏要使用的对象\" class=\"headerlink\" title=\"3. 定义游戏要使用的对象\"></a>3. 定义游戏要使用的对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Game objects</span></div><div class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</div><div class=\"line\">    <span class=\"attr\">speed</span>: <span class=\"number\">256</span>, <span class=\"comment\">// movement in pixels per second</span></div><div class=\"line\">    x: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> monster = &#123;</div><div class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> monstersCaught = <span class=\"number\">0</span>;</div></pre></td></tr></table></figure>\n<p>定义一些变量，稍后会用到。hero对象的speed属性表示英雄的移动速度（像素/秒）；monster对象不会移动，所以仅仅具有一对坐标；monstersCaught表示玩家抓住的怪物数量。</p>\n<h2 id=\"4-处理玩家输入\"><a href=\"#4-处理玩家输入\" class=\"headerlink\" title=\"4. 处理玩家输入\"></a>4. 处理玩家输入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Handle keyboard controls</span></div><div class=\"line\"><span class=\"keyword\">var</span> keysDown = &#123;&#125;;</div><div class=\"line\">addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">     keysDown[e.keyCode] = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">addEventListener(<span class=\"string\">\"keyup\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">delete</span> keysDown[e.keyCode];</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>现在进行输入的处理。（对具有web开发背景的人来说，这是目前为止第一个具有挑战性的部分）对一般的网页来说，当用户开始输入时，可能需要马上开始播放动画或请求数据。但在这里，我们想让游戏逻辑在一个单独的地方对游戏中发生的事情进行处理。为此我们需要将用户输入保存下来以备稍后处理，而不是立即处理。</p>\n<p>我们通过简单地将事件对应的键编码（keyCode）保存在keysDown变量中来实现。如果该变量中具有某个键编码，就表示用户目前正按下这个键。简单吧！</p>\n<h2 id=\"5-新游戏\"><a href=\"#5-新游戏\" class=\"headerlink\" title=\"5. 新游戏\"></a>5. 新游戏</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Reset the game when the player catches a monster</span></div><div class=\"line\"><span class=\"keyword\">var</span> reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     hero.x = canvas.width / <span class=\"number\">2</span>;</div><div class=\"line\">     hero.y = canvas.height / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// Throw the monster somewhere on the screen randomly</span></div><div class=\"line\">     monster.x = <span class=\"number\">32</span> + (<span class=\"built_in\">Math</span>.random() * (canvas.width - <span class=\"number\">64</span>));</div><div class=\"line\">     monster.y = <span class=\"number\">32</span> + (<span class=\"built_in\">Math</span>.random() * (canvas.height - <span class=\"number\">64</span>));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>通过调用reset函数来开始新游戏。该函数将英雄（即玩家角色）放到屏幕中间，然后随机选择一个位置来安置怪物。</p>\n<h2 id=\"6-更新对象\"><a href=\"#6-更新对象\" class=\"headerlink\" title=\"6. 更新对象\"></a>6. 更新对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Update game objects</span></div><div class=\"line\"><span class=\"keyword\">var</span> update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">modifier</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">38</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding up</span></div><div class=\"line\">        hero.y -= hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">40</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding down</span></div><div class=\"line\">        hero.y += hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">37</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding left</span></div><div class=\"line\">        hero.x -= hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">39</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding right</span></div><div class=\"line\">        hero.x += hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Are they touching?</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (</div><div class=\"line\">        hero.x &lt;= (monster.x + <span class=\"number\">32</span>)</div><div class=\"line\">            &amp;&amp; monster.x &lt;= (hero.x + <span class=\"number\">32</span>)</div><div class=\"line\">            &amp;&amp; hero.y &lt;= (monster.y + <span class=\"number\">32</span>)</div><div class=\"line\">            &amp;&amp; monster.y &lt;= (hero.y + <span class=\"number\">32</span>)</div><div class=\"line\">    ) &#123;</div><div class=\"line\">         ++monstersCaught;</div><div class=\"line\">         reset();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这是update函数，游戏每隔一定时间会调用它一次。它所做的第一件事情是检查用户是否按下了上下左右四个箭头键。如果是，就将我们的英雄向相应的方向移动。</p>\n<p>update有一个modifier参数，这看起来好像有点奇怪。你会在游戏的主函数即main函数中看到它，不过我在这儿先解释一下。modifier参数是一个从1开始的与时间相关的数。如果间隔刚好为1秒时，它的值就会为1，英雄移动的距离即为256像素（英雄的速度为256像素/秒）；而如果间隔是0.5秒，它的值就为0.5，即英雄移动的距离为其速度的一半，以此类推。通常update函数调用的间隔很短，所以modifier的值很小，但用这种方式能够确保不管代码执行的速度怎么样，英雄的移动速度都是相同的。</p>\n<p>我们已经实现了根据用户的输入来移动英雄，但我们还可以在移动英雄时对其进行检查，以确定是否有其他事件发生。例如：英雄是否与怪物发生了碰撞——当英雄与怪物发生碰撞时，我们为玩家进行计分（monstersCaught加1）并重置游戏（调用reset函数）。</p>\n<h2 id=\"7-渲染对象\"><a href=\"#7-渲染对象\" class=\"headerlink\" title=\"7. 渲染对象\"></a>7. 渲染对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Draw everything</span></div><div class=\"line\"><span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (bgReady) &#123;</div><div class=\"line\">         ctx.drawImage(bgImage, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heroReady) &#123;</div><div class=\"line\">         ctx.drawImage(heroImage, hero.x, hero.y);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (monsterReady) &#123;</div><div class=\"line\">         ctx.drawImage(monsterImage, monster.x, monster.y);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Score</span></div><div class=\"line\">    ctx.fillStyle = <span class=\"string\">\"rgb(250, 250, 250)\"</span>;</div><div class=\"line\">    ctx.font = <span class=\"string\">\"24px Helvetica\"</span>;</div><div class=\"line\">    ctx.textAlign = <span class=\"string\">\"left\"</span>;</div><div class=\"line\">    ctx.textBaseline = <span class=\"string\">\"top\"</span>;</div><div class=\"line\">    ctx.fillText(<span class=\"string\">\"Goblins caught: \"</span> + monstersCaught, <span class=\"number\">32</span>, <span class=\"number\">32</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>当你能够看到你的行动时游戏才会变得更有趣，所以让我们在屏幕上绘制吧。首先我们将背景图片绘制到canvas，然后是英雄和怪物。注意顺序很重要，因为任何位于表层的图片都会将其下面的像素覆盖掉。</p>\n<p>接下来是文字，这有些不同，我们调用fillText函数显示玩家的分数。因为不需要复杂的动画或者对文字进行移动，所以只是绘制一下就ok了。</p>\n<h2 id=\"8-游戏主循环\"><a href=\"#8-游戏主循环\" class=\"headerlink\" title=\"8. 游戏主循环\"></a>8. 游戏主循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The main game loop</span></div><div class=\"line\"><span class=\"keyword\">var</span> main = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">    <span class=\"keyword\">var</span> delta = now - then;</div><div class=\"line\"></div><div class=\"line\">    update(delta / <span class=\"number\">1000</span>);</div><div class=\"line\">    render();</div><div class=\"line\"></div><div class=\"line\">    then = now;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>游戏的主循环用来控制游戏流程。首先我们要获得当前的时间，这样我们才能计算时间差（自上次循环以来经过的时间）。然后计算modifier的值并交给update（需要将delta除以1000以将其转换为毫秒）。最后调用render并更新记录的时间。</p>\n<p>更多关于游戏循环的内容见“Onslaught! Arena Case Study”。</p>\n<h2 id=\"9-开始游戏吧\"><a href=\"#9-开始游戏吧\" class=\"headerlink\" title=\"9. 开始游戏吧\"></a>9. 开始游戏吧</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Let's play this game!</span></div><div class=\"line\">reset();</div><div class=\"line\"><span class=\"keyword\">var</span> then = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">setInterval(main, <span class=\"number\">1</span>); <span class=\"comment\">// Execute as fast as possible</span></div></pre></td></tr></table></figure>\n<p>快完成了，这是最后一段代码。首先调用reset来开始新游戏。（还记得吗，这会将英雄置中并随机安放怪物）。然后将起始时间保存到变量then中并启动游戏的主循环。<br>OK！（但愿）你现在已经理解了在HTML5 Canvas中用JS来开发游戏的基础知识了。建议最好是能够自己亲自试一把！</p>\n","excerpt":"<p>利用HTML5 Canvas制作小游戏的简单教程，详见 <a href=\"https://github.com/juncaixinchi/simple_canvas_game\">simple_canvas_game</a></p>","more":"<h2 id=\"1-创建一个Canvas对象\"><a href=\"#1-创建一个Canvas对象\" class=\"headerlink\" title=\"1. 创建一个Canvas对象\"></a>1. 创建一个Canvas对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Create the canvas</span></div><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</div><div class=\"line\">canvas.width = <span class=\"number\">512</span>;</div><div class=\"line\">canvas.height = <span class=\"number\">480</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(canvas);</div></pre></td></tr></table></figure>\n<p>我们首先要做的是创建一个canvas对象。可以用JavaScript或HTML来做，都非常简单。此处我用的是JS。当创建了canvas之后，我们就可以获取它的上下文对象（context）、设置尺寸，并且把它加到当前文档中。</p>\n<h2 id=\"2-载入图片\"><a href=\"#2-载入图片\" class=\"headerlink\" title=\"2. 载入图片\"></a>2. 载入图片</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Background image</span></div><div class=\"line\"><span class=\"keyword\">var</span> bgReady = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bgImage = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">bgImage.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    bgReady = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">bgImage.src = <span class=\"string\">\"images/background.png\"</span>;</div></pre></td></tr></table></figure>\n<p>游戏需要图像，所以让我们载入一些图片吧。我想尽量简单化，所以只用了Image对象来做，当然，还可以将载入图像的功能封装成一个类或别的任何形式。代码中的bgReady用来标识图片是否已完全载入，只有当图片载入完成后，我们才能使用它，如果在载入完成前就对其进行绘制或渲染，JS将会报一个DOM error的错误。</p>\n<p>我们会用到三张图片（背景、英雄、怪物），每张图片都需要这样处理。</p>\n<h2 id=\"3-定义游戏要使用的对象\"><a href=\"#3-定义游戏要使用的对象\" class=\"headerlink\" title=\"3. 定义游戏要使用的对象\"></a>3. 定义游戏要使用的对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Game objects</span></div><div class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</div><div class=\"line\">    <span class=\"attr\">speed</span>: <span class=\"number\">256</span>, <span class=\"comment\">// movement in pixels per second</span></div><div class=\"line\">    x: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> monster = &#123;</div><div class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> monstersCaught = <span class=\"number\">0</span>;</div></pre></td></tr></table></figure>\n<p>定义一些变量，稍后会用到。hero对象的speed属性表示英雄的移动速度（像素/秒）；monster对象不会移动，所以仅仅具有一对坐标；monstersCaught表示玩家抓住的怪物数量。</p>\n<h2 id=\"4-处理玩家输入\"><a href=\"#4-处理玩家输入\" class=\"headerlink\" title=\"4. 处理玩家输入\"></a>4. 处理玩家输入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Handle keyboard controls</span></div><div class=\"line\"><span class=\"keyword\">var</span> keysDown = &#123;&#125;;</div><div class=\"line\">addEventListener(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">     keysDown[e.keyCode] = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">addEventListener(<span class=\"string\">\"keyup\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">delete</span> keysDown[e.keyCode];</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>现在进行输入的处理。（对具有web开发背景的人来说，这是目前为止第一个具有挑战性的部分）对一般的网页来说，当用户开始输入时，可能需要马上开始播放动画或请求数据。但在这里，我们想让游戏逻辑在一个单独的地方对游戏中发生的事情进行处理。为此我们需要将用户输入保存下来以备稍后处理，而不是立即处理。</p>\n<p>我们通过简单地将事件对应的键编码（keyCode）保存在keysDown变量中来实现。如果该变量中具有某个键编码，就表示用户目前正按下这个键。简单吧！</p>\n<h2 id=\"5-新游戏\"><a href=\"#5-新游戏\" class=\"headerlink\" title=\"5. 新游戏\"></a>5. 新游戏</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Reset the game when the player catches a monster</span></div><div class=\"line\"><span class=\"keyword\">var</span> reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     hero.x = canvas.width / <span class=\"number\">2</span>;</div><div class=\"line\">     hero.y = canvas.height / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// Throw the monster somewhere on the screen randomly</span></div><div class=\"line\">     monster.x = <span class=\"number\">32</span> + (<span class=\"built_in\">Math</span>.random() * (canvas.width - <span class=\"number\">64</span>));</div><div class=\"line\">     monster.y = <span class=\"number\">32</span> + (<span class=\"built_in\">Math</span>.random() * (canvas.height - <span class=\"number\">64</span>));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>通过调用reset函数来开始新游戏。该函数将英雄（即玩家角色）放到屏幕中间，然后随机选择一个位置来安置怪物。</p>\n<h2 id=\"6-更新对象\"><a href=\"#6-更新对象\" class=\"headerlink\" title=\"6. 更新对象\"></a>6. 更新对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Update game objects</span></div><div class=\"line\"><span class=\"keyword\">var</span> update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">modifier</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">38</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding up</span></div><div class=\"line\">        hero.y -= hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">40</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding down</span></div><div class=\"line\">        hero.y += hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">37</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding left</span></div><div class=\"line\">        hero.x -= hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">39</span> <span class=\"keyword\">in</span> keysDown) &#123; <span class=\"comment\">// Player holding right</span></div><div class=\"line\">        hero.x += hero.speed * modifier;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Are they touching?</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (</div><div class=\"line\">        hero.x &lt;= (monster.x + <span class=\"number\">32</span>)</div><div class=\"line\">            &amp;&amp; monster.x &lt;= (hero.x + <span class=\"number\">32</span>)</div><div class=\"line\">            &amp;&amp; hero.y &lt;= (monster.y + <span class=\"number\">32</span>)</div><div class=\"line\">            &amp;&amp; monster.y &lt;= (hero.y + <span class=\"number\">32</span>)</div><div class=\"line\">    ) &#123;</div><div class=\"line\">         ++monstersCaught;</div><div class=\"line\">         reset();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这是update函数，游戏每隔一定时间会调用它一次。它所做的第一件事情是检查用户是否按下了上下左右四个箭头键。如果是，就将我们的英雄向相应的方向移动。</p>\n<p>update有一个modifier参数，这看起来好像有点奇怪。你会在游戏的主函数即main函数中看到它，不过我在这儿先解释一下。modifier参数是一个从1开始的与时间相关的数。如果间隔刚好为1秒时，它的值就会为1，英雄移动的距离即为256像素（英雄的速度为256像素/秒）；而如果间隔是0.5秒，它的值就为0.5，即英雄移动的距离为其速度的一半，以此类推。通常update函数调用的间隔很短，所以modifier的值很小，但用这种方式能够确保不管代码执行的速度怎么样，英雄的移动速度都是相同的。</p>\n<p>我们已经实现了根据用户的输入来移动英雄，但我们还可以在移动英雄时对其进行检查，以确定是否有其他事件发生。例如：英雄是否与怪物发生了碰撞——当英雄与怪物发生碰撞时，我们为玩家进行计分（monstersCaught加1）并重置游戏（调用reset函数）。</p>\n<h2 id=\"7-渲染对象\"><a href=\"#7-渲染对象\" class=\"headerlink\" title=\"7. 渲染对象\"></a>7. 渲染对象</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Draw everything</span></div><div class=\"line\"><span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (bgReady) &#123;</div><div class=\"line\">         ctx.drawImage(bgImage, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heroReady) &#123;</div><div class=\"line\">         ctx.drawImage(heroImage, hero.x, hero.y);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (monsterReady) &#123;</div><div class=\"line\">         ctx.drawImage(monsterImage, monster.x, monster.y);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Score</span></div><div class=\"line\">    ctx.fillStyle = <span class=\"string\">\"rgb(250, 250, 250)\"</span>;</div><div class=\"line\">    ctx.font = <span class=\"string\">\"24px Helvetica\"</span>;</div><div class=\"line\">    ctx.textAlign = <span class=\"string\">\"left\"</span>;</div><div class=\"line\">    ctx.textBaseline = <span class=\"string\">\"top\"</span>;</div><div class=\"line\">    ctx.fillText(<span class=\"string\">\"Goblins caught: \"</span> + monstersCaught, <span class=\"number\">32</span>, <span class=\"number\">32</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>当你能够看到你的行动时游戏才会变得更有趣，所以让我们在屏幕上绘制吧。首先我们将背景图片绘制到canvas，然后是英雄和怪物。注意顺序很重要，因为任何位于表层的图片都会将其下面的像素覆盖掉。</p>\n<p>接下来是文字，这有些不同，我们调用fillText函数显示玩家的分数。因为不需要复杂的动画或者对文字进行移动，所以只是绘制一下就ok了。</p>\n<h2 id=\"8-游戏主循环\"><a href=\"#8-游戏主循环\" class=\"headerlink\" title=\"8. 游戏主循环\"></a>8. 游戏主循环</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The main game loop</span></div><div class=\"line\"><span class=\"keyword\">var</span> main = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">    <span class=\"keyword\">var</span> delta = now - then;</div><div class=\"line\"></div><div class=\"line\">    update(delta / <span class=\"number\">1000</span>);</div><div class=\"line\">    render();</div><div class=\"line\"></div><div class=\"line\">    then = now;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>游戏的主循环用来控制游戏流程。首先我们要获得当前的时间，这样我们才能计算时间差（自上次循环以来经过的时间）。然后计算modifier的值并交给update（需要将delta除以1000以将其转换为毫秒）。最后调用render并更新记录的时间。</p>\n<p>更多关于游戏循环的内容见“Onslaught! Arena Case Study”。</p>\n<h2 id=\"9-开始游戏吧\"><a href=\"#9-开始游戏吧\" class=\"headerlink\" title=\"9. 开始游戏吧\"></a>9. 开始游戏吧</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Let's play this game!</span></div><div class=\"line\">reset();</div><div class=\"line\"><span class=\"keyword\">var</span> then = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">setInterval(main, <span class=\"number\">1</span>); <span class=\"comment\">// Execute as fast as possible</span></div></pre></td></tr></table></figure>\n<p>快完成了，这是最后一段代码。首先调用reset来开始新游戏。（还记得吗，这会将英雄置中并随机安放怪物）。然后将起始时间保存到变量then中并启动游戏的主循环。<br>OK！（但愿）你现在已经理解了在HTML5 Canvas中用JS来开发游戏的基础知识了。建议最好是能够自己亲自试一把！</p>"},{"title":"Vim-Setting","date":"2017-03-18T12:57:18.000Z","_content":"\nVim 是高效的文本编辑器，以下是我整理的日常中经常用到的命令与插件\n\n<!-- more -->\n\n## 基本编辑命令\n\n打开文件file\n\n\tvi file\n\n进入编辑模式\n\t\n\ti\n\n退出编辑模式，进入命令模式\n\n\t<Esc>\n\n保存并退出\n\n\t:wp\n\n强制（不保存）退去\n\n\t:q!\n\n### 文件命令\n\n\n将vim窗口分成双栏并打开新文件\n\n\t:vs newfile\n\n在多栏窗口中切换\n\n\tctrl + w + w\n\n### 移动命令\n\n移动到第一行\n\n\tgg\n\n移动到最后一行\n\n\tG\n\n移动到第7行\n\n\t7gg\n\n### 插入命令\n\n在当前位置生前插入\n\n\ti\n\n在当前行首插入\n\n\tI\n\n在当前行尾插入\n\n\tA\n\n\n在当前行之后插入一行\n\n\to\n\n### 复制、粘贴、删除\n\n拷贝当前行或者之后的7行\n\n\tyy\n\ty7y\n\n粘贴\n\n\tp\n\n删除当前行或者之后的7行\n\n\tdd\n\td7d\n\n### 查找命令\n\n查找text，按n健查找下一个，按N健查找前一个\n\n\t/text\n\n查找光标处的单词\n\n\t*\n\n设置高亮查找到的内容\n\n\t:set hlsearch\n\n全局替换aaa为bbb\n\n\t:%s/aaa/bbb/g\n\n用//注释第3-5行\n\n\t:3,5 s/^/\\/\\/ /g\n\n### 撤销和重做\n\n撤销（Undo）\n\n\tu\n\n重做（Redo），即撤销的撤销\n\n\tCtrl + r\n\n\n### VIM 代码折叠\n\n用缩进表示折叠\n\n\tset foldmethod=indent\n\n全部折叠\n\n\t:set foldlevelstart=0\n\n取消折叠\n\n\t:set foldlevelstart=99\n\n使用空格作为折叠快捷键\n\n\tnnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>\n\n自动加载view，使得上一次折叠的内容可以保存\n\n\n\tau BufWinLeave * silent mkview\n\tau BufWinEnter * silent loadview\n\n\n## 安装插件\n\n+ 首先要安装Vundle\n\n```bash\nmkdir ~/.vim/bundle\n\nmkdir ~/.vim/bundle/Vundle.vim\n\ncd ~/.vim/bundle/Vundle.vim\n\ngit clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n+ 在.vimrc中配置Vundle，加入以下内容\n\n```\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\n\" let Vundle manage Vundle, required\n\" use the command below to install the plugins from the command line\n\" vim +PluginInstall +qall\n\nPlugin 'VundleVim/Vundle.vim'\nPlugin 'vim-syntastic/syntastic'\nPlugin 'Valloric/YouCompleteMe'\nPlugin 'pangloss/vim-javascript'\nPlugin 'mxw/vim-jsx'\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\nsyntax on\n```\n\n+ 在配置文件的Plugin部分添加插件，如插件`vim-jsx`的github链接为 https://github.com/mxw/vim-jsx，于是可以写作\n\n```\n\tPlugin 'mxw/vim-jsx'\n```\n\n然后运行以下代码安装插件\n\n\tvim +PluginInstall +qall\n\n## 配置文件`.vimrc`\n\n```\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\n\" let Vundle manage Vundle, required\n\" use the command below to install the plugins from the command line\n\" vim +PluginInstall +qall\n\nPlugin 'VundleVim/Vundle.vim'\nPlugin 'vim-syntastic/syntastic'\nPlugin 'Valloric/YouCompleteMe'\nPlugin 'pangloss/vim-javascript'\nPlugin 'mxw/vim-jsx'\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\nsyntax on\n\n\" vim-jsx\nlet g:jsx_ext_required = 0\n\n\" syntastic\n\" see more by ':help syntastic'\nlet g:syntastic_javascript_checkers = ['eslint']\nlet g:syntastic_check_on_w = 0\n\n\n\" fold\nset foldmethod=indent\nset foldlevelstart=99\nnnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>\n\n\n\" auto mkview & loadview\nau BufWinLeave * silent mkview\nau BufWinEnter * silent loadview\n\n\" indent set tab = 2 blank space\nset ts=2\nset sw=2\nset expandtab\nset smartindent\nset number\n\n```","source":"_posts/Vim-Setting.md","raw":"---\ntitle: Vim-Setting\ndate: 2017-03-18 20:57:18\ntags: \n\t- Vim\n\t- Linux\n---\n\nVim 是高效的文本编辑器，以下是我整理的日常中经常用到的命令与插件\n\n<!-- more -->\n\n## 基本编辑命令\n\n打开文件file\n\n\tvi file\n\n进入编辑模式\n\t\n\ti\n\n退出编辑模式，进入命令模式\n\n\t<Esc>\n\n保存并退出\n\n\t:wp\n\n强制（不保存）退去\n\n\t:q!\n\n### 文件命令\n\n\n将vim窗口分成双栏并打开新文件\n\n\t:vs newfile\n\n在多栏窗口中切换\n\n\tctrl + w + w\n\n### 移动命令\n\n移动到第一行\n\n\tgg\n\n移动到最后一行\n\n\tG\n\n移动到第7行\n\n\t7gg\n\n### 插入命令\n\n在当前位置生前插入\n\n\ti\n\n在当前行首插入\n\n\tI\n\n在当前行尾插入\n\n\tA\n\n\n在当前行之后插入一行\n\n\to\n\n### 复制、粘贴、删除\n\n拷贝当前行或者之后的7行\n\n\tyy\n\ty7y\n\n粘贴\n\n\tp\n\n删除当前行或者之后的7行\n\n\tdd\n\td7d\n\n### 查找命令\n\n查找text，按n健查找下一个，按N健查找前一个\n\n\t/text\n\n查找光标处的单词\n\n\t*\n\n设置高亮查找到的内容\n\n\t:set hlsearch\n\n全局替换aaa为bbb\n\n\t:%s/aaa/bbb/g\n\n用//注释第3-5行\n\n\t:3,5 s/^/\\/\\/ /g\n\n### 撤销和重做\n\n撤销（Undo）\n\n\tu\n\n重做（Redo），即撤销的撤销\n\n\tCtrl + r\n\n\n### VIM 代码折叠\n\n用缩进表示折叠\n\n\tset foldmethod=indent\n\n全部折叠\n\n\t:set foldlevelstart=0\n\n取消折叠\n\n\t:set foldlevelstart=99\n\n使用空格作为折叠快捷键\n\n\tnnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>\n\n自动加载view，使得上一次折叠的内容可以保存\n\n\n\tau BufWinLeave * silent mkview\n\tau BufWinEnter * silent loadview\n\n\n## 安装插件\n\n+ 首先要安装Vundle\n\n```bash\nmkdir ~/.vim/bundle\n\nmkdir ~/.vim/bundle/Vundle.vim\n\ncd ~/.vim/bundle/Vundle.vim\n\ngit clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n+ 在.vimrc中配置Vundle，加入以下内容\n\n```\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\n\" let Vundle manage Vundle, required\n\" use the command below to install the plugins from the command line\n\" vim +PluginInstall +qall\n\nPlugin 'VundleVim/Vundle.vim'\nPlugin 'vim-syntastic/syntastic'\nPlugin 'Valloric/YouCompleteMe'\nPlugin 'pangloss/vim-javascript'\nPlugin 'mxw/vim-jsx'\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\nsyntax on\n```\n\n+ 在配置文件的Plugin部分添加插件，如插件`vim-jsx`的github链接为 https://github.com/mxw/vim-jsx，于是可以写作\n\n```\n\tPlugin 'mxw/vim-jsx'\n```\n\n然后运行以下代码安装插件\n\n\tvim +PluginInstall +qall\n\n## 配置文件`.vimrc`\n\n```\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\n\" let Vundle manage Vundle, required\n\" use the command below to install the plugins from the command line\n\" vim +PluginInstall +qall\n\nPlugin 'VundleVim/Vundle.vim'\nPlugin 'vim-syntastic/syntastic'\nPlugin 'Valloric/YouCompleteMe'\nPlugin 'pangloss/vim-javascript'\nPlugin 'mxw/vim-jsx'\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\nsyntax on\n\n\" vim-jsx\nlet g:jsx_ext_required = 0\n\n\" syntastic\n\" see more by ':help syntastic'\nlet g:syntastic_javascript_checkers = ['eslint']\nlet g:syntastic_check_on_w = 0\n\n\n\" fold\nset foldmethod=indent\nset foldlevelstart=99\nnnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>\n\n\n\" auto mkview & loadview\nau BufWinLeave * silent mkview\nau BufWinEnter * silent loadview\n\n\" indent set tab = 2 blank space\nset ts=2\nset sw=2\nset expandtab\nset smartindent\nset number\n\n```","slug":"Vim-Setting","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkpj000j77hxh41hom27","content":"<p>Vim 是高效的文本编辑器，以下是我整理的日常中经常用到的命令与插件</p>\n<a id=\"more\"></a>\n<h2 id=\"基本编辑命令\"><a href=\"#基本编辑命令\" class=\"headerlink\" title=\"基本编辑命令\"></a>基本编辑命令</h2><p>打开文件file</p>\n<pre><code>vi file\n</code></pre><p>进入编辑模式</p>\n<pre><code>i\n</code></pre><p>退出编辑模式，进入命令模式</p>\n<pre><code>&lt;Esc&gt;\n</code></pre><p>保存并退出</p>\n<pre><code>:wp\n</code></pre><p>强制（不保存）退去</p>\n<pre><code>:q!\n</code></pre><h3 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h3><p>将vim窗口分成双栏并打开新文件</p>\n<pre><code>:vs newfile\n</code></pre><p>在多栏窗口中切换</p>\n<pre><code>ctrl + w + w\n</code></pre><h3 id=\"移动命令\"><a href=\"#移动命令\" class=\"headerlink\" title=\"移动命令\"></a>移动命令</h3><p>移动到第一行</p>\n<pre><code>gg\n</code></pre><p>移动到最后一行</p>\n<pre><code>G\n</code></pre><p>移动到第7行</p>\n<pre><code>7gg\n</code></pre><h3 id=\"插入命令\"><a href=\"#插入命令\" class=\"headerlink\" title=\"插入命令\"></a>插入命令</h3><p>在当前位置生前插入</p>\n<pre><code>i\n</code></pre><p>在当前行首插入</p>\n<pre><code>I\n</code></pre><p>在当前行尾插入</p>\n<pre><code>A\n</code></pre><p>在当前行之后插入一行</p>\n<pre><code>o\n</code></pre><h3 id=\"复制、粘贴、删除\"><a href=\"#复制、粘贴、删除\" class=\"headerlink\" title=\"复制、粘贴、删除\"></a>复制、粘贴、删除</h3><p>拷贝当前行或者之后的7行</p>\n<pre><code>yy\ny7y\n</code></pre><p>粘贴</p>\n<pre><code>p\n</code></pre><p>删除当前行或者之后的7行</p>\n<pre><code>dd\nd7d\n</code></pre><h3 id=\"查找命令\"><a href=\"#查找命令\" class=\"headerlink\" title=\"查找命令\"></a>查找命令</h3><p>查找text，按n健查找下一个，按N健查找前一个</p>\n<pre><code>/text\n</code></pre><p>查找光标处的单词</p>\n<pre><code>*\n</code></pre><p>设置高亮查找到的内容</p>\n<pre><code>:set hlsearch\n</code></pre><p>全局替换aaa为bbb</p>\n<pre><code>:%s/aaa/bbb/g\n</code></pre><p>用//注释第3-5行</p>\n<pre><code>:3,5 s/^/\\/\\/ /g\n</code></pre><h3 id=\"撤销和重做\"><a href=\"#撤销和重做\" class=\"headerlink\" title=\"撤销和重做\"></a>撤销和重做</h3><p>撤销（Undo）</p>\n<pre><code>u\n</code></pre><p>重做（Redo），即撤销的撤销</p>\n<pre><code>Ctrl + r\n</code></pre><h3 id=\"VIM-代码折叠\"><a href=\"#VIM-代码折叠\" class=\"headerlink\" title=\"VIM 代码折叠\"></a>VIM 代码折叠</h3><p>用缩进表示折叠</p>\n<pre><code>set foldmethod=indent\n</code></pre><p>全部折叠</p>\n<pre><code>:set foldlevelstart=0\n</code></pre><p>取消折叠</p>\n<pre><code>:set foldlevelstart=99\n</code></pre><p>使用空格作为折叠快捷键</p>\n<pre><code>nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;\n</code></pre><p>自动加载view，使得上一次折叠的内容可以保存</p>\n<pre><code>au BufWinLeave * silent mkview\nau BufWinEnter * silent loadview\n</code></pre><h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><ul>\n<li>首先要安装Vundle</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ~/.vim/bundle</div><div class=\"line\"></div><div class=\"line\">mkdir ~/.vim/bundle/Vundle.vim</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> ~/.vim/bundle/Vundle.vim</div><div class=\"line\"></div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>\n<ul>\n<li>在.vimrc中配置Vundle，加入以下内容</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible              &quot; be iMproved, required</div><div class=\"line\">filetype off                  &quot; required</div><div class=\"line\"></div><div class=\"line\">&quot; set the runtime path to include Vundle and initialize</div><div class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</div><div class=\"line\">call vundle#begin()</div><div class=\"line\"></div><div class=\"line\">&quot; let Vundle manage Vundle, required</div><div class=\"line\">&quot; use the command below to install the plugins from the command line</div><div class=\"line\">&quot; vim +PluginInstall +qall</div><div class=\"line\"></div><div class=\"line\">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class=\"line\">Plugin &apos;vim-syntastic/syntastic&apos;</div><div class=\"line\">Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class=\"line\">Plugin &apos;pangloss/vim-javascript&apos;</div><div class=\"line\">Plugin &apos;mxw/vim-jsx&apos;</div><div class=\"line\"></div><div class=\"line\">&quot; All of your Plugins must be added before the following line</div><div class=\"line\">call vundle#end()            &quot; required</div><div class=\"line\">filetype plugin indent on    &quot; required</div><div class=\"line\"></div><div class=\"line\">syntax on</div></pre></td></tr></table></figure>\n<ul>\n<li>在配置文件的Plugin部分添加插件，如插件<code>vim-jsx</code>的github链接为 <a href=\"https://github.com/mxw/vim-jsx，于是可以写作\" target=\"_blank\" rel=\"external\">https://github.com/mxw/vim-jsx，于是可以写作</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin &apos;mxw/vim-jsx&apos;</div></pre></td></tr></table></figure>\n<p>然后运行以下代码安装插件</p>\n<pre><code>vim +PluginInstall +qall\n</code></pre><h2 id=\"配置文件-vimrc\"><a href=\"#配置文件-vimrc\" class=\"headerlink\" title=\"配置文件.vimrc\"></a>配置文件<code>.vimrc</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible              &quot; be iMproved, required</div><div class=\"line\">filetype off                  &quot; required</div><div class=\"line\"></div><div class=\"line\">&quot; set the runtime path to include Vundle and initialize</div><div class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</div><div class=\"line\">call vundle#begin()</div><div class=\"line\"></div><div class=\"line\">&quot; let Vundle manage Vundle, required</div><div class=\"line\">&quot; use the command below to install the plugins from the command line</div><div class=\"line\">&quot; vim +PluginInstall +qall</div><div class=\"line\"></div><div class=\"line\">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class=\"line\">Plugin &apos;vim-syntastic/syntastic&apos;</div><div class=\"line\">Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class=\"line\">Plugin &apos;pangloss/vim-javascript&apos;</div><div class=\"line\">Plugin &apos;mxw/vim-jsx&apos;</div><div class=\"line\"></div><div class=\"line\">&quot; All of your Plugins must be added before the following line</div><div class=\"line\">call vundle#end()            &quot; required</div><div class=\"line\">filetype plugin indent on    &quot; required</div><div class=\"line\"></div><div class=\"line\">syntax on</div><div class=\"line\"></div><div class=\"line\">&quot; vim-jsx</div><div class=\"line\">let g:jsx_ext_required = 0</div><div class=\"line\"></div><div class=\"line\">&quot; syntastic</div><div class=\"line\">&quot; see more by &apos;:help syntastic&apos;</div><div class=\"line\">let g:syntastic_javascript_checkers = [&apos;eslint&apos;]</div><div class=\"line\">let g:syntastic_check_on_w = 0</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&quot; fold</div><div class=\"line\">set foldmethod=indent</div><div class=\"line\">set foldlevelstart=99</div><div class=\"line\">nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&quot; auto mkview &amp; loadview</div><div class=\"line\">au BufWinLeave * silent mkview</div><div class=\"line\">au BufWinEnter * silent loadview</div><div class=\"line\"></div><div class=\"line\">&quot; indent set tab = 2 blank space</div><div class=\"line\">set ts=2</div><div class=\"line\">set sw=2</div><div class=\"line\">set expandtab</div><div class=\"line\">set smartindent</div><div class=\"line\">set number</div></pre></td></tr></table></figure>","excerpt":"<p>Vim 是高效的文本编辑器，以下是我整理的日常中经常用到的命令与插件</p>","more":"<h2 id=\"基本编辑命令\"><a href=\"#基本编辑命令\" class=\"headerlink\" title=\"基本编辑命令\"></a>基本编辑命令</h2><p>打开文件file</p>\n<pre><code>vi file\n</code></pre><p>进入编辑模式</p>\n<pre><code>i\n</code></pre><p>退出编辑模式，进入命令模式</p>\n<pre><code>&lt;Esc&gt;\n</code></pre><p>保存并退出</p>\n<pre><code>:wp\n</code></pre><p>强制（不保存）退去</p>\n<pre><code>:q!\n</code></pre><h3 id=\"文件命令\"><a href=\"#文件命令\" class=\"headerlink\" title=\"文件命令\"></a>文件命令</h3><p>将vim窗口分成双栏并打开新文件</p>\n<pre><code>:vs newfile\n</code></pre><p>在多栏窗口中切换</p>\n<pre><code>ctrl + w + w\n</code></pre><h3 id=\"移动命令\"><a href=\"#移动命令\" class=\"headerlink\" title=\"移动命令\"></a>移动命令</h3><p>移动到第一行</p>\n<pre><code>gg\n</code></pre><p>移动到最后一行</p>\n<pre><code>G\n</code></pre><p>移动到第7行</p>\n<pre><code>7gg\n</code></pre><h3 id=\"插入命令\"><a href=\"#插入命令\" class=\"headerlink\" title=\"插入命令\"></a>插入命令</h3><p>在当前位置生前插入</p>\n<pre><code>i\n</code></pre><p>在当前行首插入</p>\n<pre><code>I\n</code></pre><p>在当前行尾插入</p>\n<pre><code>A\n</code></pre><p>在当前行之后插入一行</p>\n<pre><code>o\n</code></pre><h3 id=\"复制、粘贴、删除\"><a href=\"#复制、粘贴、删除\" class=\"headerlink\" title=\"复制、粘贴、删除\"></a>复制、粘贴、删除</h3><p>拷贝当前行或者之后的7行</p>\n<pre><code>yy\ny7y\n</code></pre><p>粘贴</p>\n<pre><code>p\n</code></pre><p>删除当前行或者之后的7行</p>\n<pre><code>dd\nd7d\n</code></pre><h3 id=\"查找命令\"><a href=\"#查找命令\" class=\"headerlink\" title=\"查找命令\"></a>查找命令</h3><p>查找text，按n健查找下一个，按N健查找前一个</p>\n<pre><code>/text\n</code></pre><p>查找光标处的单词</p>\n<pre><code>*\n</code></pre><p>设置高亮查找到的内容</p>\n<pre><code>:set hlsearch\n</code></pre><p>全局替换aaa为bbb</p>\n<pre><code>:%s/aaa/bbb/g\n</code></pre><p>用//注释第3-5行</p>\n<pre><code>:3,5 s/^/\\/\\/ /g\n</code></pre><h3 id=\"撤销和重做\"><a href=\"#撤销和重做\" class=\"headerlink\" title=\"撤销和重做\"></a>撤销和重做</h3><p>撤销（Undo）</p>\n<pre><code>u\n</code></pre><p>重做（Redo），即撤销的撤销</p>\n<pre><code>Ctrl + r\n</code></pre><h3 id=\"VIM-代码折叠\"><a href=\"#VIM-代码折叠\" class=\"headerlink\" title=\"VIM 代码折叠\"></a>VIM 代码折叠</h3><p>用缩进表示折叠</p>\n<pre><code>set foldmethod=indent\n</code></pre><p>全部折叠</p>\n<pre><code>:set foldlevelstart=0\n</code></pre><p>取消折叠</p>\n<pre><code>:set foldlevelstart=99\n</code></pre><p>使用空格作为折叠快捷键</p>\n<pre><code>nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;\n</code></pre><p>自动加载view，使得上一次折叠的内容可以保存</p>\n<pre><code>au BufWinLeave * silent mkview\nau BufWinEnter * silent loadview\n</code></pre><h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><ul>\n<li>首先要安装Vundle</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ~/.vim/bundle</div><div class=\"line\"></div><div class=\"line\">mkdir ~/.vim/bundle/Vundle.vim</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> ~/.vim/bundle/Vundle.vim</div><div class=\"line\"></div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>\n<ul>\n<li>在.vimrc中配置Vundle，加入以下内容</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible              &quot; be iMproved, required</div><div class=\"line\">filetype off                  &quot; required</div><div class=\"line\"></div><div class=\"line\">&quot; set the runtime path to include Vundle and initialize</div><div class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</div><div class=\"line\">call vundle#begin()</div><div class=\"line\"></div><div class=\"line\">&quot; let Vundle manage Vundle, required</div><div class=\"line\">&quot; use the command below to install the plugins from the command line</div><div class=\"line\">&quot; vim +PluginInstall +qall</div><div class=\"line\"></div><div class=\"line\">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class=\"line\">Plugin &apos;vim-syntastic/syntastic&apos;</div><div class=\"line\">Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class=\"line\">Plugin &apos;pangloss/vim-javascript&apos;</div><div class=\"line\">Plugin &apos;mxw/vim-jsx&apos;</div><div class=\"line\"></div><div class=\"line\">&quot; All of your Plugins must be added before the following line</div><div class=\"line\">call vundle#end()            &quot; required</div><div class=\"line\">filetype plugin indent on    &quot; required</div><div class=\"line\"></div><div class=\"line\">syntax on</div></pre></td></tr></table></figure>\n<ul>\n<li>在配置文件的Plugin部分添加插件，如插件<code>vim-jsx</code>的github链接为 <a href=\"https://github.com/mxw/vim-jsx，于是可以写作\">https://github.com/mxw/vim-jsx，于是可以写作</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin &apos;mxw/vim-jsx&apos;</div></pre></td></tr></table></figure>\n<p>然后运行以下代码安装插件</p>\n<pre><code>vim +PluginInstall +qall\n</code></pre><h2 id=\"配置文件-vimrc\"><a href=\"#配置文件-vimrc\" class=\"headerlink\" title=\"配置文件.vimrc\"></a>配置文件<code>.vimrc</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible              &quot; be iMproved, required</div><div class=\"line\">filetype off                  &quot; required</div><div class=\"line\"></div><div class=\"line\">&quot; set the runtime path to include Vundle and initialize</div><div class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</div><div class=\"line\">call vundle#begin()</div><div class=\"line\"></div><div class=\"line\">&quot; let Vundle manage Vundle, required</div><div class=\"line\">&quot; use the command below to install the plugins from the command line</div><div class=\"line\">&quot; vim +PluginInstall +qall</div><div class=\"line\"></div><div class=\"line\">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class=\"line\">Plugin &apos;vim-syntastic/syntastic&apos;</div><div class=\"line\">Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class=\"line\">Plugin &apos;pangloss/vim-javascript&apos;</div><div class=\"line\">Plugin &apos;mxw/vim-jsx&apos;</div><div class=\"line\"></div><div class=\"line\">&quot; All of your Plugins must be added before the following line</div><div class=\"line\">call vundle#end()            &quot; required</div><div class=\"line\">filetype plugin indent on    &quot; required</div><div class=\"line\"></div><div class=\"line\">syntax on</div><div class=\"line\"></div><div class=\"line\">&quot; vim-jsx</div><div class=\"line\">let g:jsx_ext_required = 0</div><div class=\"line\"></div><div class=\"line\">&quot; syntastic</div><div class=\"line\">&quot; see more by &apos;:help syntastic&apos;</div><div class=\"line\">let g:syntastic_javascript_checkers = [&apos;eslint&apos;]</div><div class=\"line\">let g:syntastic_check_on_w = 0</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&quot; fold</div><div class=\"line\">set foldmethod=indent</div><div class=\"line\">set foldlevelstart=99</div><div class=\"line\">nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&quot; auto mkview &amp; loadview</div><div class=\"line\">au BufWinLeave * silent mkview</div><div class=\"line\">au BufWinEnter * silent loadview</div><div class=\"line\"></div><div class=\"line\">&quot; indent set tab = 2 blank space</div><div class=\"line\">set ts=2</div><div class=\"line\">set sw=2</div><div class=\"line\">set expandtab</div><div class=\"line\">set smartindent</div><div class=\"line\">set number</div></pre></td></tr></table></figure>"},{"title":"Todo List","date":"2017-02-12T08:42:01.000Z","_content":"\nTodo List\n===\n\n## Node/React\n\n## 基于GWAS catalog的基因数据解读\n\n## 爬虫-单词统计->计算机英语\n","source":"_posts/Todo-List.md","raw":"---\ntitle: Todo List\ndate: 2017-02-12 16:42:01\ntags: \n - Blog\n---\n\nTodo List\n===\n\n## Node/React\n\n## 基于GWAS catalog的基因数据解读\n\n## 爬虫-单词统计->计算机英语\n","slug":"Todo-List","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkpk000l77hxbhcsbown","content":"<h1 id=\"Todo-List\"><a href=\"#Todo-List\" class=\"headerlink\" title=\"Todo List\"></a>Todo List</h1><h2 id=\"Node-React\"><a href=\"#Node-React\" class=\"headerlink\" title=\"Node/React\"></a>Node/React</h2><h2 id=\"基于GWAS-catalog的基因数据解读\"><a href=\"#基于GWAS-catalog的基因数据解读\" class=\"headerlink\" title=\"基于GWAS catalog的基因数据解读\"></a>基于GWAS catalog的基因数据解读</h2><h2 id=\"爬虫-单词统计-gt-计算机英语\"><a href=\"#爬虫-单词统计-gt-计算机英语\" class=\"headerlink\" title=\"爬虫-单词统计-&gt;计算机英语\"></a>爬虫-单词统计-&gt;计算机英语</h2>","excerpt":"","more":"<h1 id=\"Todo-List\"><a href=\"#Todo-List\" class=\"headerlink\" title=\"Todo List\"></a>Todo List</h1><h2 id=\"Node-React\"><a href=\"#Node-React\" class=\"headerlink\" title=\"Node/React\"></a>Node/React</h2><h2 id=\"基于GWAS-catalog的基因数据解读\"><a href=\"#基于GWAS-catalog的基因数据解读\" class=\"headerlink\" title=\"基于GWAS catalog的基因数据解读\"></a>基于GWAS catalog的基因数据解读</h2><h2 id=\"爬虫-单词统计-gt-计算机英语\"><a href=\"#爬虫-单词统计-gt-计算机英语\" class=\"headerlink\" title=\"爬虫-单词统计-&gt;计算机英语\"></a>爬虫-单词统计-&gt;计算机英语</h2>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n    - Cheat-sheet\n    - Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-21T03:30:53.823Z","updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkpm000n77hx8dgbmi2g","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"node install note","date":"2017-02-12T08:39:15.000Z","_content":"\nNode安装与npm环境变量配置\n===\n\n<!-- more -->\n\n# Node安装\n\n进入nodejs官方网站下载软件(nodejs.org)\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n\n下载完成后，双击默认安装。安装程序会自动添加环境变量\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n检测nodejs是否安装成功。打开cmd命令行 输入 node - v 显示当前版本号\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n检查npm是否安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行中键入 npm -v\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n# npm环境变量配置\n\nnpm作为一个NodeJS的模块管理，之前我由于没有系统地看资料所以导致安装配置模块的时候走了一大段弯路，所以现在很有必要列出来记录下。我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立“node_global”及“node_cache”两个文件夹。我们就在cmd中键入两行命令：\n\tnpm config set prefix \"D:\\Program Files\\nodejs\\node_global\"\n\t和\n\tnpm config set cache \"D:\\Program Files\\nodejs\\node_cache\"\n\n下面这一步非常关键，我们需要设置系统变量。进入我的电脑→属性→高级→环境变量。在系统变量下新建“NODE_PATH”，输入“D:\\Program Files\\nodejs\\node_global\\node_modules”。\n安装bower, npm install bower -g; -g表示全局\n\n输入 node，require('bower') 测试是否安装成功！\n","source":"_posts/node-install-note.md","raw":"---\ntitle: node install note\ndate: 2017-02-12 16:39:15\ntags: \n    - Node.js\n---\n\nNode安装与npm环境变量配置\n===\n\n<!-- more -->\n\n# Node安装\n\n进入nodejs官方网站下载软件(nodejs.org)\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n\n下载完成后，双击默认安装。安装程序会自动添加环境变量\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n检测nodejs是否安装成功。打开cmd命令行 输入 node - v 显示当前版本号\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n检查npm是否安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行中键入 npm -v\n\nWindows环境下的NodeJS+NPM+Bower安装配置\n\n# npm环境变量配置\n\nnpm作为一个NodeJS的模块管理，之前我由于没有系统地看资料所以导致安装配置模块的时候走了一大段弯路，所以现在很有必要列出来记录下。我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立“node_global”及“node_cache”两个文件夹。我们就在cmd中键入两行命令：\n\tnpm config set prefix \"D:\\Program Files\\nodejs\\node_global\"\n\t和\n\tnpm config set cache \"D:\\Program Files\\nodejs\\node_cache\"\n\n下面这一步非常关键，我们需要设置系统变量。进入我的电脑→属性→高级→环境变量。在系统变量下新建“NODE_PATH”，输入“D:\\Program Files\\nodejs\\node_global\\node_modules”。\n安装bower, npm install bower -g; -g表示全局\n\n输入 node，require('bower') 测试是否安装成功！\n","slug":"node-install-note","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkpn000q77hx4911hpbb","content":"<h1 id=\"Node安装与npm环境变量配置\"><a href=\"#Node安装与npm环境变量配置\" class=\"headerlink\" title=\"Node安装与npm环境变量配置\"></a>Node安装与npm环境变量配置</h1><a id=\"more\"></a>\n<h1 id=\"Node安装\"><a href=\"#Node安装\" class=\"headerlink\" title=\"Node安装\"></a>Node安装</h1><p>进入nodejs官方网站下载软件(nodejs.org)</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>下载完成后，双击默认安装。安装程序会自动添加环境变量<br>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>检测nodejs是否安装成功。打开cmd命令行 输入 node - v 显示当前版本号</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>检查npm是否安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行中键入 npm -v</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<h1 id=\"npm环境变量配置\"><a href=\"#npm环境变量配置\" class=\"headerlink\" title=\"npm环境变量配置\"></a>npm环境变量配置</h1><p>npm作为一个NodeJS的模块管理，之前我由于没有系统地看资料所以导致安装配置模块的时候走了一大段弯路，所以现在很有必要列出来记录下。我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立“node_global”及“node_cache”两个文件夹。我们就在cmd中键入两行命令：<br>    npm config set prefix “D:\\Program Files\\nodejs\\node_global”<br>    和<br>    npm config set cache “D:\\Program Files\\nodejs\\node_cache”</p>\n<p>下面这一步非常关键，我们需要设置系统变量。进入我的电脑→属性→高级→环境变量。在系统变量下新建“NODE_PATH”，输入“D:\\Program Files\\nodejs\\node_global\\node_modules”。<br>安装bower, npm install bower -g; -g表示全局</p>\n<p>输入 node，require(‘bower’) 测试是否安装成功！</p>\n","excerpt":"<h1 id=\"Node安装与npm环境变量配置\"><a href=\"#Node安装与npm环境变量配置\" class=\"headerlink\" title=\"Node安装与npm环境变量配置\"></a>Node安装与npm环境变量配置</h1>","more":"<h1 id=\"Node安装\"><a href=\"#Node安装\" class=\"headerlink\" title=\"Node安装\"></a>Node安装</h1><p>进入nodejs官方网站下载软件(nodejs.org)</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>下载完成后，双击默认安装。安装程序会自动添加环境变量<br>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>检测nodejs是否安装成功。打开cmd命令行 输入 node - v 显示当前版本号</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<p>检查npm是否安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。同样可以使用cmd命令行中键入 npm -v</p>\n<p>Windows环境下的NodeJS+NPM+Bower安装配置</p>\n<h1 id=\"npm环境变量配置\"><a href=\"#npm环境变量配置\" class=\"headerlink\" title=\"npm环境变量配置\"></a>npm环境变量配置</h1><p>npm作为一个NodeJS的模块管理，之前我由于没有系统地看资料所以导致安装配置模块的时候走了一大段弯路，所以现在很有必要列出来记录下。我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立“node_global”及“node_cache”两个文件夹。我们就在cmd中键入两行命令：<br>    npm config set prefix “D:\\Program Files\\nodejs\\node_global”<br>    和<br>    npm config set cache “D:\\Program Files\\nodejs\\node_cache”</p>\n<p>下面这一步非常关键，我们需要设置系统变量。进入我的电脑→属性→高级→环境变量。在系统变量下新建“NODE_PATH”，输入“D:\\Program Files\\nodejs\\node_global\\node_modules”。<br>安装bower, npm install bower -g; -g表示全局</p>\n<p>输入 node，require(‘bower’) 测试是否安装成功！</p>"},{"title":"npm-mirror","date":"2017-03-20T14:55:06.000Z","_content":"\n最近家里网络很糟糕，上不了npm，很是纠结，于是修改设置使用国内的taobao镜像\n\n<!-- more -->\n\n镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:\n\n1.通过config命令\n\n\tnpm config set registry https://registry.npm.taobao.org \n\tnpm info underscore （如果上面配置正确这个命令会有字符串response）\n\n2.命令行指定\n\n\tnpm --registry https://registry.npm.taobao.org info underscore \n\n3.编辑 ~/.npmrc 加入下面内容\n\n\tregistry = https://registry.npm.taobao.org\n\n搜索镜像: https://npm.taobao.org\n\n建立或使用镜像,参考: https://github.com/cnpm/cnpmjs.org","source":"_posts/npm-mirror.md","raw":"---\ntitle: npm-mirror\ndate: 2017-03-20 22:55:06\ntags: \n\t- npm\n---\n\n最近家里网络很糟糕，上不了npm，很是纠结，于是修改设置使用国内的taobao镜像\n\n<!-- more -->\n\n镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:\n\n1.通过config命令\n\n\tnpm config set registry https://registry.npm.taobao.org \n\tnpm info underscore （如果上面配置正确这个命令会有字符串response）\n\n2.命令行指定\n\n\tnpm --registry https://registry.npm.taobao.org info underscore \n\n3.编辑 ~/.npmrc 加入下面内容\n\n\tregistry = https://registry.npm.taobao.org\n\n搜索镜像: https://npm.taobao.org\n\n建立或使用镜像,参考: https://github.com/cnpm/cnpmjs.org","slug":"npm-mirror","published":1,"updated":"2017-03-21T03:30:53.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0j0dkpn000s77hxn09bam42","content":"<p>最近家里网络很糟糕，上不了npm，很是纠结，于是修改设置使用国内的taobao镜像</p>\n<a id=\"more\"></a>\n<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>\n<p>1.通过config命令</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org \nnpm info underscore （如果上面配置正确这个命令会有字符串response）\n</code></pre><p>2.命令行指定</p>\n<pre><code>npm --registry https://registry.npm.taobao.org info underscore \n</code></pre><p>3.编辑 ~/.npmrc 加入下面内容</p>\n<pre><code>registry = https://registry.npm.taobao.org\n</code></pre><p>搜索镜像: <a href=\"https://npm.taobao.org\" target=\"_blank\" rel=\"external\">https://npm.taobao.org</a></p>\n<p>建立或使用镜像,参考: <a href=\"https://github.com/cnpm/cnpmjs.org\" target=\"_blank\" rel=\"external\">https://github.com/cnpm/cnpmjs.org</a></p>\n","excerpt":"<p>最近家里网络很糟糕，上不了npm，很是纠结，于是修改设置使用国内的taobao镜像</p>","more":"<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>\n<p>1.通过config命令</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org \nnpm info underscore （如果上面配置正确这个命令会有字符串response）\n</code></pre><p>2.命令行指定</p>\n<pre><code>npm --registry https://registry.npm.taobao.org info underscore \n</code></pre><p>3.编辑 ~/.npmrc 加入下面内容</p>\n<pre><code>registry = https://registry.npm.taobao.org\n</code></pre><p>搜索镜像: <a href=\"https://npm.taobao.org\">https://npm.taobao.org</a></p>\n<p>建立或使用镜像,参考: <a href=\"https://github.com/cnpm/cnpmjs.org\">https://github.com/cnpm/cnpmjs.org</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0j0dkp0000677hxjqty3kf1","tag_id":"cj0j0dkox000477hxzpvybn6d","_id":"cj0j0dkp4000977hxajqw2jwm"},{"post_id":"cj0j0dkoq000177hxz7iwbqky","tag_id":"cj0j0dkox000477hxzpvybn6d","_id":"cj0j0dkpj000k77hx16yl4dhn"},{"post_id":"cj0j0dkoq000177hxz7iwbqky","tag_id":"cj0j0dkp4000877hxp8u6qxi2","_id":"cj0j0dkpl000m77hxzco80efw"},{"post_id":"cj0j0dkoq000177hxz7iwbqky","tag_id":"cj0j0dkp6000c77hxy3kep0pl","_id":"cj0j0dkpn000p77hxov1j9yn0"},{"post_id":"cj0j0dkoq000177hxz7iwbqky","tag_id":"cj0j0dkpd000f77hxhmw5fc4r","_id":"cj0j0dkpn000r77hx9lq3cppj"},{"post_id":"cj0j0dkpk000l77hxbhcsbown","tag_id":"cj0j0dkpd000f77hxhmw5fc4r","_id":"cj0j0dkpq000u77hx40z8klyb"},{"post_id":"cj0j0dkov000377hxxad08fne","tag_id":"cj0j0dkpi000i77hxaira02br","_id":"cj0j0dkpq000v77hxcn39chtq"},{"post_id":"cj0j0dkov000377hxxad08fne","tag_id":"cj0j0dkpm000o77hxr6kt5byd","_id":"cj0j0dkpq000x77hxkcw61b77"},{"post_id":"cj0j0dkoz000577hxif5hr90q","tag_id":"cj0j0dkpi000i77hxaira02br","_id":"cj0j0dkps001077hxlw3slt00"},{"post_id":"cj0j0dkoz000577hxif5hr90q","tag_id":"cj0j0dkpm000o77hxr6kt5byd","_id":"cj0j0dkpt001177hx6mq8ltzq"},{"post_id":"cj0j0dkoz000577hxif5hr90q","tag_id":"cj0j0dkpr000y77hx3wki94n5","_id":"cj0j0dkpt001377hxjoeyd11h"},{"post_id":"cj0j0dkp3000777hxm36o552n","tag_id":"cj0j0dkpr000z77hxt9hz1nyh","_id":"cj0j0dkpu001677hxg81vxc08"},{"post_id":"cj0j0dkp3000777hxm36o552n","tag_id":"cj0j0dkpt001277hxtpp4pds5","_id":"cj0j0dkpu001777hx4kzproql"},{"post_id":"cj0j0dkp3000777hxm36o552n","tag_id":"cj0j0dkpt001477hxu8d47l5p","_id":"cj0j0dkpu001977hxgmjn1qt3"},{"post_id":"cj0j0dkp5000a77hxmcvn2q7w","tag_id":"cj0j0dkpt001477hxu8d47l5p","_id":"cj0j0dkpu001b77hxnunhzajd"},{"post_id":"cj0j0dkp5000a77hxmcvn2q7w","tag_id":"cj0j0dkpu001877hxnpqudd29","_id":"cj0j0dkpu001c77hxkswno1c9"},{"post_id":"cj0j0dkp5000b77hxiwyiy6sk","tag_id":"cj0j0dkpr000z77hxt9hz1nyh","_id":"cj0j0dkpv001g77hx2zbqspaz"},{"post_id":"cj0j0dkp5000b77hxiwyiy6sk","tag_id":"cj0j0dkpt001477hxu8d47l5p","_id":"cj0j0dkpv001h77hx7uwycas6"},{"post_id":"cj0j0dkp5000b77hxiwyiy6sk","tag_id":"cj0j0dkpu001e77hxrb3942mj","_id":"cj0j0dkpv001j77hxlmv8e9ee"},{"post_id":"cj0j0dkp6000d77hxb76645pm","tag_id":"cj0j0dkpv001f77hx3v1y72ch","_id":"cj0j0dkpv001l77hxr8wau1iw"},{"post_id":"cj0j0dkp6000d77hxb76645pm","tag_id":"cj0j0dkpr000y77hx3wki94n5","_id":"cj0j0dkpv001m77hxz236wswl"},{"post_id":"cj0j0dkpb000e77hxrdvs3kh5","tag_id":"cj0j0dkpt001477hxu8d47l5p","_id":"cj0j0dkpw001p77hx58cm7r04"},{"post_id":"cj0j0dkpb000e77hxrdvs3kh5","tag_id":"cj0j0dkpu001877hxnpqudd29","_id":"cj0j0dkpw001q77hxp0ajcn29"},{"post_id":"cj0j0dkpf000g77hxcw4u6snr","tag_id":"cj0j0dkpr000z77hxt9hz1nyh","_id":"cj0j0dkpw001s77hx94fljeua"},{"post_id":"cj0j0dkph000h77hxmdw3pto2","tag_id":"cj0j0dkpw001r77hxcftrgoyy","_id":"cj0j0dkpz001w77hxxnd6lach"},{"post_id":"cj0j0dkph000h77hxmdw3pto2","tag_id":"cj0j0dkpx001t77hxwh6oetgd","_id":"cj0j0dkpz001x77hx7pd9twyx"},{"post_id":"cj0j0dkph000h77hxmdw3pto2","tag_id":"cj0j0dkpx001u77hxqkzc0fer","_id":"cj0j0dkq0001z77hxuo96z395"},{"post_id":"cj0j0dkpj000j77hxh41hom27","tag_id":"cj0j0dkpy001v77hxxkvjwwwf","_id":"cj0j0dkq0002177hxwv4tbnk8"},{"post_id":"cj0j0dkpj000j77hxh41hom27","tag_id":"cj0j0dkpz001y77hx43rtnm4y","_id":"cj0j0dkq0002277hxddhc0ge8"},{"post_id":"cj0j0dkpm000n77hx8dgbmi2g","tag_id":"cj0j0dkpr000y77hx3wki94n5","_id":"cj0j0dkq1002477hxm4bd88jh"},{"post_id":"cj0j0dkpm000n77hx8dgbmi2g","tag_id":"cj0j0dkox000477hxzpvybn6d","_id":"cj0j0dkq1002577hx7yzj94gk"},{"post_id":"cj0j0dkpn000q77hx4911hpbb","tag_id":"cj0j0dkq1002377hx28pz9za6","_id":"cj0j0dkq1002777hx14jk62tz"},{"post_id":"cj0j0dkpn000s77hxn09bam42","tag_id":"cj0j0dkq1002677hx5k8a2car","_id":"cj0j0dkq2002877hxqxnhj14b"}],"Tag":[{"name":"Hexo","_id":"cj0j0dkox000477hxzpvybn6d"},{"name":"Next","_id":"cj0j0dkp4000877hxp8u6qxi2"},{"name":"GitHub Pages","_id":"cj0j0dkp6000c77hxy3kep0pl"},{"name":"Blog","_id":"cj0j0dkpd000f77hxhmw5fc4r"},{"name":"Git","_id":"cj0j0dkpi000i77hxaira02br"},{"name":"Github","_id":"cj0j0dkpm000o77hxr6kt5byd"},{"name":"Cheat-sheet","_id":"cj0j0dkpr000y77hx3wki94n5"},{"name":"React","_id":"cj0j0dkpr000z77hxt9hz1nyh"},{"name":"JSX","_id":"cj0j0dkpt001277hxtpp4pds5"},{"name":"JavaScript","_id":"cj0j0dkpt001477hxu8d47l5p"},{"name":"ES6","_id":"cj0j0dkpu001877hxnpqudd29"},{"name":"state","_id":"cj0j0dkpu001e77hxrb3942mj"},{"name":"Markdown","_id":"cj0j0dkpv001f77hx3v1y72ch"},{"name":"Canvas","_id":"cj0j0dkpw001r77hxcftrgoyy"},{"name":"Game","_id":"cj0j0dkpx001t77hxwh6oetgd"},{"name":"Demo","_id":"cj0j0dkpx001u77hxqkzc0fer"},{"name":"Vim","_id":"cj0j0dkpy001v77hxxkvjwwwf"},{"name":"Linux","_id":"cj0j0dkpz001y77hx43rtnm4y"},{"name":"Node.js","_id":"cj0j0dkq1002377hx28pz9za6"},{"name":"npm","_id":"cj0j0dkq1002677hx5k8a2car"}]}}